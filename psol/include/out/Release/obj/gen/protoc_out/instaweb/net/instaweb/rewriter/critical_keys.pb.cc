// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/critical_keys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/instaweb/rewriter/critical_keys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto() {
  delete CriticalKeys::default_instance_;
  delete CriticalKeys_KeyEvidence::default_instance_;
  delete CriticalKeys_PendingNonce::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CriticalKeys::default_instance_ = new CriticalKeys();
  CriticalKeys_KeyEvidence::default_instance_ = new CriticalKeys_KeyEvidence();
  CriticalKeys_PendingNonce::default_instance_ = new CriticalKeys_PendingNonce();
  CriticalKeys::default_instance_->InitAsDefaultInstance();
  CriticalKeys_KeyEvidence::default_instance_->InitAsDefaultInstance();
  CriticalKeys_PendingNonce::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto_once_);
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto_once_,
                 &protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto {
  StaticDescriptorInitializer_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto() {
    protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto();
  }
} static_descriptor_initializer_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForCriticalKeys(
    CriticalKeys* ptr) {
  return ptr->mutable_unknown_fields();
}

static ::std::string* MutableUnknownFieldsForCriticalKeys_KeyEvidence(
    CriticalKeys_KeyEvidence* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CriticalKeys_KeyEvidence::kKeyFieldNumber;
const int CriticalKeys_KeyEvidence::kSupportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CriticalKeys_KeyEvidence::CriticalKeys_KeyEvidence()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.CriticalKeys.KeyEvidence)
}

void CriticalKeys_KeyEvidence::InitAsDefaultInstance() {
}

CriticalKeys_KeyEvidence::CriticalKeys_KeyEvidence(const CriticalKeys_KeyEvidence& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.CriticalKeys.KeyEvidence)
}

void CriticalKeys_KeyEvidence::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  support_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CriticalKeys_KeyEvidence::~CriticalKeys_KeyEvidence() {
  // @@protoc_insertion_point(destructor:net_instaweb.CriticalKeys.KeyEvidence)
  SharedDtor();
}

void CriticalKeys_KeyEvidence::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CriticalKeys_KeyEvidence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CriticalKeys_KeyEvidence& CriticalKeys_KeyEvidence::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto();
#endif
  return *default_instance_;
}

CriticalKeys_KeyEvidence* CriticalKeys_KeyEvidence::default_instance_ = NULL;

CriticalKeys_KeyEvidence* CriticalKeys_KeyEvidence::New(::google::protobuf::Arena* arena) const {
  CriticalKeys_KeyEvidence* n = new CriticalKeys_KeyEvidence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CriticalKeys_KeyEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.CriticalKeys.KeyEvidence)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    support_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CriticalKeys_KeyEvidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCriticalKeys_KeyEvidence, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.CriticalKeys.KeyEvidence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_support;
        break;
      }

      // optional int32 support = 2;
      case 2: {
        if (tag == 16) {
         parse_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &support_)));
          set_has_support();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.CriticalKeys.KeyEvidence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.CriticalKeys.KeyEvidence)
  return false;
#undef DO_
}

void CriticalKeys_KeyEvidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.CriticalKeys.KeyEvidence)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional int32 support = 2;
  if (has_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->support(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.CriticalKeys.KeyEvidence)
}

int CriticalKeys_KeyEvidence::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.CriticalKeys.KeyEvidence)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional int32 support = 2;
    if (has_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->support());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CriticalKeys_KeyEvidence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CriticalKeys_KeyEvidence*>(&from));
}

void CriticalKeys_KeyEvidence::MergeFrom(const CriticalKeys_KeyEvidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.CriticalKeys.KeyEvidence)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_support()) {
      set_support(from.support());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CriticalKeys_KeyEvidence::CopyFrom(const CriticalKeys_KeyEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.CriticalKeys.KeyEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CriticalKeys_KeyEvidence::IsInitialized() const {

  return true;
}

void CriticalKeys_KeyEvidence::Swap(CriticalKeys_KeyEvidence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CriticalKeys_KeyEvidence::InternalSwap(CriticalKeys_KeyEvidence* other) {
  key_.Swap(&other->key_);
  std::swap(support_, other->support_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CriticalKeys_KeyEvidence::GetTypeName() const {
  return "net_instaweb.CriticalKeys.KeyEvidence";
}


// -------------------------------------------------------------------

static ::std::string* MutableUnknownFieldsForCriticalKeys_PendingNonce(
    CriticalKeys_PendingNonce* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CriticalKeys_PendingNonce::kTimestampMsFieldNumber;
const int CriticalKeys_PendingNonce::kNonceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CriticalKeys_PendingNonce::CriticalKeys_PendingNonce()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.CriticalKeys.PendingNonce)
}

void CriticalKeys_PendingNonce::InitAsDefaultInstance() {
}

CriticalKeys_PendingNonce::CriticalKeys_PendingNonce(const CriticalKeys_PendingNonce& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.CriticalKeys.PendingNonce)
}

void CriticalKeys_PendingNonce::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  nonce_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CriticalKeys_PendingNonce::~CriticalKeys_PendingNonce() {
  // @@protoc_insertion_point(destructor:net_instaweb.CriticalKeys.PendingNonce)
  SharedDtor();
}

void CriticalKeys_PendingNonce::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CriticalKeys_PendingNonce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CriticalKeys_PendingNonce& CriticalKeys_PendingNonce::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto();
#endif
  return *default_instance_;
}

CriticalKeys_PendingNonce* CriticalKeys_PendingNonce::default_instance_ = NULL;

CriticalKeys_PendingNonce* CriticalKeys_PendingNonce::New(::google::protobuf::Arena* arena) const {
  CriticalKeys_PendingNonce* n = new CriticalKeys_PendingNonce;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CriticalKeys_PendingNonce::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.CriticalKeys.PendingNonce)
  if (_has_bits_[0 / 32] & 3u) {
    timestamp_ms_ = GOOGLE_LONGLONG(0);
    if (has_nonce()) {
      nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CriticalKeys_PendingNonce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCriticalKeys_PendingNonce, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.CriticalKeys.PendingNonce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
          set_has_timestamp_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nonce;
        break;
      }

      // optional string nonce = 2;
      case 2: {
        if (tag == 18) {
         parse_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.CriticalKeys.PendingNonce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.CriticalKeys.PendingNonce)
  return false;
#undef DO_
}

void CriticalKeys_PendingNonce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.CriticalKeys.PendingNonce)
  // optional int64 timestamp_ms = 1;
  if (has_timestamp_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // optional string nonce = 2;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nonce(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.CriticalKeys.PendingNonce)
}

int CriticalKeys_PendingNonce::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.CriticalKeys.PendingNonce)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 timestamp_ms = 1;
    if (has_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_ms());
    }

    // optional string nonce = 2;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nonce());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CriticalKeys_PendingNonce::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CriticalKeys_PendingNonce*>(&from));
}

void CriticalKeys_PendingNonce::MergeFrom(const CriticalKeys_PendingNonce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.CriticalKeys.PendingNonce)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_ms()) {
      set_timestamp_ms(from.timestamp_ms());
    }
    if (from.has_nonce()) {
      set_has_nonce();
      nonce_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nonce_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CriticalKeys_PendingNonce::CopyFrom(const CriticalKeys_PendingNonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.CriticalKeys.PendingNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CriticalKeys_PendingNonce::IsInitialized() const {

  return true;
}

void CriticalKeys_PendingNonce::Swap(CriticalKeys_PendingNonce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CriticalKeys_PendingNonce::InternalSwap(CriticalKeys_PendingNonce* other) {
  std::swap(timestamp_ms_, other->timestamp_ms_);
  nonce_.Swap(&other->nonce_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CriticalKeys_PendingNonce::GetTypeName() const {
  return "net_instaweb.CriticalKeys.PendingNonce";
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CriticalKeys::kNextBeaconTimestampMsFieldNumber;
const int CriticalKeys::kKeyEvidenceFieldNumber;
const int CriticalKeys::kPendingNonceFieldNumber;
const int CriticalKeys::kMaximumPossibleSupportFieldNumber;
const int CriticalKeys::kValidBeaconsReceivedFieldNumber;
const int CriticalKeys::kNoncesRecentlyExpiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CriticalKeys::CriticalKeys()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.CriticalKeys)
}

void CriticalKeys::InitAsDefaultInstance() {
}

CriticalKeys::CriticalKeys(const CriticalKeys& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.CriticalKeys)
}

void CriticalKeys::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_beacon_timestamp_ms_ = GOOGLE_LONGLONG(0);
  maximum_possible_support_ = 1;
  valid_beacons_received_ = GOOGLE_LONGLONG(0);
  nonces_recently_expired_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CriticalKeys::~CriticalKeys() {
  // @@protoc_insertion_point(destructor:net_instaweb.CriticalKeys)
  SharedDtor();
}

void CriticalKeys::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CriticalKeys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CriticalKeys& CriticalKeys::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_net_2finstaweb_2frewriter_2fcritical_5fkeys_2eproto();
#endif
  return *default_instance_;
}

CriticalKeys* CriticalKeys::default_instance_ = NULL;

CriticalKeys* CriticalKeys::New(::google::protobuf::Arena* arena) const {
  CriticalKeys* n = new CriticalKeys;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CriticalKeys::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.CriticalKeys)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CriticalKeys, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CriticalKeys*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 57u) {
    ZR_(valid_beacons_received_, nonces_recently_expired_);
    next_beacon_timestamp_ms_ = GOOGLE_LONGLONG(0);
    maximum_possible_support_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  key_evidence_.Clear();
  pending_nonce_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CriticalKeys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCriticalKeys, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.CriticalKeys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 next_beacon_timestamp_ms = 4;
      case 4: {
        if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_beacon_timestamp_ms_)));
          set_has_next_beacon_timestamp_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_key_evidence;
        break;
      }

      // repeated .net_instaweb.CriticalKeys.KeyEvidence key_evidence = 5;
      case 5: {
        if (tag == 42) {
         parse_key_evidence:
          DO_(input->IncrementRecursionDepth());
         parse_loop_key_evidence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_key_evidence()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_key_evidence;
        if (input->ExpectTag(50)) goto parse_loop_pending_nonce;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .net_instaweb.CriticalKeys.PendingNonce pending_nonce = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pending_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pending_nonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_pending_nonce;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_maximum_possible_support;
        break;
      }

      // optional int32 maximum_possible_support = 7 [default = 1];
      case 7: {
        if (tag == 56) {
         parse_maximum_possible_support:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_possible_support_)));
          set_has_maximum_possible_support();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_valid_beacons_received;
        break;
      }

      // optional int64 valid_beacons_received = 8;
      case 8: {
        if (tag == 64) {
         parse_valid_beacons_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &valid_beacons_received_)));
          set_has_valid_beacons_received();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_nonces_recently_expired;
        break;
      }

      // optional int64 nonces_recently_expired = 9;
      case 9: {
        if (tag == 72) {
         parse_nonces_recently_expired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonces_recently_expired_)));
          set_has_nonces_recently_expired();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.CriticalKeys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.CriticalKeys)
  return false;
#undef DO_
}

void CriticalKeys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.CriticalKeys)
  // optional int64 next_beacon_timestamp_ms = 4;
  if (has_next_beacon_timestamp_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->next_beacon_timestamp_ms(), output);
  }

  // repeated .net_instaweb.CriticalKeys.KeyEvidence key_evidence = 5;
  for (unsigned int i = 0, n = this->key_evidence_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->key_evidence(i), output);
  }

  // repeated .net_instaweb.CriticalKeys.PendingNonce pending_nonce = 6;
  for (unsigned int i = 0, n = this->pending_nonce_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->pending_nonce(i), output);
  }

  // optional int32 maximum_possible_support = 7 [default = 1];
  if (has_maximum_possible_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maximum_possible_support(), output);
  }

  // optional int64 valid_beacons_received = 8;
  if (has_valid_beacons_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->valid_beacons_received(), output);
  }

  // optional int64 nonces_recently_expired = 9;
  if (has_nonces_recently_expired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->nonces_recently_expired(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.CriticalKeys)
}

int CriticalKeys::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.CriticalKeys)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 57u) {
    // optional int64 next_beacon_timestamp_ms = 4;
    if (has_next_beacon_timestamp_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_beacon_timestamp_ms());
    }

    // optional int32 maximum_possible_support = 7 [default = 1];
    if (has_maximum_possible_support()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_possible_support());
    }

    // optional int64 valid_beacons_received = 8;
    if (has_valid_beacons_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->valid_beacons_received());
    }

    // optional int64 nonces_recently_expired = 9;
    if (has_nonces_recently_expired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nonces_recently_expired());
    }

  }
  // repeated .net_instaweb.CriticalKeys.KeyEvidence key_evidence = 5;
  total_size += 1 * this->key_evidence_size();
  for (int i = 0; i < this->key_evidence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_evidence(i));
  }

  // repeated .net_instaweb.CriticalKeys.PendingNonce pending_nonce = 6;
  total_size += 1 * this->pending_nonce_size();
  for (int i = 0; i < this->pending_nonce_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pending_nonce(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CriticalKeys::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CriticalKeys*>(&from));
}

void CriticalKeys::MergeFrom(const CriticalKeys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.CriticalKeys)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  key_evidence_.MergeFrom(from.key_evidence_);
  pending_nonce_.MergeFrom(from.pending_nonce_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_next_beacon_timestamp_ms()) {
      set_next_beacon_timestamp_ms(from.next_beacon_timestamp_ms());
    }
    if (from.has_maximum_possible_support()) {
      set_maximum_possible_support(from.maximum_possible_support());
    }
    if (from.has_valid_beacons_received()) {
      set_valid_beacons_received(from.valid_beacons_received());
    }
    if (from.has_nonces_recently_expired()) {
      set_nonces_recently_expired(from.nonces_recently_expired());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CriticalKeys::CopyFrom(const CriticalKeys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.CriticalKeys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CriticalKeys::IsInitialized() const {

  return true;
}

void CriticalKeys::Swap(CriticalKeys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CriticalKeys::InternalSwap(CriticalKeys* other) {
  std::swap(next_beacon_timestamp_ms_, other->next_beacon_timestamp_ms_);
  key_evidence_.UnsafeArenaSwap(&other->key_evidence_);
  pending_nonce_.UnsafeArenaSwap(&other->pending_nonce_);
  std::swap(maximum_possible_support_, other->maximum_possible_support_);
  std::swap(valid_beacons_received_, other->valid_beacons_received_);
  std::swap(nonces_recently_expired_, other->nonces_recently_expired_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CriticalKeys::GetTypeName() const {
  return "net_instaweb.CriticalKeys";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CriticalKeys_KeyEvidence

// optional bytes key = 1;
bool CriticalKeys_KeyEvidence::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CriticalKeys_KeyEvidence::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CriticalKeys_KeyEvidence::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CriticalKeys_KeyEvidence::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& CriticalKeys_KeyEvidence::key() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.KeyEvidence.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CriticalKeys_KeyEvidence::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalKeys.KeyEvidence.key)
}
 void CriticalKeys_KeyEvidence::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.CriticalKeys.KeyEvidence.key)
}
 void CriticalKeys_KeyEvidence::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.CriticalKeys.KeyEvidence.key)
}
 ::std::string* CriticalKeys_KeyEvidence::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:net_instaweb.CriticalKeys.KeyEvidence.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CriticalKeys_KeyEvidence::release_key() {
  // @@protoc_insertion_point(field_release:net_instaweb.CriticalKeys.KeyEvidence.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CriticalKeys_KeyEvidence::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.CriticalKeys.KeyEvidence.key)
}

// optional int32 support = 2;
bool CriticalKeys_KeyEvidence::has_support() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CriticalKeys_KeyEvidence::set_has_support() {
  _has_bits_[0] |= 0x00000002u;
}
void CriticalKeys_KeyEvidence::clear_has_support() {
  _has_bits_[0] &= ~0x00000002u;
}
void CriticalKeys_KeyEvidence::clear_support() {
  support_ = 0;
  clear_has_support();
}
 ::google::protobuf::int32 CriticalKeys_KeyEvidence::support() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.KeyEvidence.support)
  return support_;
}
 void CriticalKeys_KeyEvidence::set_support(::google::protobuf::int32 value) {
  set_has_support();
  support_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalKeys.KeyEvidence.support)
}

// -------------------------------------------------------------------

// CriticalKeys_PendingNonce

// optional int64 timestamp_ms = 1;
bool CriticalKeys_PendingNonce::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CriticalKeys_PendingNonce::set_has_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void CriticalKeys_PendingNonce::clear_has_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void CriticalKeys_PendingNonce::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_ms();
}
 ::google::protobuf::int64 CriticalKeys_PendingNonce::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.PendingNonce.timestamp_ms)
  return timestamp_ms_;
}
 void CriticalKeys_PendingNonce::set_timestamp_ms(::google::protobuf::int64 value) {
  set_has_timestamp_ms();
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalKeys.PendingNonce.timestamp_ms)
}

// optional string nonce = 2;
bool CriticalKeys_PendingNonce::has_nonce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CriticalKeys_PendingNonce::set_has_nonce() {
  _has_bits_[0] |= 0x00000002u;
}
void CriticalKeys_PendingNonce::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000002u;
}
void CriticalKeys_PendingNonce::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nonce();
}
 const ::std::string& CriticalKeys_PendingNonce::nonce() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.PendingNonce.nonce)
  return nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CriticalKeys_PendingNonce::set_nonce(const ::std::string& value) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalKeys.PendingNonce.nonce)
}
 void CriticalKeys_PendingNonce::set_nonce(const char* value) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.CriticalKeys.PendingNonce.nonce)
}
 void CriticalKeys_PendingNonce::set_nonce(const char* value, size_t size) {
  set_has_nonce();
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.CriticalKeys.PendingNonce.nonce)
}
 ::std::string* CriticalKeys_PendingNonce::mutable_nonce() {
  set_has_nonce();
  // @@protoc_insertion_point(field_mutable:net_instaweb.CriticalKeys.PendingNonce.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CriticalKeys_PendingNonce::release_nonce() {
  // @@protoc_insertion_point(field_release:net_instaweb.CriticalKeys.PendingNonce.nonce)
  clear_has_nonce();
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CriticalKeys_PendingNonce::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    set_has_nonce();
  } else {
    clear_has_nonce();
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.CriticalKeys.PendingNonce.nonce)
}

// -------------------------------------------------------------------

// CriticalKeys

// optional int64 next_beacon_timestamp_ms = 4;
bool CriticalKeys::has_next_beacon_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CriticalKeys::set_has_next_beacon_timestamp_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void CriticalKeys::clear_has_next_beacon_timestamp_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void CriticalKeys::clear_next_beacon_timestamp_ms() {
  next_beacon_timestamp_ms_ = GOOGLE_LONGLONG(0);
  clear_has_next_beacon_timestamp_ms();
}
 ::google::protobuf::int64 CriticalKeys::next_beacon_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.next_beacon_timestamp_ms)
  return next_beacon_timestamp_ms_;
}
 void CriticalKeys::set_next_beacon_timestamp_ms(::google::protobuf::int64 value) {
  set_has_next_beacon_timestamp_ms();
  next_beacon_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalKeys.next_beacon_timestamp_ms)
}

// repeated .net_instaweb.CriticalKeys.KeyEvidence key_evidence = 5;
int CriticalKeys::key_evidence_size() const {
  return key_evidence_.size();
}
void CriticalKeys::clear_key_evidence() {
  key_evidence_.Clear();
}
const ::net_instaweb::CriticalKeys_KeyEvidence& CriticalKeys::key_evidence(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.key_evidence)
  return key_evidence_.Get(index);
}
::net_instaweb::CriticalKeys_KeyEvidence* CriticalKeys::mutable_key_evidence(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.CriticalKeys.key_evidence)
  return key_evidence_.Mutable(index);
}
::net_instaweb::CriticalKeys_KeyEvidence* CriticalKeys::add_key_evidence() {
  // @@protoc_insertion_point(field_add:net_instaweb.CriticalKeys.key_evidence)
  return key_evidence_.Add();
}
::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalKeys_KeyEvidence >*
CriticalKeys::mutable_key_evidence() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.CriticalKeys.key_evidence)
  return &key_evidence_;
}
const ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalKeys_KeyEvidence >&
CriticalKeys::key_evidence() const {
  // @@protoc_insertion_point(field_list:net_instaweb.CriticalKeys.key_evidence)
  return key_evidence_;
}

// repeated .net_instaweb.CriticalKeys.PendingNonce pending_nonce = 6;
int CriticalKeys::pending_nonce_size() const {
  return pending_nonce_.size();
}
void CriticalKeys::clear_pending_nonce() {
  pending_nonce_.Clear();
}
const ::net_instaweb::CriticalKeys_PendingNonce& CriticalKeys::pending_nonce(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.pending_nonce)
  return pending_nonce_.Get(index);
}
::net_instaweb::CriticalKeys_PendingNonce* CriticalKeys::mutable_pending_nonce(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.CriticalKeys.pending_nonce)
  return pending_nonce_.Mutable(index);
}
::net_instaweb::CriticalKeys_PendingNonce* CriticalKeys::add_pending_nonce() {
  // @@protoc_insertion_point(field_add:net_instaweb.CriticalKeys.pending_nonce)
  return pending_nonce_.Add();
}
::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalKeys_PendingNonce >*
CriticalKeys::mutable_pending_nonce() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.CriticalKeys.pending_nonce)
  return &pending_nonce_;
}
const ::google::protobuf::RepeatedPtrField< ::net_instaweb::CriticalKeys_PendingNonce >&
CriticalKeys::pending_nonce() const {
  // @@protoc_insertion_point(field_list:net_instaweb.CriticalKeys.pending_nonce)
  return pending_nonce_;
}

// optional int32 maximum_possible_support = 7 [default = 1];
bool CriticalKeys::has_maximum_possible_support() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CriticalKeys::set_has_maximum_possible_support() {
  _has_bits_[0] |= 0x00000008u;
}
void CriticalKeys::clear_has_maximum_possible_support() {
  _has_bits_[0] &= ~0x00000008u;
}
void CriticalKeys::clear_maximum_possible_support() {
  maximum_possible_support_ = 1;
  clear_has_maximum_possible_support();
}
 ::google::protobuf::int32 CriticalKeys::maximum_possible_support() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.maximum_possible_support)
  return maximum_possible_support_;
}
 void CriticalKeys::set_maximum_possible_support(::google::protobuf::int32 value) {
  set_has_maximum_possible_support();
  maximum_possible_support_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalKeys.maximum_possible_support)
}

// optional int64 valid_beacons_received = 8;
bool CriticalKeys::has_valid_beacons_received() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CriticalKeys::set_has_valid_beacons_received() {
  _has_bits_[0] |= 0x00000010u;
}
void CriticalKeys::clear_has_valid_beacons_received() {
  _has_bits_[0] &= ~0x00000010u;
}
void CriticalKeys::clear_valid_beacons_received() {
  valid_beacons_received_ = GOOGLE_LONGLONG(0);
  clear_has_valid_beacons_received();
}
 ::google::protobuf::int64 CriticalKeys::valid_beacons_received() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.valid_beacons_received)
  return valid_beacons_received_;
}
 void CriticalKeys::set_valid_beacons_received(::google::protobuf::int64 value) {
  set_has_valid_beacons_received();
  valid_beacons_received_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalKeys.valid_beacons_received)
}

// optional int64 nonces_recently_expired = 9;
bool CriticalKeys::has_nonces_recently_expired() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CriticalKeys::set_has_nonces_recently_expired() {
  _has_bits_[0] |= 0x00000020u;
}
void CriticalKeys::clear_has_nonces_recently_expired() {
  _has_bits_[0] &= ~0x00000020u;
}
void CriticalKeys::clear_nonces_recently_expired() {
  nonces_recently_expired_ = GOOGLE_LONGLONG(0);
  clear_has_nonces_recently_expired();
}
 ::google::protobuf::int64 CriticalKeys::nonces_recently_expired() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalKeys.nonces_recently_expired)
  return nonces_recently_expired_;
}
 void CriticalKeys::set_nonces_recently_expired(::google::protobuf::int64 value) {
  set_has_nonces_recently_expired();
  nonces_recently_expired_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalKeys.nonces_recently_expired)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)
