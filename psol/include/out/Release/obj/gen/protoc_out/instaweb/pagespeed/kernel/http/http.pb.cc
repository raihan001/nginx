// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pagespeed/kernel/http/http.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pagespeed/kernel/http/http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

void protobuf_ShutdownFile_pagespeed_2fkernel_2fhttp_2fhttp_2eproto() {
  delete NameValue::default_instance_;
  delete HttpResponseHeaders::default_instance_;
  delete HttpRequestHeaders::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NameValue::default_instance_ = new NameValue();
  HttpResponseHeaders::default_instance_ = new HttpResponseHeaders();
  HttpRequestHeaders::default_instance_ = new HttpRequestHeaders();
  NameValue::default_instance_->InitAsDefaultInstance();
  HttpResponseHeaders::default_instance_->InitAsDefaultInstance();
  HttpRequestHeaders::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pagespeed_2fkernel_2fhttp_2fhttp_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto_once_);
void protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto_once_,
                 &protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pagespeed_2fkernel_2fhttp_2fhttp_2eproto {
  StaticDescriptorInitializer_pagespeed_2fkernel_2fhttp_2fhttp_2eproto() {
    protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto();
  }
} static_descriptor_initializer_pagespeed_2fkernel_2fhttp_2fhttp_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForNameValue(
    NameValue* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NameValue::kNameFieldNumber;
const int NameValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NameValue::NameValue()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.NameValue)
}

void NameValue::InitAsDefaultInstance() {
}

NameValue::NameValue(const NameValue& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.NameValue)
}

void NameValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameValue::~NameValue() {
  // @@protoc_insertion_point(destructor:net_instaweb.NameValue)
  SharedDtor();
}

void NameValue::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NameValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NameValue& NameValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto();
#endif
  return *default_instance_;
}

NameValue* NameValue::default_instance_ = NULL;

NameValue* NameValue::New(::google::protobuf::Arena* arena) const {
  NameValue* n = new NameValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NameValue::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.NameValue)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NameValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForNameValue, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.NameValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.NameValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.NameValue)
  return false;
#undef DO_
}

void NameValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.NameValue)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.NameValue)
}

int NameValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:net_instaweb.NameValue)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int NameValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.NameValue)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NameValue*>(&from));
}

void NameValue::MergeFrom(const NameValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.NameValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void NameValue::CopyFrom(const NameValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.NameValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NameValue::Swap(NameValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NameValue::InternalSwap(NameValue* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NameValue::GetTypeName() const {
  return "net_instaweb.NameValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NameValue

// required string name = 1;
bool NameValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NameValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void NameValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void NameValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& NameValue::name() const {
  // @@protoc_insertion_point(field_get:net_instaweb.NameValue.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.NameValue.name)
}
 void NameValue::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.NameValue.name)
}
 void NameValue::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.NameValue.name)
}
 ::std::string* NameValue::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:net_instaweb.NameValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameValue::release_name() {
  // @@protoc_insertion_point(field_release:net_instaweb.NameValue.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.NameValue.name)
}

// required string value = 2;
bool NameValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NameValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void NameValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void NameValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& NameValue::value() const {
  // @@protoc_insertion_point(field_get:net_instaweb.NameValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.NameValue.value)
}
 void NameValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.NameValue.value)
}
 void NameValue::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.NameValue.value)
}
 ::std::string* NameValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:net_instaweb.NameValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NameValue::release_value() {
  // @@protoc_insertion_point(field_release:net_instaweb.NameValue.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NameValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.NameValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForHttpResponseHeaders(
    HttpResponseHeaders* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpResponseHeaders::kStatusCodeFieldNumber;
const int HttpResponseHeaders::kReasonPhraseFieldNumber;
const int HttpResponseHeaders::kMinorVersionFieldNumber;
const int HttpResponseHeaders::kMajorVersionFieldNumber;
const int HttpResponseHeaders::kExpirationTimeMsFieldNumber;
const int HttpResponseHeaders::kDateMsFieldNumber;
const int HttpResponseHeaders::kLastModifiedTimeMsFieldNumber;
const int HttpResponseHeaders::kCacheTtlMsFieldNumber;
const int HttpResponseHeaders::kBrowserCacheableFieldNumber;
const int HttpResponseHeaders::kProxyCacheableFieldNumber;
const int HttpResponseHeaders::kRequiresBrowserRevalidationFieldNumber;
const int HttpResponseHeaders::kRequiresProxyRevalidationFieldNumber;
const int HttpResponseHeaders::kHeaderFieldNumber;
const int HttpResponseHeaders::kIsImplicitlyCacheableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpResponseHeaders::HttpResponseHeaders()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.HttpResponseHeaders)
}

void HttpResponseHeaders::InitAsDefaultInstance() {
}

HttpResponseHeaders::HttpResponseHeaders(const HttpResponseHeaders& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.HttpResponseHeaders)
}

void HttpResponseHeaders::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0;
  reason_phrase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minor_version_ = 0;
  major_version_ = 1;
  expiration_time_ms_ = GOOGLE_LONGLONG(0);
  date_ms_ = GOOGLE_LONGLONG(0);
  last_modified_time_ms_ = GOOGLE_LONGLONG(0);
  cache_ttl_ms_ = GOOGLE_LONGLONG(0);
  browser_cacheable_ = false;
  proxy_cacheable_ = false;
  requires_browser_revalidation_ = false;
  requires_proxy_revalidation_ = false;
  is_implicitly_cacheable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpResponseHeaders::~HttpResponseHeaders() {
  // @@protoc_insertion_point(destructor:net_instaweb.HttpResponseHeaders)
  SharedDtor();
}

void HttpResponseHeaders::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_phrase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HttpResponseHeaders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HttpResponseHeaders& HttpResponseHeaders::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto();
#endif
  return *default_instance_;
}

HttpResponseHeaders* HttpResponseHeaders::default_instance_ = NULL;

HttpResponseHeaders* HttpResponseHeaders::New(::google::protobuf::Arena* arena) const {
  HttpResponseHeaders* n = new HttpResponseHeaders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpResponseHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.HttpResponseHeaders)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HttpResponseHeaders, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HttpResponseHeaders*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(status_code_, cache_ttl_ms_);
    if (has_reason_phrase()) {
      reason_phrase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    major_version_ = 1;
  }
  if (_has_bits_[8 / 32] & 12032u) {
    ZR_(browser_cacheable_, requires_proxy_revalidation_);
    is_implicitly_cacheable_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  header_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HttpResponseHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForHttpResponseHeaders, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.HttpResponseHeaders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
          set_has_status_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason_phrase;
        break;
      }

      // optional string reason_phrase = 2;
      case 2: {
        if (tag == 18) {
         parse_reason_phrase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason_phrase()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_minor_version;
        break;
      }

      // optional int32 minor_version = 3;
      case 3: {
        if (tag == 24) {
         parse_minor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_major_version;
        break;
      }

      // optional int32 major_version = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expiration_time_ms;
        break;
      }

      // optional int64 expiration_time_ms = 5;
      case 5: {
        if (tag == 40) {
         parse_expiration_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_time_ms_)));
          set_has_expiration_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_date_ms;
        break;
      }

      // optional int64 date_ms = 6;
      case 6: {
        if (tag == 48) {
         parse_date_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_ms_)));
          set_has_date_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_browser_cacheable;
        break;
      }

      // optional bool browser_cacheable = 7;
      case 7: {
        if (tag == 56) {
         parse_browser_cacheable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &browser_cacheable_)));
          set_has_browser_cacheable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_proxy_cacheable;
        break;
      }

      // optional bool proxy_cacheable = 8;
      case 8: {
        if (tag == 64) {
         parse_proxy_cacheable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proxy_cacheable_)));
          set_has_proxy_cacheable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_header;
        break;
      }

      // repeated .net_instaweb.NameValue header = 9;
      case 9: {
        if (tag == 74) {
         parse_header:
          DO_(input->IncrementRecursionDepth());
         parse_loop_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_header;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_last_modified_time_ms;
        break;
      }

      // optional int64 last_modified_time_ms = 10;
      case 10: {
        if (tag == 80) {
         parse_last_modified_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_time_ms_)));
          set_has_last_modified_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cache_ttl_ms;
        break;
      }

      // optional int64 cache_ttl_ms = 11;
      case 11: {
        if (tag == 88) {
         parse_cache_ttl_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_ttl_ms_)));
          set_has_cache_ttl_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_implicitly_cacheable;
        break;
      }

      // optional bool is_implicitly_cacheable = 12;
      case 12: {
        if (tag == 96) {
         parse_is_implicitly_cacheable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_implicitly_cacheable_)));
          set_has_is_implicitly_cacheable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_requires_browser_revalidation;
        break;
      }

      // optional bool requires_browser_revalidation = 13;
      case 13: {
        if (tag == 104) {
         parse_requires_browser_revalidation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_browser_revalidation_)));
          set_has_requires_browser_revalidation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_requires_proxy_revalidation;
        break;
      }

      // optional bool requires_proxy_revalidation = 14;
      case 14: {
        if (tag == 112) {
         parse_requires_proxy_revalidation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_proxy_revalidation_)));
          set_has_requires_proxy_revalidation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.HttpResponseHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.HttpResponseHeaders)
  return false;
#undef DO_
}

void HttpResponseHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.HttpResponseHeaders)
  // optional int32 status_code = 1;
  if (has_status_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status_code(), output);
  }

  // optional string reason_phrase = 2;
  if (has_reason_phrase()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason_phrase(), output);
  }

  // optional int32 minor_version = 3;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->minor_version(), output);
  }

  // optional int32 major_version = 4 [default = 1];
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->major_version(), output);
  }

  // optional int64 expiration_time_ms = 5;
  if (has_expiration_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expiration_time_ms(), output);
  }

  // optional int64 date_ms = 6;
  if (has_date_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->date_ms(), output);
  }

  // optional bool browser_cacheable = 7;
  if (has_browser_cacheable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->browser_cacheable(), output);
  }

  // optional bool proxy_cacheable = 8;
  if (has_proxy_cacheable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->proxy_cacheable(), output);
  }

  // repeated .net_instaweb.NameValue header = 9;
  for (unsigned int i = 0, n = this->header_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->header(i), output);
  }

  // optional int64 last_modified_time_ms = 10;
  if (has_last_modified_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->last_modified_time_ms(), output);
  }

  // optional int64 cache_ttl_ms = 11;
  if (has_cache_ttl_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->cache_ttl_ms(), output);
  }

  // optional bool is_implicitly_cacheable = 12;
  if (has_is_implicitly_cacheable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_implicitly_cacheable(), output);
  }

  // optional bool requires_browser_revalidation = 13;
  if (has_requires_browser_revalidation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->requires_browser_revalidation(), output);
  }

  // optional bool requires_proxy_revalidation = 14;
  if (has_requires_proxy_revalidation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->requires_proxy_revalidation(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.HttpResponseHeaders)
}

int HttpResponseHeaders::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.HttpResponseHeaders)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 status_code = 1;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

    // optional string reason_phrase = 2;
    if (has_reason_phrase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason_phrase());
    }

    // optional int32 minor_version = 3;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

    // optional int32 major_version = 4 [default = 1];
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

    // optional int64 expiration_time_ms = 5;
    if (has_expiration_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiration_time_ms());
    }

    // optional int64 date_ms = 6;
    if (has_date_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date_ms());
    }

    // optional int64 last_modified_time_ms = 10;
    if (has_last_modified_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_modified_time_ms());
    }

    // optional int64 cache_ttl_ms = 11;
    if (has_cache_ttl_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cache_ttl_ms());
    }

  }
  if (_has_bits_[8 / 32] & 12032u) {
    // optional bool browser_cacheable = 7;
    if (has_browser_cacheable()) {
      total_size += 1 + 1;
    }

    // optional bool proxy_cacheable = 8;
    if (has_proxy_cacheable()) {
      total_size += 1 + 1;
    }

    // optional bool requires_browser_revalidation = 13;
    if (has_requires_browser_revalidation()) {
      total_size += 1 + 1;
    }

    // optional bool requires_proxy_revalidation = 14;
    if (has_requires_proxy_revalidation()) {
      total_size += 1 + 1;
    }

    // optional bool is_implicitly_cacheable = 12;
    if (has_is_implicitly_cacheable()) {
      total_size += 1 + 1;
    }

  }
  // repeated .net_instaweb.NameValue header = 9;
  total_size += 1 * this->header_size();
  for (int i = 0; i < this->header_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpResponseHeaders::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HttpResponseHeaders*>(&from));
}

void HttpResponseHeaders::MergeFrom(const HttpResponseHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.HttpResponseHeaders)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  header_.MergeFrom(from.header_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_code()) {
      set_status_code(from.status_code());
    }
    if (from.has_reason_phrase()) {
      set_has_reason_phrase();
      reason_phrase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_phrase_);
    }
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_expiration_time_ms()) {
      set_expiration_time_ms(from.expiration_time_ms());
    }
    if (from.has_date_ms()) {
      set_date_ms(from.date_ms());
    }
    if (from.has_last_modified_time_ms()) {
      set_last_modified_time_ms(from.last_modified_time_ms());
    }
    if (from.has_cache_ttl_ms()) {
      set_cache_ttl_ms(from.cache_ttl_ms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_browser_cacheable()) {
      set_browser_cacheable(from.browser_cacheable());
    }
    if (from.has_proxy_cacheable()) {
      set_proxy_cacheable(from.proxy_cacheable());
    }
    if (from.has_requires_browser_revalidation()) {
      set_requires_browser_revalidation(from.requires_browser_revalidation());
    }
    if (from.has_requires_proxy_revalidation()) {
      set_requires_proxy_revalidation(from.requires_proxy_revalidation());
    }
    if (from.has_is_implicitly_cacheable()) {
      set_is_implicitly_cacheable(from.is_implicitly_cacheable());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void HttpResponseHeaders::CopyFrom(const HttpResponseHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.HttpResponseHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResponseHeaders::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->header())) return false;
  return true;
}

void HttpResponseHeaders::Swap(HttpResponseHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpResponseHeaders::InternalSwap(HttpResponseHeaders* other) {
  std::swap(status_code_, other->status_code_);
  reason_phrase_.Swap(&other->reason_phrase_);
  std::swap(minor_version_, other->minor_version_);
  std::swap(major_version_, other->major_version_);
  std::swap(expiration_time_ms_, other->expiration_time_ms_);
  std::swap(date_ms_, other->date_ms_);
  std::swap(last_modified_time_ms_, other->last_modified_time_ms_);
  std::swap(cache_ttl_ms_, other->cache_ttl_ms_);
  std::swap(browser_cacheable_, other->browser_cacheable_);
  std::swap(proxy_cacheable_, other->proxy_cacheable_);
  std::swap(requires_browser_revalidation_, other->requires_browser_revalidation_);
  std::swap(requires_proxy_revalidation_, other->requires_proxy_revalidation_);
  header_.UnsafeArenaSwap(&other->header_);
  std::swap(is_implicitly_cacheable_, other->is_implicitly_cacheable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HttpResponseHeaders::GetTypeName() const {
  return "net_instaweb.HttpResponseHeaders";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpResponseHeaders

// optional int32 status_code = 1;
bool HttpResponseHeaders::has_status_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HttpResponseHeaders::set_has_status_code() {
  _has_bits_[0] |= 0x00000001u;
}
void HttpResponseHeaders::clear_has_status_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void HttpResponseHeaders::clear_status_code() {
  status_code_ = 0;
  clear_has_status_code();
}
 ::google::protobuf::int32 HttpResponseHeaders::status_code() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.status_code)
  return status_code_;
}
 void HttpResponseHeaders::set_status_code(::google::protobuf::int32 value) {
  set_has_status_code();
  status_code_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.status_code)
}

// optional string reason_phrase = 2;
bool HttpResponseHeaders::has_reason_phrase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HttpResponseHeaders::set_has_reason_phrase() {
  _has_bits_[0] |= 0x00000002u;
}
void HttpResponseHeaders::clear_has_reason_phrase() {
  _has_bits_[0] &= ~0x00000002u;
}
void HttpResponseHeaders::clear_reason_phrase() {
  reason_phrase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason_phrase();
}
 const ::std::string& HttpResponseHeaders::reason_phrase() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.reason_phrase)
  return reason_phrase_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpResponseHeaders::set_reason_phrase(const ::std::string& value) {
  set_has_reason_phrase();
  reason_phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.reason_phrase)
}
 void HttpResponseHeaders::set_reason_phrase(const char* value) {
  set_has_reason_phrase();
  reason_phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.HttpResponseHeaders.reason_phrase)
}
 void HttpResponseHeaders::set_reason_phrase(const char* value, size_t size) {
  set_has_reason_phrase();
  reason_phrase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.HttpResponseHeaders.reason_phrase)
}
 ::std::string* HttpResponseHeaders::mutable_reason_phrase() {
  set_has_reason_phrase();
  // @@protoc_insertion_point(field_mutable:net_instaweb.HttpResponseHeaders.reason_phrase)
  return reason_phrase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpResponseHeaders::release_reason_phrase() {
  // @@protoc_insertion_point(field_release:net_instaweb.HttpResponseHeaders.reason_phrase)
  clear_has_reason_phrase();
  return reason_phrase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpResponseHeaders::set_allocated_reason_phrase(::std::string* reason_phrase) {
  if (reason_phrase != NULL) {
    set_has_reason_phrase();
  } else {
    clear_has_reason_phrase();
  }
  reason_phrase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason_phrase);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.HttpResponseHeaders.reason_phrase)
}

// optional int32 minor_version = 3;
bool HttpResponseHeaders::has_minor_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HttpResponseHeaders::set_has_minor_version() {
  _has_bits_[0] |= 0x00000004u;
}
void HttpResponseHeaders::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void HttpResponseHeaders::clear_minor_version() {
  minor_version_ = 0;
  clear_has_minor_version();
}
 ::google::protobuf::int32 HttpResponseHeaders::minor_version() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.minor_version)
  return minor_version_;
}
 void HttpResponseHeaders::set_minor_version(::google::protobuf::int32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.minor_version)
}

// optional int32 major_version = 4 [default = 1];
bool HttpResponseHeaders::has_major_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HttpResponseHeaders::set_has_major_version() {
  _has_bits_[0] |= 0x00000008u;
}
void HttpResponseHeaders::clear_has_major_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void HttpResponseHeaders::clear_major_version() {
  major_version_ = 1;
  clear_has_major_version();
}
 ::google::protobuf::int32 HttpResponseHeaders::major_version() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.major_version)
  return major_version_;
}
 void HttpResponseHeaders::set_major_version(::google::protobuf::int32 value) {
  set_has_major_version();
  major_version_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.major_version)
}

// optional int64 expiration_time_ms = 5;
bool HttpResponseHeaders::has_expiration_time_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HttpResponseHeaders::set_has_expiration_time_ms() {
  _has_bits_[0] |= 0x00000010u;
}
void HttpResponseHeaders::clear_has_expiration_time_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
void HttpResponseHeaders::clear_expiration_time_ms() {
  expiration_time_ms_ = GOOGLE_LONGLONG(0);
  clear_has_expiration_time_ms();
}
 ::google::protobuf::int64 HttpResponseHeaders::expiration_time_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.expiration_time_ms)
  return expiration_time_ms_;
}
 void HttpResponseHeaders::set_expiration_time_ms(::google::protobuf::int64 value) {
  set_has_expiration_time_ms();
  expiration_time_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.expiration_time_ms)
}

// optional int64 date_ms = 6;
bool HttpResponseHeaders::has_date_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HttpResponseHeaders::set_has_date_ms() {
  _has_bits_[0] |= 0x00000020u;
}
void HttpResponseHeaders::clear_has_date_ms() {
  _has_bits_[0] &= ~0x00000020u;
}
void HttpResponseHeaders::clear_date_ms() {
  date_ms_ = GOOGLE_LONGLONG(0);
  clear_has_date_ms();
}
 ::google::protobuf::int64 HttpResponseHeaders::date_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.date_ms)
  return date_ms_;
}
 void HttpResponseHeaders::set_date_ms(::google::protobuf::int64 value) {
  set_has_date_ms();
  date_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.date_ms)
}

// optional int64 last_modified_time_ms = 10;
bool HttpResponseHeaders::has_last_modified_time_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HttpResponseHeaders::set_has_last_modified_time_ms() {
  _has_bits_[0] |= 0x00000040u;
}
void HttpResponseHeaders::clear_has_last_modified_time_ms() {
  _has_bits_[0] &= ~0x00000040u;
}
void HttpResponseHeaders::clear_last_modified_time_ms() {
  last_modified_time_ms_ = GOOGLE_LONGLONG(0);
  clear_has_last_modified_time_ms();
}
 ::google::protobuf::int64 HttpResponseHeaders::last_modified_time_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.last_modified_time_ms)
  return last_modified_time_ms_;
}
 void HttpResponseHeaders::set_last_modified_time_ms(::google::protobuf::int64 value) {
  set_has_last_modified_time_ms();
  last_modified_time_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.last_modified_time_ms)
}

// optional int64 cache_ttl_ms = 11;
bool HttpResponseHeaders::has_cache_ttl_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HttpResponseHeaders::set_has_cache_ttl_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void HttpResponseHeaders::clear_has_cache_ttl_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void HttpResponseHeaders::clear_cache_ttl_ms() {
  cache_ttl_ms_ = GOOGLE_LONGLONG(0);
  clear_has_cache_ttl_ms();
}
 ::google::protobuf::int64 HttpResponseHeaders::cache_ttl_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.cache_ttl_ms)
  return cache_ttl_ms_;
}
 void HttpResponseHeaders::set_cache_ttl_ms(::google::protobuf::int64 value) {
  set_has_cache_ttl_ms();
  cache_ttl_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.cache_ttl_ms)
}

// optional bool browser_cacheable = 7;
bool HttpResponseHeaders::has_browser_cacheable() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void HttpResponseHeaders::set_has_browser_cacheable() {
  _has_bits_[0] |= 0x00000100u;
}
void HttpResponseHeaders::clear_has_browser_cacheable() {
  _has_bits_[0] &= ~0x00000100u;
}
void HttpResponseHeaders::clear_browser_cacheable() {
  browser_cacheable_ = false;
  clear_has_browser_cacheable();
}
 bool HttpResponseHeaders::browser_cacheable() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.browser_cacheable)
  return browser_cacheable_;
}
 void HttpResponseHeaders::set_browser_cacheable(bool value) {
  set_has_browser_cacheable();
  browser_cacheable_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.browser_cacheable)
}

// optional bool proxy_cacheable = 8;
bool HttpResponseHeaders::has_proxy_cacheable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void HttpResponseHeaders::set_has_proxy_cacheable() {
  _has_bits_[0] |= 0x00000200u;
}
void HttpResponseHeaders::clear_has_proxy_cacheable() {
  _has_bits_[0] &= ~0x00000200u;
}
void HttpResponseHeaders::clear_proxy_cacheable() {
  proxy_cacheable_ = false;
  clear_has_proxy_cacheable();
}
 bool HttpResponseHeaders::proxy_cacheable() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.proxy_cacheable)
  return proxy_cacheable_;
}
 void HttpResponseHeaders::set_proxy_cacheable(bool value) {
  set_has_proxy_cacheable();
  proxy_cacheable_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.proxy_cacheable)
}

// optional bool requires_browser_revalidation = 13;
bool HttpResponseHeaders::has_requires_browser_revalidation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void HttpResponseHeaders::set_has_requires_browser_revalidation() {
  _has_bits_[0] |= 0x00000400u;
}
void HttpResponseHeaders::clear_has_requires_browser_revalidation() {
  _has_bits_[0] &= ~0x00000400u;
}
void HttpResponseHeaders::clear_requires_browser_revalidation() {
  requires_browser_revalidation_ = false;
  clear_has_requires_browser_revalidation();
}
 bool HttpResponseHeaders::requires_browser_revalidation() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.requires_browser_revalidation)
  return requires_browser_revalidation_;
}
 void HttpResponseHeaders::set_requires_browser_revalidation(bool value) {
  set_has_requires_browser_revalidation();
  requires_browser_revalidation_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.requires_browser_revalidation)
}

// optional bool requires_proxy_revalidation = 14;
bool HttpResponseHeaders::has_requires_proxy_revalidation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void HttpResponseHeaders::set_has_requires_proxy_revalidation() {
  _has_bits_[0] |= 0x00000800u;
}
void HttpResponseHeaders::clear_has_requires_proxy_revalidation() {
  _has_bits_[0] &= ~0x00000800u;
}
void HttpResponseHeaders::clear_requires_proxy_revalidation() {
  requires_proxy_revalidation_ = false;
  clear_has_requires_proxy_revalidation();
}
 bool HttpResponseHeaders::requires_proxy_revalidation() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.requires_proxy_revalidation)
  return requires_proxy_revalidation_;
}
 void HttpResponseHeaders::set_requires_proxy_revalidation(bool value) {
  set_has_requires_proxy_revalidation();
  requires_proxy_revalidation_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.requires_proxy_revalidation)
}

// repeated .net_instaweb.NameValue header = 9;
int HttpResponseHeaders::header_size() const {
  return header_.size();
}
void HttpResponseHeaders::clear_header() {
  header_.Clear();
}
const ::net_instaweb::NameValue& HttpResponseHeaders::header(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.header)
  return header_.Get(index);
}
::net_instaweb::NameValue* HttpResponseHeaders::mutable_header(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.HttpResponseHeaders.header)
  return header_.Mutable(index);
}
::net_instaweb::NameValue* HttpResponseHeaders::add_header() {
  // @@protoc_insertion_point(field_add:net_instaweb.HttpResponseHeaders.header)
  return header_.Add();
}
::google::protobuf::RepeatedPtrField< ::net_instaweb::NameValue >*
HttpResponseHeaders::mutable_header() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.HttpResponseHeaders.header)
  return &header_;
}
const ::google::protobuf::RepeatedPtrField< ::net_instaweb::NameValue >&
HttpResponseHeaders::header() const {
  // @@protoc_insertion_point(field_list:net_instaweb.HttpResponseHeaders.header)
  return header_;
}

// optional bool is_implicitly_cacheable = 12;
bool HttpResponseHeaders::has_is_implicitly_cacheable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void HttpResponseHeaders::set_has_is_implicitly_cacheable() {
  _has_bits_[0] |= 0x00002000u;
}
void HttpResponseHeaders::clear_has_is_implicitly_cacheable() {
  _has_bits_[0] &= ~0x00002000u;
}
void HttpResponseHeaders::clear_is_implicitly_cacheable() {
  is_implicitly_cacheable_ = false;
  clear_has_is_implicitly_cacheable();
}
 bool HttpResponseHeaders::is_implicitly_cacheable() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpResponseHeaders.is_implicitly_cacheable)
  return is_implicitly_cacheable_;
}
 void HttpResponseHeaders::set_is_implicitly_cacheable(bool value) {
  set_has_is_implicitly_cacheable();
  is_implicitly_cacheable_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpResponseHeaders.is_implicitly_cacheable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForHttpRequestHeaders(
    HttpRequestHeaders* ptr) {
  return ptr->mutable_unknown_fields();
}

bool HttpRequestHeaders_Method_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HttpRequestHeaders_Method HttpRequestHeaders::OPTIONS;
const HttpRequestHeaders_Method HttpRequestHeaders::GET;
const HttpRequestHeaders_Method HttpRequestHeaders::HEAD;
const HttpRequestHeaders_Method HttpRequestHeaders::POST;
const HttpRequestHeaders_Method HttpRequestHeaders::PUT;
const HttpRequestHeaders_Method HttpRequestHeaders::DELETE;
const HttpRequestHeaders_Method HttpRequestHeaders::TRACE;
const HttpRequestHeaders_Method HttpRequestHeaders::CONNECT;
const HttpRequestHeaders_Method HttpRequestHeaders::INVALID;
const HttpRequestHeaders_Method HttpRequestHeaders::PATCH;
const HttpRequestHeaders_Method HttpRequestHeaders::PURGE;
const HttpRequestHeaders_Method HttpRequestHeaders::Method_MIN;
const HttpRequestHeaders_Method HttpRequestHeaders::Method_MAX;
const int HttpRequestHeaders::Method_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpRequestHeaders::kMinorVersionFieldNumber;
const int HttpRequestHeaders::kMajorVersionFieldNumber;
const int HttpRequestHeaders::kMethodFieldNumber;
const int HttpRequestHeaders::kHeaderFieldNumber;
const int HttpRequestHeaders::kMessageBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpRequestHeaders::HttpRequestHeaders()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.HttpRequestHeaders)
}

void HttpRequestHeaders::InitAsDefaultInstance() {
}

HttpRequestHeaders::HttpRequestHeaders(const HttpRequestHeaders& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.HttpRequestHeaders)
}

void HttpRequestHeaders::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  minor_version_ = 0;
  major_version_ = 1;
  method_ = 2;
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpRequestHeaders::~HttpRequestHeaders() {
  // @@protoc_insertion_point(destructor:net_instaweb.HttpRequestHeaders)
  SharedDtor();
}

void HttpRequestHeaders::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HttpRequestHeaders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HttpRequestHeaders& HttpRequestHeaders::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto();
#endif
  return *default_instance_;
}

HttpRequestHeaders* HttpRequestHeaders::default_instance_ = NULL;

HttpRequestHeaders* HttpRequestHeaders::New(::google::protobuf::Arena* arena) const {
  HttpRequestHeaders* n = new HttpRequestHeaders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpRequestHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.HttpRequestHeaders)
  if (_has_bits_[0 / 32] & 23u) {
    minor_version_ = 0;
    major_version_ = 1;
    method_ = 2;
    if (has_message_body()) {
      message_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  header_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HttpRequestHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForHttpRequestHeaders, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.HttpRequestHeaders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 minor_version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
          set_has_minor_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_major_version;
        break;
      }

      // optional int32 major_version = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_major_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
          set_has_major_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_method;
        break;
      }

      // optional .net_instaweb.HttpRequestHeaders.Method method = 3 [default = GET];
      case 3: {
        if (tag == 24) {
         parse_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::HttpRequestHeaders_Method_IsValid(value)) {
            set_method(static_cast< ::net_instaweb::HttpRequestHeaders_Method >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_header;
        break;
      }

      // repeated .net_instaweb.NameValue header = 4;
      case 4: {
        if (tag == 34) {
         parse_header:
          DO_(input->IncrementRecursionDepth());
         parse_loop_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_header;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_message_body;
        break;
      }

      // optional bytes message_body = 5;
      case 5: {
        if (tag == 42) {
         parse_message_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.HttpRequestHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.HttpRequestHeaders)
  return false;
#undef DO_
}

void HttpRequestHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.HttpRequestHeaders)
  // optional int32 minor_version = 1;
  if (has_minor_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minor_version(), output);
  }

  // optional int32 major_version = 2 [default = 1];
  if (has_major_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->major_version(), output);
  }

  // optional .net_instaweb.HttpRequestHeaders.Method method = 3 [default = GET];
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->method(), output);
  }

  // repeated .net_instaweb.NameValue header = 4;
  for (unsigned int i = 0, n = this->header_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->header(i), output);
  }

  // optional bytes message_body = 5;
  if (has_message_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->message_body(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.HttpRequestHeaders)
}

int HttpRequestHeaders::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.HttpRequestHeaders)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional int32 minor_version = 1;
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

    // optional int32 major_version = 2 [default = 1];
    if (has_major_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

    // optional .net_instaweb.HttpRequestHeaders.Method method = 3 [default = GET];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }

    // optional bytes message_body = 5;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }

  }
  // repeated .net_instaweb.NameValue header = 4;
  total_size += 1 * this->header_size();
  for (int i = 0; i < this->header_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->header(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRequestHeaders::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HttpRequestHeaders*>(&from));
}

void HttpRequestHeaders::MergeFrom(const HttpRequestHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.HttpRequestHeaders)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  header_.MergeFrom(from.header_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minor_version()) {
      set_minor_version(from.minor_version());
    }
    if (from.has_major_version()) {
      set_major_version(from.major_version());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_message_body()) {
      set_has_message_body();
      message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void HttpRequestHeaders::CopyFrom(const HttpRequestHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.HttpRequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequestHeaders::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->header())) return false;
  return true;
}

void HttpRequestHeaders::Swap(HttpRequestHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpRequestHeaders::InternalSwap(HttpRequestHeaders* other) {
  std::swap(minor_version_, other->minor_version_);
  std::swap(major_version_, other->major_version_);
  std::swap(method_, other->method_);
  header_.UnsafeArenaSwap(&other->header_);
  message_body_.Swap(&other->message_body_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HttpRequestHeaders::GetTypeName() const {
  return "net_instaweb.HttpRequestHeaders";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HttpRequestHeaders

// optional int32 minor_version = 1;
bool HttpRequestHeaders::has_minor_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HttpRequestHeaders::set_has_minor_version() {
  _has_bits_[0] |= 0x00000001u;
}
void HttpRequestHeaders::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void HttpRequestHeaders::clear_minor_version() {
  minor_version_ = 0;
  clear_has_minor_version();
}
 ::google::protobuf::int32 HttpRequestHeaders::minor_version() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpRequestHeaders.minor_version)
  return minor_version_;
}
 void HttpRequestHeaders::set_minor_version(::google::protobuf::int32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpRequestHeaders.minor_version)
}

// optional int32 major_version = 2 [default = 1];
bool HttpRequestHeaders::has_major_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HttpRequestHeaders::set_has_major_version() {
  _has_bits_[0] |= 0x00000002u;
}
void HttpRequestHeaders::clear_has_major_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void HttpRequestHeaders::clear_major_version() {
  major_version_ = 1;
  clear_has_major_version();
}
 ::google::protobuf::int32 HttpRequestHeaders::major_version() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpRequestHeaders.major_version)
  return major_version_;
}
 void HttpRequestHeaders::set_major_version(::google::protobuf::int32 value) {
  set_has_major_version();
  major_version_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpRequestHeaders.major_version)
}

// optional .net_instaweb.HttpRequestHeaders.Method method = 3 [default = GET];
bool HttpRequestHeaders::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HttpRequestHeaders::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
void HttpRequestHeaders::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
void HttpRequestHeaders::clear_method() {
  method_ = 2;
  clear_has_method();
}
 ::net_instaweb::HttpRequestHeaders_Method HttpRequestHeaders::method() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpRequestHeaders.method)
  return static_cast< ::net_instaweb::HttpRequestHeaders_Method >(method_);
}
 void HttpRequestHeaders::set_method(::net_instaweb::HttpRequestHeaders_Method value) {
  assert(::net_instaweb::HttpRequestHeaders_Method_IsValid(value));
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.HttpRequestHeaders.method)
}

// repeated .net_instaweb.NameValue header = 4;
int HttpRequestHeaders::header_size() const {
  return header_.size();
}
void HttpRequestHeaders::clear_header() {
  header_.Clear();
}
const ::net_instaweb::NameValue& HttpRequestHeaders::header(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpRequestHeaders.header)
  return header_.Get(index);
}
::net_instaweb::NameValue* HttpRequestHeaders::mutable_header(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.HttpRequestHeaders.header)
  return header_.Mutable(index);
}
::net_instaweb::NameValue* HttpRequestHeaders::add_header() {
  // @@protoc_insertion_point(field_add:net_instaweb.HttpRequestHeaders.header)
  return header_.Add();
}
::google::protobuf::RepeatedPtrField< ::net_instaweb::NameValue >*
HttpRequestHeaders::mutable_header() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.HttpRequestHeaders.header)
  return &header_;
}
const ::google::protobuf::RepeatedPtrField< ::net_instaweb::NameValue >&
HttpRequestHeaders::header() const {
  // @@protoc_insertion_point(field_list:net_instaweb.HttpRequestHeaders.header)
  return header_;
}

// optional bytes message_body = 5;
bool HttpRequestHeaders::has_message_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HttpRequestHeaders::set_has_message_body() {
  _has_bits_[0] |= 0x00000010u;
}
void HttpRequestHeaders::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000010u;
}
void HttpRequestHeaders::clear_message_body() {
  message_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_body();
}
 const ::std::string& HttpRequestHeaders::message_body() const {
  // @@protoc_insertion_point(field_get:net_instaweb.HttpRequestHeaders.message_body)
  return message_body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequestHeaders::set_message_body(const ::std::string& value) {
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.HttpRequestHeaders.message_body)
}
 void HttpRequestHeaders::set_message_body(const char* value) {
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.HttpRequestHeaders.message_body)
}
 void HttpRequestHeaders::set_message_body(const void* value, size_t size) {
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.HttpRequestHeaders.message_body)
}
 ::std::string* HttpRequestHeaders::mutable_message_body() {
  set_has_message_body();
  // @@protoc_insertion_point(field_mutable:net_instaweb.HttpRequestHeaders.message_body)
  return message_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HttpRequestHeaders::release_message_body() {
  // @@protoc_insertion_point(field_release:net_instaweb.HttpRequestHeaders.message_body)
  clear_has_message_body();
  return message_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HttpRequestHeaders::set_allocated_message_body(::std::string* message_body) {
  if (message_body != NULL) {
    set_has_message_body();
  } else {
    clear_has_message_body();
  }
  message_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_body);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.HttpRequestHeaders.message_body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)
