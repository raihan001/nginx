// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pagespeed/opt/logging/logging.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pagespeed/opt/logging/logging.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

void protobuf_ShutdownFile_pagespeed_2fopt_2flogging_2flogging_2eproto() {
  delete TimingInfo::default_instance_;
  delete BlinkInfo::default_instance_;
  delete MetadataCacheInfo::default_instance_;
  delete RewritingInfo::default_instance_;
  delete SplitHtmlInfo::default_instance_;
  delete PropertyCohortInfo::default_instance_;
  delete PropertyPageInfo::default_instance_;
  delete FlushEarlyFlowInfo::default_instance_;
  delete FlushEarlyResourceInfo::default_instance_;
  delete CriticalCssInfo::default_instance_;
  delete CacheHtmlLoggingInfo::default_instance_;
  delete RewriteResourceInfo::default_instance_;
  delete ImageRewriteResourceInfo::default_instance_;
  delete RewriterInfo::default_instance_;
  delete ResourceUrlInfo::default_instance_;
  delete ImageStats::default_instance_;
  delete RewriteStatusCount::default_instance_;
  delete RewriterStats::default_instance_;
  delete DeviceInfo::default_instance_;
  delete LoggingInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::net_instaweb::protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fimage_5ftypes_2eproto();
  ::net_instaweb::protobuf_AddDesc_pagespeed_2fopt_2flogging_2fenums_2eproto();
  TimingInfo::default_instance_ = new TimingInfo();
  BlinkInfo::default_instance_ = new BlinkInfo();
  MetadataCacheInfo::default_instance_ = new MetadataCacheInfo();
  RewritingInfo::default_instance_ = new RewritingInfo();
  SplitHtmlInfo::default_instance_ = new SplitHtmlInfo();
  PropertyCohortInfo::default_instance_ = new PropertyCohortInfo();
  PropertyPageInfo::default_instance_ = new PropertyPageInfo();
  FlushEarlyFlowInfo::default_instance_ = new FlushEarlyFlowInfo();
  FlushEarlyResourceInfo::default_instance_ = new FlushEarlyResourceInfo();
  CriticalCssInfo::default_instance_ = new CriticalCssInfo();
  CacheHtmlLoggingInfo::default_instance_ = new CacheHtmlLoggingInfo();
  RewriteResourceInfo::default_instance_ = new RewriteResourceInfo();
  ImageRewriteResourceInfo::default_instance_ = new ImageRewriteResourceInfo();
  RewriterInfo::default_instance_ = new RewriterInfo();
  ResourceUrlInfo::default_instance_ = new ResourceUrlInfo();
  ImageStats::default_instance_ = new ImageStats();
  RewriteStatusCount::default_instance_ = new RewriteStatusCount();
  RewriterStats::default_instance_ = new RewriterStats();
  DeviceInfo::default_instance_ = new DeviceInfo();
  LoggingInfo::default_instance_ = new LoggingInfo();
  TimingInfo::default_instance_->InitAsDefaultInstance();
  BlinkInfo::default_instance_->InitAsDefaultInstance();
  MetadataCacheInfo::default_instance_->InitAsDefaultInstance();
  RewritingInfo::default_instance_->InitAsDefaultInstance();
  SplitHtmlInfo::default_instance_->InitAsDefaultInstance();
  PropertyCohortInfo::default_instance_->InitAsDefaultInstance();
  PropertyPageInfo::default_instance_->InitAsDefaultInstance();
  FlushEarlyFlowInfo::default_instance_->InitAsDefaultInstance();
  FlushEarlyResourceInfo::default_instance_->InitAsDefaultInstance();
  CriticalCssInfo::default_instance_->InitAsDefaultInstance();
  CacheHtmlLoggingInfo::default_instance_->InitAsDefaultInstance();
  RewriteResourceInfo::default_instance_->InitAsDefaultInstance();
  ImageRewriteResourceInfo::default_instance_->InitAsDefaultInstance();
  RewriterInfo::default_instance_->InitAsDefaultInstance();
  ResourceUrlInfo::default_instance_->InitAsDefaultInstance();
  ImageStats::default_instance_->InitAsDefaultInstance();
  RewriteStatusCount::default_instance_->InitAsDefaultInstance();
  RewriterStats::default_instance_->InitAsDefaultInstance();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  LoggingInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pagespeed_2fopt_2flogging_2flogging_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto_once_);
void protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto_once_,
                 &protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pagespeed_2fopt_2flogging_2flogging_2eproto {
  StaticDescriptorInitializer_pagespeed_2fopt_2flogging_2flogging_2eproto() {
    protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
  }
} static_descriptor_initializer_pagespeed_2fopt_2flogging_2flogging_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForTimingInfo(
    TimingInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimingInfo::kCache1MsFieldNumber;
const int TimingInfo::kCache2MsFieldNumber;
const int TimingInfo::kHeaderFetchMsFieldNumber;
const int TimingInfo::kFetchMsFieldNumber;
const int TimingInfo::kTimeToFirstByteMsFieldNumber;
const int TimingInfo::kRequestStartMsFieldNumber;
const int TimingInfo::kTimeToStartParseMsFieldNumber;
const int TimingInfo::kTimeToStartFetchMsFieldNumber;
const int TimingInfo::kProcessingTimeMsFieldNumber;
const int TimingInfo::kTimeToStartProcessingMsFieldNumber;
const int TimingInfo::kTimeToPcacheLookupStartMsFieldNumber;
const int TimingInfo::kTimeToPcacheLookupEndMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimingInfo::TimingInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.TimingInfo)
}

void TimingInfo::InitAsDefaultInstance() {
}

TimingInfo::TimingInfo(const TimingInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.TimingInfo)
}

void TimingInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache1_ms_ = GOOGLE_LONGLONG(0);
  cache2_ms_ = GOOGLE_LONGLONG(0);
  header_fetch_ms_ = GOOGLE_LONGLONG(0);
  fetch_ms_ = GOOGLE_LONGLONG(0);
  time_to_first_byte_ms_ = GOOGLE_LONGLONG(0);
  request_start_ms_ = GOOGLE_LONGLONG(0);
  time_to_start_parse_ms_ = GOOGLE_LONGLONG(0);
  time_to_start_fetch_ms_ = GOOGLE_LONGLONG(0);
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  time_to_start_processing_ms_ = GOOGLE_LONGLONG(0);
  time_to_pcache_lookup_start_ms_ = GOOGLE_LONGLONG(0);
  time_to_pcache_lookup_end_ms_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimingInfo::~TimingInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.TimingInfo)
  SharedDtor();
}

void TimingInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimingInfo& TimingInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

TimingInfo* TimingInfo::default_instance_ = NULL;

TimingInfo* TimingInfo::New(::google::protobuf::Arena* arena) const {
  TimingInfo* n = new TimingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.TimingInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimingInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimingInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(cache1_ms_, time_to_start_fetch_ms_);
  }
  ZR_(processing_time_ms_, time_to_pcache_lookup_end_ms_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TimingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTimingInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.TimingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cache1_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache1_ms_)));
          set_has_cache1_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cache2_ms;
        break;
      }

      // optional int64 cache2_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_cache2_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache2_ms_)));
          set_has_cache2_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_header_fetch_ms;
        break;
      }

      // optional int64 header_fetch_ms = 3;
      case 3: {
        if (tag == 24) {
         parse_header_fetch_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &header_fetch_ms_)));
          set_has_header_fetch_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fetch_ms;
        break;
      }

      // optional int64 fetch_ms = 4;
      case 4: {
        if (tag == 32) {
         parse_fetch_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetch_ms_)));
          set_has_fetch_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time_to_first_byte_ms;
        break;
      }

      // optional int64 time_to_first_byte_ms = 5;
      case 5: {
        if (tag == 40) {
         parse_time_to_first_byte_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_first_byte_ms_)));
          set_has_time_to_first_byte_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_request_start_ms;
        break;
      }

      // optional int64 request_start_ms = 6;
      case 6: {
        if (tag == 48) {
         parse_request_start_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_start_ms_)));
          set_has_request_start_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_time_to_start_parse_ms;
        break;
      }

      // optional int64 time_to_start_parse_ms = 7;
      case 7: {
        if (tag == 56) {
         parse_time_to_start_parse_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_start_parse_ms_)));
          set_has_time_to_start_parse_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time_to_start_fetch_ms;
        break;
      }

      // optional int64 time_to_start_fetch_ms = 8;
      case 8: {
        if (tag == 64) {
         parse_time_to_start_fetch_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_start_fetch_ms_)));
          set_has_time_to_start_fetch_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_processing_time_ms;
        break;
      }

      // optional int64 processing_time_ms = 9;
      case 9: {
        if (tag == 72) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_time_to_start_processing_ms;
        break;
      }

      // optional int64 time_to_start_processing_ms = 10;
      case 10: {
        if (tag == 80) {
         parse_time_to_start_processing_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_start_processing_ms_)));
          set_has_time_to_start_processing_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_time_to_pcache_lookup_start_ms;
        break;
      }

      // optional int64 time_to_pcache_lookup_start_ms = 11;
      case 11: {
        if (tag == 88) {
         parse_time_to_pcache_lookup_start_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_pcache_lookup_start_ms_)));
          set_has_time_to_pcache_lookup_start_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_time_to_pcache_lookup_end_ms;
        break;
      }

      // optional int64 time_to_pcache_lookup_end_ms = 12;
      case 12: {
        if (tag == 96) {
         parse_time_to_pcache_lookup_end_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_pcache_lookup_end_ms_)));
          set_has_time_to_pcache_lookup_end_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.TimingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.TimingInfo)
  return false;
#undef DO_
}

void TimingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.TimingInfo)
  // optional int64 cache1_ms = 1;
  if (has_cache1_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cache1_ms(), output);
  }

  // optional int64 cache2_ms = 2;
  if (has_cache2_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cache2_ms(), output);
  }

  // optional int64 header_fetch_ms = 3;
  if (has_header_fetch_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->header_fetch_ms(), output);
  }

  // optional int64 fetch_ms = 4;
  if (has_fetch_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->fetch_ms(), output);
  }

  // optional int64 time_to_first_byte_ms = 5;
  if (has_time_to_first_byte_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time_to_first_byte_ms(), output);
  }

  // optional int64 request_start_ms = 6;
  if (has_request_start_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->request_start_ms(), output);
  }

  // optional int64 time_to_start_parse_ms = 7;
  if (has_time_to_start_parse_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->time_to_start_parse_ms(), output);
  }

  // optional int64 time_to_start_fetch_ms = 8;
  if (has_time_to_start_fetch_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time_to_start_fetch_ms(), output);
  }

  // optional int64 processing_time_ms = 9;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->processing_time_ms(), output);
  }

  // optional int64 time_to_start_processing_ms = 10;
  if (has_time_to_start_processing_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->time_to_start_processing_ms(), output);
  }

  // optional int64 time_to_pcache_lookup_start_ms = 11;
  if (has_time_to_pcache_lookup_start_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->time_to_pcache_lookup_start_ms(), output);
  }

  // optional int64 time_to_pcache_lookup_end_ms = 12;
  if (has_time_to_pcache_lookup_end_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->time_to_pcache_lookup_end_ms(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.TimingInfo)
}

int TimingInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.TimingInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int64 cache1_ms = 1;
    if (has_cache1_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cache1_ms());
    }

    // optional int64 cache2_ms = 2;
    if (has_cache2_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cache2_ms());
    }

    // optional int64 header_fetch_ms = 3;
    if (has_header_fetch_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->header_fetch_ms());
    }

    // optional int64 fetch_ms = 4;
    if (has_fetch_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fetch_ms());
    }

    // optional int64 time_to_first_byte_ms = 5;
    if (has_time_to_first_byte_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_first_byte_ms());
    }

    // optional int64 request_start_ms = 6;
    if (has_request_start_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_start_ms());
    }

    // optional int64 time_to_start_parse_ms = 7;
    if (has_time_to_start_parse_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_start_parse_ms());
    }

    // optional int64 time_to_start_fetch_ms = 8;
    if (has_time_to_start_fetch_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_start_fetch_ms());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int64 processing_time_ms = 9;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->processing_time_ms());
    }

    // optional int64 time_to_start_processing_ms = 10;
    if (has_time_to_start_processing_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_start_processing_ms());
    }

    // optional int64 time_to_pcache_lookup_start_ms = 11;
    if (has_time_to_pcache_lookup_start_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_pcache_lookup_start_ms());
    }

    // optional int64 time_to_pcache_lookup_end_ms = 12;
    if (has_time_to_pcache_lookup_end_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_pcache_lookup_end_ms());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimingInfo*>(&from));
}

void TimingInfo::MergeFrom(const TimingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.TimingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cache1_ms()) {
      set_cache1_ms(from.cache1_ms());
    }
    if (from.has_cache2_ms()) {
      set_cache2_ms(from.cache2_ms());
    }
    if (from.has_header_fetch_ms()) {
      set_header_fetch_ms(from.header_fetch_ms());
    }
    if (from.has_fetch_ms()) {
      set_fetch_ms(from.fetch_ms());
    }
    if (from.has_time_to_first_byte_ms()) {
      set_time_to_first_byte_ms(from.time_to_first_byte_ms());
    }
    if (from.has_request_start_ms()) {
      set_request_start_ms(from.request_start_ms());
    }
    if (from.has_time_to_start_parse_ms()) {
      set_time_to_start_parse_ms(from.time_to_start_parse_ms());
    }
    if (from.has_time_to_start_fetch_ms()) {
      set_time_to_start_fetch_ms(from.time_to_start_fetch_ms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
    if (from.has_time_to_start_processing_ms()) {
      set_time_to_start_processing_ms(from.time_to_start_processing_ms());
    }
    if (from.has_time_to_pcache_lookup_start_ms()) {
      set_time_to_pcache_lookup_start_ms(from.time_to_pcache_lookup_start_ms());
    }
    if (from.has_time_to_pcache_lookup_end_ms()) {
      set_time_to_pcache_lookup_end_ms(from.time_to_pcache_lookup_end_ms());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void TimingInfo::CopyFrom(const TimingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.TimingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingInfo::IsInitialized() const {

  return true;
}

void TimingInfo::Swap(TimingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimingInfo::InternalSwap(TimingInfo* other) {
  std::swap(cache1_ms_, other->cache1_ms_);
  std::swap(cache2_ms_, other->cache2_ms_);
  std::swap(header_fetch_ms_, other->header_fetch_ms_);
  std::swap(fetch_ms_, other->fetch_ms_);
  std::swap(time_to_first_byte_ms_, other->time_to_first_byte_ms_);
  std::swap(request_start_ms_, other->request_start_ms_);
  std::swap(time_to_start_parse_ms_, other->time_to_start_parse_ms_);
  std::swap(time_to_start_fetch_ms_, other->time_to_start_fetch_ms_);
  std::swap(processing_time_ms_, other->processing_time_ms_);
  std::swap(time_to_start_processing_ms_, other->time_to_start_processing_ms_);
  std::swap(time_to_pcache_lookup_start_ms_, other->time_to_pcache_lookup_start_ms_);
  std::swap(time_to_pcache_lookup_end_ms_, other->time_to_pcache_lookup_end_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TimingInfo::GetTypeName() const {
  return "net_instaweb.TimingInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimingInfo

// optional int64 cache1_ms = 1;
bool TimingInfo::has_cache1_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimingInfo::set_has_cache1_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void TimingInfo::clear_has_cache1_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimingInfo::clear_cache1_ms() {
  cache1_ms_ = GOOGLE_LONGLONG(0);
  clear_has_cache1_ms();
}
 ::google::protobuf::int64 TimingInfo::cache1_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.cache1_ms)
  return cache1_ms_;
}
 void TimingInfo::set_cache1_ms(::google::protobuf::int64 value) {
  set_has_cache1_ms();
  cache1_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.cache1_ms)
}

// optional int64 cache2_ms = 2;
bool TimingInfo::has_cache2_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimingInfo::set_has_cache2_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void TimingInfo::clear_has_cache2_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimingInfo::clear_cache2_ms() {
  cache2_ms_ = GOOGLE_LONGLONG(0);
  clear_has_cache2_ms();
}
 ::google::protobuf::int64 TimingInfo::cache2_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.cache2_ms)
  return cache2_ms_;
}
 void TimingInfo::set_cache2_ms(::google::protobuf::int64 value) {
  set_has_cache2_ms();
  cache2_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.cache2_ms)
}

// optional int64 header_fetch_ms = 3;
bool TimingInfo::has_header_fetch_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimingInfo::set_has_header_fetch_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void TimingInfo::clear_has_header_fetch_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimingInfo::clear_header_fetch_ms() {
  header_fetch_ms_ = GOOGLE_LONGLONG(0);
  clear_has_header_fetch_ms();
}
 ::google::protobuf::int64 TimingInfo::header_fetch_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.header_fetch_ms)
  return header_fetch_ms_;
}
 void TimingInfo::set_header_fetch_ms(::google::protobuf::int64 value) {
  set_has_header_fetch_ms();
  header_fetch_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.header_fetch_ms)
}

// optional int64 fetch_ms = 4;
bool TimingInfo::has_fetch_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimingInfo::set_has_fetch_ms() {
  _has_bits_[0] |= 0x00000008u;
}
void TimingInfo::clear_has_fetch_ms() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimingInfo::clear_fetch_ms() {
  fetch_ms_ = GOOGLE_LONGLONG(0);
  clear_has_fetch_ms();
}
 ::google::protobuf::int64 TimingInfo::fetch_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.fetch_ms)
  return fetch_ms_;
}
 void TimingInfo::set_fetch_ms(::google::protobuf::int64 value) {
  set_has_fetch_ms();
  fetch_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.fetch_ms)
}

// optional int64 time_to_first_byte_ms = 5;
bool TimingInfo::has_time_to_first_byte_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TimingInfo::set_has_time_to_first_byte_ms() {
  _has_bits_[0] |= 0x00000010u;
}
void TimingInfo::clear_has_time_to_first_byte_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
void TimingInfo::clear_time_to_first_byte_ms() {
  time_to_first_byte_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_first_byte_ms();
}
 ::google::protobuf::int64 TimingInfo::time_to_first_byte_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.time_to_first_byte_ms)
  return time_to_first_byte_ms_;
}
 void TimingInfo::set_time_to_first_byte_ms(::google::protobuf::int64 value) {
  set_has_time_to_first_byte_ms();
  time_to_first_byte_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.time_to_first_byte_ms)
}

// optional int64 request_start_ms = 6;
bool TimingInfo::has_request_start_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TimingInfo::set_has_request_start_ms() {
  _has_bits_[0] |= 0x00000020u;
}
void TimingInfo::clear_has_request_start_ms() {
  _has_bits_[0] &= ~0x00000020u;
}
void TimingInfo::clear_request_start_ms() {
  request_start_ms_ = GOOGLE_LONGLONG(0);
  clear_has_request_start_ms();
}
 ::google::protobuf::int64 TimingInfo::request_start_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.request_start_ms)
  return request_start_ms_;
}
 void TimingInfo::set_request_start_ms(::google::protobuf::int64 value) {
  set_has_request_start_ms();
  request_start_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.request_start_ms)
}

// optional int64 time_to_start_parse_ms = 7;
bool TimingInfo::has_time_to_start_parse_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TimingInfo::set_has_time_to_start_parse_ms() {
  _has_bits_[0] |= 0x00000040u;
}
void TimingInfo::clear_has_time_to_start_parse_ms() {
  _has_bits_[0] &= ~0x00000040u;
}
void TimingInfo::clear_time_to_start_parse_ms() {
  time_to_start_parse_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_start_parse_ms();
}
 ::google::protobuf::int64 TimingInfo::time_to_start_parse_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.time_to_start_parse_ms)
  return time_to_start_parse_ms_;
}
 void TimingInfo::set_time_to_start_parse_ms(::google::protobuf::int64 value) {
  set_has_time_to_start_parse_ms();
  time_to_start_parse_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.time_to_start_parse_ms)
}

// optional int64 time_to_start_fetch_ms = 8;
bool TimingInfo::has_time_to_start_fetch_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TimingInfo::set_has_time_to_start_fetch_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void TimingInfo::clear_has_time_to_start_fetch_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void TimingInfo::clear_time_to_start_fetch_ms() {
  time_to_start_fetch_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_start_fetch_ms();
}
 ::google::protobuf::int64 TimingInfo::time_to_start_fetch_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.time_to_start_fetch_ms)
  return time_to_start_fetch_ms_;
}
 void TimingInfo::set_time_to_start_fetch_ms(::google::protobuf::int64 value) {
  set_has_time_to_start_fetch_ms();
  time_to_start_fetch_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.time_to_start_fetch_ms)
}

// optional int64 processing_time_ms = 9;
bool TimingInfo::has_processing_time_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TimingInfo::set_has_processing_time_ms() {
  _has_bits_[0] |= 0x00000100u;
}
void TimingInfo::clear_has_processing_time_ms() {
  _has_bits_[0] &= ~0x00000100u;
}
void TimingInfo::clear_processing_time_ms() {
  processing_time_ms_ = GOOGLE_LONGLONG(0);
  clear_has_processing_time_ms();
}
 ::google::protobuf::int64 TimingInfo::processing_time_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.processing_time_ms)
  return processing_time_ms_;
}
 void TimingInfo::set_processing_time_ms(::google::protobuf::int64 value) {
  set_has_processing_time_ms();
  processing_time_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.processing_time_ms)
}

// optional int64 time_to_start_processing_ms = 10;
bool TimingInfo::has_time_to_start_processing_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TimingInfo::set_has_time_to_start_processing_ms() {
  _has_bits_[0] |= 0x00000200u;
}
void TimingInfo::clear_has_time_to_start_processing_ms() {
  _has_bits_[0] &= ~0x00000200u;
}
void TimingInfo::clear_time_to_start_processing_ms() {
  time_to_start_processing_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_start_processing_ms();
}
 ::google::protobuf::int64 TimingInfo::time_to_start_processing_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.time_to_start_processing_ms)
  return time_to_start_processing_ms_;
}
 void TimingInfo::set_time_to_start_processing_ms(::google::protobuf::int64 value) {
  set_has_time_to_start_processing_ms();
  time_to_start_processing_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.time_to_start_processing_ms)
}

// optional int64 time_to_pcache_lookup_start_ms = 11;
bool TimingInfo::has_time_to_pcache_lookup_start_ms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TimingInfo::set_has_time_to_pcache_lookup_start_ms() {
  _has_bits_[0] |= 0x00000400u;
}
void TimingInfo::clear_has_time_to_pcache_lookup_start_ms() {
  _has_bits_[0] &= ~0x00000400u;
}
void TimingInfo::clear_time_to_pcache_lookup_start_ms() {
  time_to_pcache_lookup_start_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_pcache_lookup_start_ms();
}
 ::google::protobuf::int64 TimingInfo::time_to_pcache_lookup_start_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.time_to_pcache_lookup_start_ms)
  return time_to_pcache_lookup_start_ms_;
}
 void TimingInfo::set_time_to_pcache_lookup_start_ms(::google::protobuf::int64 value) {
  set_has_time_to_pcache_lookup_start_ms();
  time_to_pcache_lookup_start_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.time_to_pcache_lookup_start_ms)
}

// optional int64 time_to_pcache_lookup_end_ms = 12;
bool TimingInfo::has_time_to_pcache_lookup_end_ms() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TimingInfo::set_has_time_to_pcache_lookup_end_ms() {
  _has_bits_[0] |= 0x00000800u;
}
void TimingInfo::clear_has_time_to_pcache_lookup_end_ms() {
  _has_bits_[0] &= ~0x00000800u;
}
void TimingInfo::clear_time_to_pcache_lookup_end_ms() {
  time_to_pcache_lookup_end_ms_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_pcache_lookup_end_ms();
}
 ::google::protobuf::int64 TimingInfo::time_to_pcache_lookup_end_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.TimingInfo.time_to_pcache_lookup_end_ms)
  return time_to_pcache_lookup_end_ms_;
}
 void TimingInfo::set_time_to_pcache_lookup_end_ms(::google::protobuf::int64 value) {
  set_has_time_to_pcache_lookup_end_ms();
  time_to_pcache_lookup_end_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.TimingInfo.time_to_pcache_lookup_end_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForBlinkInfo(
    BlinkInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

bool BlinkInfo_BlinkRequestFlow_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BlinkInfo_BlinkRequestFlow BlinkInfo::BLINK_CACHE_HIT;
const BlinkInfo_BlinkRequestFlow BlinkInfo::BLINK_CACHE_MISS_FOUND_RESOURCE;
const BlinkInfo_BlinkRequestFlow BlinkInfo::BLINK_CACHE_MISS_FETCH_NON_OK;
const BlinkInfo_BlinkRequestFlow BlinkInfo::BLINK_CACHE_MISS_TRIGGERED_REWRITE;
const BlinkInfo_BlinkRequestFlow BlinkInfo::FOUND_MALFORMED_HTML;
const BlinkInfo_BlinkRequestFlow BlinkInfo::FOUND_LAST_STATUS_CODE_NON_OK;
const BlinkInfo_BlinkRequestFlow BlinkInfo::FOUND_CONTENT_LENGTH_OVER_THRESHOLD;
const BlinkInfo_BlinkRequestFlow BlinkInfo::BLINK_BLACKLISTED;
const BlinkInfo_BlinkRequestFlow BlinkInfo::BlinkRequestFlow_MIN;
const BlinkInfo_BlinkRequestFlow BlinkInfo::BlinkRequestFlow_MAX;
const int BlinkInfo::BlinkRequestFlow_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool BlinkInfo_UserAgent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BlinkInfo_UserAgent BlinkInfo::NOT_SET;
const BlinkInfo_UserAgent BlinkInfo::BLINK_DESKTOP_WHITELIST;
const BlinkInfo_UserAgent BlinkInfo::BLINK_DESKTOP_BLACKLIST;
const BlinkInfo_UserAgent BlinkInfo::BLINK_MOBILE;
const BlinkInfo_UserAgent BlinkInfo::NULL_OR_EMPTY;
const BlinkInfo_UserAgent BlinkInfo::NOT_SUPPORT_BLINK;
const BlinkInfo_UserAgent BlinkInfo::UserAgent_MIN;
const BlinkInfo_UserAgent BlinkInfo::UserAgent_MAX;
const int BlinkInfo::UserAgent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlinkInfo::kBlinkRequestFlowFieldNumber;
const int BlinkInfo::kRequestEventIdTimeUsecFieldNumber;
const int BlinkInfo::kHtmlMatchFieldNumber;
const int BlinkInfo::kBlinkUserAgentFieldNumber;
const int BlinkInfo::kUrlFieldNumber;
const int BlinkInfo::kHtmlSmartDiffMatchFieldNumber;
const int BlinkInfo::kMismatchBlacklistThresholdExceededFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlinkInfo::BlinkInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.BlinkInfo)
}

void BlinkInfo::InitAsDefaultInstance() {
}

BlinkInfo::BlinkInfo(const BlinkInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.BlinkInfo)
}

void BlinkInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blink_request_flow_ = 1;
  request_event_id_time_usec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_match_ = false;
  blink_user_agent_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_smart_diff_match_ = false;
  mismatch_blacklist_threshold_exceeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlinkInfo::~BlinkInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.BlinkInfo)
  SharedDtor();
}

void BlinkInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_event_id_time_usec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BlinkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlinkInfo& BlinkInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

BlinkInfo* BlinkInfo::default_instance_ = NULL;

BlinkInfo* BlinkInfo::New(::google::protobuf::Arena* arena) const {
  BlinkInfo* n = new BlinkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.BlinkInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BlinkInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlinkInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(html_match_, mismatch_blacklist_threshold_exceeded_);
    blink_request_flow_ = 1;
    if (has_request_event_id_time_usec()) {
      request_event_id_time_usec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    blink_user_agent_ = 0;
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BlinkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForBlinkInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.BlinkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net_instaweb.BlinkInfo.BlinkRequestFlow blink_request_flow = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::BlinkInfo_BlinkRequestFlow_IsValid(value)) {
            set_blink_request_flow(static_cast< ::net_instaweb::BlinkInfo_BlinkRequestFlow >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_event_id_time_usec;
        break;
      }

      // optional string request_event_id_time_usec = 2;
      case 2: {
        if (tag == 18) {
         parse_request_event_id_time_usec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_event_id_time_usec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_html_match;
        break;
      }

      // optional bool html_match = 3;
      case 3: {
        if (tag == 24) {
         parse_html_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &html_match_)));
          set_has_html_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blink_user_agent;
        break;
      }

      // optional .net_instaweb.BlinkInfo.UserAgent blink_user_agent = 4;
      case 4: {
        if (tag == 32) {
         parse_blink_user_agent:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::BlinkInfo_UserAgent_IsValid(value)) {
            set_blink_user_agent(static_cast< ::net_instaweb::BlinkInfo_UserAgent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // optional string url = 5;
      case 5: {
        if (tag == 42) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_html_smart_diff_match;
        break;
      }

      // optional bool html_smart_diff_match = 6;
      case 6: {
        if (tag == 48) {
         parse_html_smart_diff_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &html_smart_diff_match_)));
          set_has_html_smart_diff_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mismatch_blacklist_threshold_exceeded;
        break;
      }

      // optional bool mismatch_blacklist_threshold_exceeded = 7;
      case 7: {
        if (tag == 56) {
         parse_mismatch_blacklist_threshold_exceeded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mismatch_blacklist_threshold_exceeded_)));
          set_has_mismatch_blacklist_threshold_exceeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.BlinkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.BlinkInfo)
  return false;
#undef DO_
}

void BlinkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.BlinkInfo)
  // optional .net_instaweb.BlinkInfo.BlinkRequestFlow blink_request_flow = 1;
  if (has_blink_request_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->blink_request_flow(), output);
  }

  // optional string request_event_id_time_usec = 2;
  if (has_request_event_id_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_event_id_time_usec(), output);
  }

  // optional bool html_match = 3;
  if (has_html_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->html_match(), output);
  }

  // optional .net_instaweb.BlinkInfo.UserAgent blink_user_agent = 4;
  if (has_blink_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->blink_user_agent(), output);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // optional bool html_smart_diff_match = 6;
  if (has_html_smart_diff_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->html_smart_diff_match(), output);
  }

  // optional bool mismatch_blacklist_threshold_exceeded = 7;
  if (has_mismatch_blacklist_threshold_exceeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->mismatch_blacklist_threshold_exceeded(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.BlinkInfo)
}

int BlinkInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.BlinkInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .net_instaweb.BlinkInfo.BlinkRequestFlow blink_request_flow = 1;
    if (has_blink_request_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blink_request_flow());
    }

    // optional string request_event_id_time_usec = 2;
    if (has_request_event_id_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_event_id_time_usec());
    }

    // optional bool html_match = 3;
    if (has_html_match()) {
      total_size += 1 + 1;
    }

    // optional .net_instaweb.BlinkInfo.UserAgent blink_user_agent = 4;
    if (has_blink_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blink_user_agent());
    }

    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional bool html_smart_diff_match = 6;
    if (has_html_smart_diff_match()) {
      total_size += 1 + 1;
    }

    // optional bool mismatch_blacklist_threshold_exceeded = 7;
    if (has_mismatch_blacklist_threshold_exceeded()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlinkInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlinkInfo*>(&from));
}

void BlinkInfo::MergeFrom(const BlinkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.BlinkInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blink_request_flow()) {
      set_blink_request_flow(from.blink_request_flow());
    }
    if (from.has_request_event_id_time_usec()) {
      set_has_request_event_id_time_usec();
      request_event_id_time_usec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_event_id_time_usec_);
    }
    if (from.has_html_match()) {
      set_html_match(from.html_match());
    }
    if (from.has_blink_user_agent()) {
      set_blink_user_agent(from.blink_user_agent());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_html_smart_diff_match()) {
      set_html_smart_diff_match(from.html_smart_diff_match());
    }
    if (from.has_mismatch_blacklist_threshold_exceeded()) {
      set_mismatch_blacklist_threshold_exceeded(from.mismatch_blacklist_threshold_exceeded());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void BlinkInfo::CopyFrom(const BlinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.BlinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlinkInfo::IsInitialized() const {

  return true;
}

void BlinkInfo::Swap(BlinkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlinkInfo::InternalSwap(BlinkInfo* other) {
  std::swap(blink_request_flow_, other->blink_request_flow_);
  request_event_id_time_usec_.Swap(&other->request_event_id_time_usec_);
  std::swap(html_match_, other->html_match_);
  std::swap(blink_user_agent_, other->blink_user_agent_);
  url_.Swap(&other->url_);
  std::swap(html_smart_diff_match_, other->html_smart_diff_match_);
  std::swap(mismatch_blacklist_threshold_exceeded_, other->mismatch_blacklist_threshold_exceeded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BlinkInfo::GetTypeName() const {
  return "net_instaweb.BlinkInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlinkInfo

// optional .net_instaweb.BlinkInfo.BlinkRequestFlow blink_request_flow = 1;
bool BlinkInfo::has_blink_request_flow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlinkInfo::set_has_blink_request_flow() {
  _has_bits_[0] |= 0x00000001u;
}
void BlinkInfo::clear_has_blink_request_flow() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlinkInfo::clear_blink_request_flow() {
  blink_request_flow_ = 1;
  clear_has_blink_request_flow();
}
 ::net_instaweb::BlinkInfo_BlinkRequestFlow BlinkInfo::blink_request_flow() const {
  // @@protoc_insertion_point(field_get:net_instaweb.BlinkInfo.blink_request_flow)
  return static_cast< ::net_instaweb::BlinkInfo_BlinkRequestFlow >(blink_request_flow_);
}
 void BlinkInfo::set_blink_request_flow(::net_instaweb::BlinkInfo_BlinkRequestFlow value) {
  assert(::net_instaweb::BlinkInfo_BlinkRequestFlow_IsValid(value));
  set_has_blink_request_flow();
  blink_request_flow_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.BlinkInfo.blink_request_flow)
}

// optional string request_event_id_time_usec = 2;
bool BlinkInfo::has_request_event_id_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlinkInfo::set_has_request_event_id_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
void BlinkInfo::clear_has_request_event_id_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlinkInfo::clear_request_event_id_time_usec() {
  request_event_id_time_usec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_event_id_time_usec();
}
 const ::std::string& BlinkInfo::request_event_id_time_usec() const {
  // @@protoc_insertion_point(field_get:net_instaweb.BlinkInfo.request_event_id_time_usec)
  return request_event_id_time_usec_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlinkInfo::set_request_event_id_time_usec(const ::std::string& value) {
  set_has_request_event_id_time_usec();
  request_event_id_time_usec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.BlinkInfo.request_event_id_time_usec)
}
 void BlinkInfo::set_request_event_id_time_usec(const char* value) {
  set_has_request_event_id_time_usec();
  request_event_id_time_usec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.BlinkInfo.request_event_id_time_usec)
}
 void BlinkInfo::set_request_event_id_time_usec(const char* value, size_t size) {
  set_has_request_event_id_time_usec();
  request_event_id_time_usec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.BlinkInfo.request_event_id_time_usec)
}
 ::std::string* BlinkInfo::mutable_request_event_id_time_usec() {
  set_has_request_event_id_time_usec();
  // @@protoc_insertion_point(field_mutable:net_instaweb.BlinkInfo.request_event_id_time_usec)
  return request_event_id_time_usec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlinkInfo::release_request_event_id_time_usec() {
  // @@protoc_insertion_point(field_release:net_instaweb.BlinkInfo.request_event_id_time_usec)
  clear_has_request_event_id_time_usec();
  return request_event_id_time_usec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlinkInfo::set_allocated_request_event_id_time_usec(::std::string* request_event_id_time_usec) {
  if (request_event_id_time_usec != NULL) {
    set_has_request_event_id_time_usec();
  } else {
    clear_has_request_event_id_time_usec();
  }
  request_event_id_time_usec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_event_id_time_usec);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.BlinkInfo.request_event_id_time_usec)
}

// optional bool html_match = 3;
bool BlinkInfo::has_html_match() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlinkInfo::set_has_html_match() {
  _has_bits_[0] |= 0x00000004u;
}
void BlinkInfo::clear_has_html_match() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlinkInfo::clear_html_match() {
  html_match_ = false;
  clear_has_html_match();
}
 bool BlinkInfo::html_match() const {
  // @@protoc_insertion_point(field_get:net_instaweb.BlinkInfo.html_match)
  return html_match_;
}
 void BlinkInfo::set_html_match(bool value) {
  set_has_html_match();
  html_match_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.BlinkInfo.html_match)
}

// optional .net_instaweb.BlinkInfo.UserAgent blink_user_agent = 4;
bool BlinkInfo::has_blink_user_agent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlinkInfo::set_has_blink_user_agent() {
  _has_bits_[0] |= 0x00000008u;
}
void BlinkInfo::clear_has_blink_user_agent() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlinkInfo::clear_blink_user_agent() {
  blink_user_agent_ = 0;
  clear_has_blink_user_agent();
}
 ::net_instaweb::BlinkInfo_UserAgent BlinkInfo::blink_user_agent() const {
  // @@protoc_insertion_point(field_get:net_instaweb.BlinkInfo.blink_user_agent)
  return static_cast< ::net_instaweb::BlinkInfo_UserAgent >(blink_user_agent_);
}
 void BlinkInfo::set_blink_user_agent(::net_instaweb::BlinkInfo_UserAgent value) {
  assert(::net_instaweb::BlinkInfo_UserAgent_IsValid(value));
  set_has_blink_user_agent();
  blink_user_agent_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.BlinkInfo.blink_user_agent)
}

// optional string url = 5;
bool BlinkInfo::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BlinkInfo::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
void BlinkInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void BlinkInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& BlinkInfo::url() const {
  // @@protoc_insertion_point(field_get:net_instaweb.BlinkInfo.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlinkInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.BlinkInfo.url)
}
 void BlinkInfo::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.BlinkInfo.url)
}
 void BlinkInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.BlinkInfo.url)
}
 ::std::string* BlinkInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:net_instaweb.BlinkInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BlinkInfo::release_url() {
  // @@protoc_insertion_point(field_release:net_instaweb.BlinkInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BlinkInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.BlinkInfo.url)
}

// optional bool html_smart_diff_match = 6;
bool BlinkInfo::has_html_smart_diff_match() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BlinkInfo::set_has_html_smart_diff_match() {
  _has_bits_[0] |= 0x00000020u;
}
void BlinkInfo::clear_has_html_smart_diff_match() {
  _has_bits_[0] &= ~0x00000020u;
}
void BlinkInfo::clear_html_smart_diff_match() {
  html_smart_diff_match_ = false;
  clear_has_html_smart_diff_match();
}
 bool BlinkInfo::html_smart_diff_match() const {
  // @@protoc_insertion_point(field_get:net_instaweb.BlinkInfo.html_smart_diff_match)
  return html_smart_diff_match_;
}
 void BlinkInfo::set_html_smart_diff_match(bool value) {
  set_has_html_smart_diff_match();
  html_smart_diff_match_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.BlinkInfo.html_smart_diff_match)
}

// optional bool mismatch_blacklist_threshold_exceeded = 7;
bool BlinkInfo::has_mismatch_blacklist_threshold_exceeded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BlinkInfo::set_has_mismatch_blacklist_threshold_exceeded() {
  _has_bits_[0] |= 0x00000040u;
}
void BlinkInfo::clear_has_mismatch_blacklist_threshold_exceeded() {
  _has_bits_[0] &= ~0x00000040u;
}
void BlinkInfo::clear_mismatch_blacklist_threshold_exceeded() {
  mismatch_blacklist_threshold_exceeded_ = false;
  clear_has_mismatch_blacklist_threshold_exceeded();
}
 bool BlinkInfo::mismatch_blacklist_threshold_exceeded() const {
  // @@protoc_insertion_point(field_get:net_instaweb.BlinkInfo.mismatch_blacklist_threshold_exceeded)
  return mismatch_blacklist_threshold_exceeded_;
}
 void BlinkInfo::set_mismatch_blacklist_threshold_exceeded(bool value) {
  set_has_mismatch_blacklist_threshold_exceeded();
  mismatch_blacklist_threshold_exceeded_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.BlinkInfo.mismatch_blacklist_threshold_exceeded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForMetadataCacheInfo(
    MetadataCacheInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetadataCacheInfo::kNumHitsFieldNumber;
const int MetadataCacheInfo::kNumRevalidatesFieldNumber;
const int MetadataCacheInfo::kNumMissesFieldNumber;
const int MetadataCacheInfo::kNumSuccessfulRevalidatesFieldNumber;
const int MetadataCacheInfo::kNumSuccessfulRewritesOnMissFieldNumber;
const int MetadataCacheInfo::kNumStaleRewritesFieldNumber;
const int MetadataCacheInfo::kNumRewritesCompletedFieldNumber;
const int MetadataCacheInfo::kNumDisabledRewritesFieldNumber;
const int MetadataCacheInfo::kNumRepeatedRewritesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetadataCacheInfo::MetadataCacheInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.MetadataCacheInfo)
}

void MetadataCacheInfo::InitAsDefaultInstance() {
}

MetadataCacheInfo::MetadataCacheInfo(const MetadataCacheInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.MetadataCacheInfo)
}

void MetadataCacheInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_hits_ = 0;
  num_revalidates_ = 0;
  num_misses_ = 0;
  num_successful_revalidates_ = 0;
  num_successful_rewrites_on_miss_ = 0;
  num_stale_rewrites_ = 0;
  num_rewrites_completed_ = 0;
  num_disabled_rewrites_ = 0;
  num_repeated_rewrites_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetadataCacheInfo::~MetadataCacheInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.MetadataCacheInfo)
  SharedDtor();
}

void MetadataCacheInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MetadataCacheInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MetadataCacheInfo& MetadataCacheInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

MetadataCacheInfo* MetadataCacheInfo::default_instance_ = NULL;

MetadataCacheInfo* MetadataCacheInfo::New(::google::protobuf::Arena* arena) const {
  MetadataCacheInfo* n = new MetadataCacheInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MetadataCacheInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.MetadataCacheInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MetadataCacheInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MetadataCacheInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(num_hits_, num_disabled_rewrites_);
  }
  num_repeated_rewrites_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MetadataCacheInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMetadataCacheInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.MetadataCacheInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_hits = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_hits_)));
          set_has_num_hits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_revalidates;
        break;
      }

      // optional int32 num_revalidates = 2;
      case 2: {
        if (tag == 16) {
         parse_num_revalidates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_revalidates_)));
          set_has_num_revalidates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_misses;
        break;
      }

      // optional int32 num_misses = 3;
      case 3: {
        if (tag == 24) {
         parse_num_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_misses_)));
          set_has_num_misses();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_successful_revalidates;
        break;
      }

      // optional int32 num_successful_revalidates = 4;
      case 4: {
        if (tag == 32) {
         parse_num_successful_revalidates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_successful_revalidates_)));
          set_has_num_successful_revalidates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_num_successful_rewrites_on_miss;
        break;
      }

      // optional int32 num_successful_rewrites_on_miss = 5;
      case 5: {
        if (tag == 40) {
         parse_num_successful_rewrites_on_miss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_successful_rewrites_on_miss_)));
          set_has_num_successful_rewrites_on_miss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_stale_rewrites;
        break;
      }

      // optional int32 num_stale_rewrites = 6;
      case 6: {
        if (tag == 48) {
         parse_num_stale_rewrites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_stale_rewrites_)));
          set_has_num_stale_rewrites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_rewrites_completed;
        break;
      }

      // optional int32 num_rewrites_completed = 7;
      case 7: {
        if (tag == 56) {
         parse_num_rewrites_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rewrites_completed_)));
          set_has_num_rewrites_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_disabled_rewrites;
        break;
      }

      // optional int32 num_disabled_rewrites = 8;
      case 8: {
        if (tag == 64) {
         parse_num_disabled_rewrites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_disabled_rewrites_)));
          set_has_num_disabled_rewrites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_repeated_rewrites;
        break;
      }

      // optional int32 num_repeated_rewrites = 9;
      case 9: {
        if (tag == 72) {
         parse_num_repeated_rewrites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_repeated_rewrites_)));
          set_has_num_repeated_rewrites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.MetadataCacheInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.MetadataCacheInfo)
  return false;
#undef DO_
}

void MetadataCacheInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.MetadataCacheInfo)
  // optional int32 num_hits = 1;
  if (has_num_hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_hits(), output);
  }

  // optional int32 num_revalidates = 2;
  if (has_num_revalidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_revalidates(), output);
  }

  // optional int32 num_misses = 3;
  if (has_num_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_misses(), output);
  }

  // optional int32 num_successful_revalidates = 4;
  if (has_num_successful_revalidates()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_successful_revalidates(), output);
  }

  // optional int32 num_successful_rewrites_on_miss = 5;
  if (has_num_successful_rewrites_on_miss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_successful_rewrites_on_miss(), output);
  }

  // optional int32 num_stale_rewrites = 6;
  if (has_num_stale_rewrites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_stale_rewrites(), output);
  }

  // optional int32 num_rewrites_completed = 7;
  if (has_num_rewrites_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_rewrites_completed(), output);
  }

  // optional int32 num_disabled_rewrites = 8;
  if (has_num_disabled_rewrites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_disabled_rewrites(), output);
  }

  // optional int32 num_repeated_rewrites = 9;
  if (has_num_repeated_rewrites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_repeated_rewrites(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.MetadataCacheInfo)
}

int MetadataCacheInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.MetadataCacheInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 num_hits = 1;
    if (has_num_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_hits());
    }

    // optional int32 num_revalidates = 2;
    if (has_num_revalidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_revalidates());
    }

    // optional int32 num_misses = 3;
    if (has_num_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_misses());
    }

    // optional int32 num_successful_revalidates = 4;
    if (has_num_successful_revalidates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_successful_revalidates());
    }

    // optional int32 num_successful_rewrites_on_miss = 5;
    if (has_num_successful_rewrites_on_miss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_successful_rewrites_on_miss());
    }

    // optional int32 num_stale_rewrites = 6;
    if (has_num_stale_rewrites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_stale_rewrites());
    }

    // optional int32 num_rewrites_completed = 7;
    if (has_num_rewrites_completed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_rewrites_completed());
    }

    // optional int32 num_disabled_rewrites = 8;
    if (has_num_disabled_rewrites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_disabled_rewrites());
    }

  }
  // optional int32 num_repeated_rewrites = 9;
  if (has_num_repeated_rewrites()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_repeated_rewrites());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetadataCacheInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MetadataCacheInfo*>(&from));
}

void MetadataCacheInfo::MergeFrom(const MetadataCacheInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.MetadataCacheInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_hits()) {
      set_num_hits(from.num_hits());
    }
    if (from.has_num_revalidates()) {
      set_num_revalidates(from.num_revalidates());
    }
    if (from.has_num_misses()) {
      set_num_misses(from.num_misses());
    }
    if (from.has_num_successful_revalidates()) {
      set_num_successful_revalidates(from.num_successful_revalidates());
    }
    if (from.has_num_successful_rewrites_on_miss()) {
      set_num_successful_rewrites_on_miss(from.num_successful_rewrites_on_miss());
    }
    if (from.has_num_stale_rewrites()) {
      set_num_stale_rewrites(from.num_stale_rewrites());
    }
    if (from.has_num_rewrites_completed()) {
      set_num_rewrites_completed(from.num_rewrites_completed());
    }
    if (from.has_num_disabled_rewrites()) {
      set_num_disabled_rewrites(from.num_disabled_rewrites());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_repeated_rewrites()) {
      set_num_repeated_rewrites(from.num_repeated_rewrites());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void MetadataCacheInfo::CopyFrom(const MetadataCacheInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.MetadataCacheInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataCacheInfo::IsInitialized() const {

  return true;
}

void MetadataCacheInfo::Swap(MetadataCacheInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetadataCacheInfo::InternalSwap(MetadataCacheInfo* other) {
  std::swap(num_hits_, other->num_hits_);
  std::swap(num_revalidates_, other->num_revalidates_);
  std::swap(num_misses_, other->num_misses_);
  std::swap(num_successful_revalidates_, other->num_successful_revalidates_);
  std::swap(num_successful_rewrites_on_miss_, other->num_successful_rewrites_on_miss_);
  std::swap(num_stale_rewrites_, other->num_stale_rewrites_);
  std::swap(num_rewrites_completed_, other->num_rewrites_completed_);
  std::swap(num_disabled_rewrites_, other->num_disabled_rewrites_);
  std::swap(num_repeated_rewrites_, other->num_repeated_rewrites_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MetadataCacheInfo::GetTypeName() const {
  return "net_instaweb.MetadataCacheInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MetadataCacheInfo

// optional int32 num_hits = 1;
bool MetadataCacheInfo::has_num_hits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MetadataCacheInfo::set_has_num_hits() {
  _has_bits_[0] |= 0x00000001u;
}
void MetadataCacheInfo::clear_has_num_hits() {
  _has_bits_[0] &= ~0x00000001u;
}
void MetadataCacheInfo::clear_num_hits() {
  num_hits_ = 0;
  clear_has_num_hits();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_hits() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_hits)
  return num_hits_;
}
 void MetadataCacheInfo::set_num_hits(::google::protobuf::int32 value) {
  set_has_num_hits();
  num_hits_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_hits)
}

// optional int32 num_revalidates = 2;
bool MetadataCacheInfo::has_num_revalidates() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MetadataCacheInfo::set_has_num_revalidates() {
  _has_bits_[0] |= 0x00000002u;
}
void MetadataCacheInfo::clear_has_num_revalidates() {
  _has_bits_[0] &= ~0x00000002u;
}
void MetadataCacheInfo::clear_num_revalidates() {
  num_revalidates_ = 0;
  clear_has_num_revalidates();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_revalidates() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_revalidates)
  return num_revalidates_;
}
 void MetadataCacheInfo::set_num_revalidates(::google::protobuf::int32 value) {
  set_has_num_revalidates();
  num_revalidates_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_revalidates)
}

// optional int32 num_misses = 3;
bool MetadataCacheInfo::has_num_misses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MetadataCacheInfo::set_has_num_misses() {
  _has_bits_[0] |= 0x00000004u;
}
void MetadataCacheInfo::clear_has_num_misses() {
  _has_bits_[0] &= ~0x00000004u;
}
void MetadataCacheInfo::clear_num_misses() {
  num_misses_ = 0;
  clear_has_num_misses();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_misses() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_misses)
  return num_misses_;
}
 void MetadataCacheInfo::set_num_misses(::google::protobuf::int32 value) {
  set_has_num_misses();
  num_misses_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_misses)
}

// optional int32 num_successful_revalidates = 4;
bool MetadataCacheInfo::has_num_successful_revalidates() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MetadataCacheInfo::set_has_num_successful_revalidates() {
  _has_bits_[0] |= 0x00000008u;
}
void MetadataCacheInfo::clear_has_num_successful_revalidates() {
  _has_bits_[0] &= ~0x00000008u;
}
void MetadataCacheInfo::clear_num_successful_revalidates() {
  num_successful_revalidates_ = 0;
  clear_has_num_successful_revalidates();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_successful_revalidates() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_successful_revalidates)
  return num_successful_revalidates_;
}
 void MetadataCacheInfo::set_num_successful_revalidates(::google::protobuf::int32 value) {
  set_has_num_successful_revalidates();
  num_successful_revalidates_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_successful_revalidates)
}

// optional int32 num_successful_rewrites_on_miss = 5;
bool MetadataCacheInfo::has_num_successful_rewrites_on_miss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MetadataCacheInfo::set_has_num_successful_rewrites_on_miss() {
  _has_bits_[0] |= 0x00000010u;
}
void MetadataCacheInfo::clear_has_num_successful_rewrites_on_miss() {
  _has_bits_[0] &= ~0x00000010u;
}
void MetadataCacheInfo::clear_num_successful_rewrites_on_miss() {
  num_successful_rewrites_on_miss_ = 0;
  clear_has_num_successful_rewrites_on_miss();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_successful_rewrites_on_miss() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_successful_rewrites_on_miss)
  return num_successful_rewrites_on_miss_;
}
 void MetadataCacheInfo::set_num_successful_rewrites_on_miss(::google::protobuf::int32 value) {
  set_has_num_successful_rewrites_on_miss();
  num_successful_rewrites_on_miss_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_successful_rewrites_on_miss)
}

// optional int32 num_stale_rewrites = 6;
bool MetadataCacheInfo::has_num_stale_rewrites() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MetadataCacheInfo::set_has_num_stale_rewrites() {
  _has_bits_[0] |= 0x00000020u;
}
void MetadataCacheInfo::clear_has_num_stale_rewrites() {
  _has_bits_[0] &= ~0x00000020u;
}
void MetadataCacheInfo::clear_num_stale_rewrites() {
  num_stale_rewrites_ = 0;
  clear_has_num_stale_rewrites();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_stale_rewrites() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_stale_rewrites)
  return num_stale_rewrites_;
}
 void MetadataCacheInfo::set_num_stale_rewrites(::google::protobuf::int32 value) {
  set_has_num_stale_rewrites();
  num_stale_rewrites_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_stale_rewrites)
}

// optional int32 num_rewrites_completed = 7;
bool MetadataCacheInfo::has_num_rewrites_completed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MetadataCacheInfo::set_has_num_rewrites_completed() {
  _has_bits_[0] |= 0x00000040u;
}
void MetadataCacheInfo::clear_has_num_rewrites_completed() {
  _has_bits_[0] &= ~0x00000040u;
}
void MetadataCacheInfo::clear_num_rewrites_completed() {
  num_rewrites_completed_ = 0;
  clear_has_num_rewrites_completed();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_rewrites_completed() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_rewrites_completed)
  return num_rewrites_completed_;
}
 void MetadataCacheInfo::set_num_rewrites_completed(::google::protobuf::int32 value) {
  set_has_num_rewrites_completed();
  num_rewrites_completed_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_rewrites_completed)
}

// optional int32 num_disabled_rewrites = 8;
bool MetadataCacheInfo::has_num_disabled_rewrites() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MetadataCacheInfo::set_has_num_disabled_rewrites() {
  _has_bits_[0] |= 0x00000080u;
}
void MetadataCacheInfo::clear_has_num_disabled_rewrites() {
  _has_bits_[0] &= ~0x00000080u;
}
void MetadataCacheInfo::clear_num_disabled_rewrites() {
  num_disabled_rewrites_ = 0;
  clear_has_num_disabled_rewrites();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_disabled_rewrites() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_disabled_rewrites)
  return num_disabled_rewrites_;
}
 void MetadataCacheInfo::set_num_disabled_rewrites(::google::protobuf::int32 value) {
  set_has_num_disabled_rewrites();
  num_disabled_rewrites_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_disabled_rewrites)
}

// optional int32 num_repeated_rewrites = 9;
bool MetadataCacheInfo::has_num_repeated_rewrites() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MetadataCacheInfo::set_has_num_repeated_rewrites() {
  _has_bits_[0] |= 0x00000100u;
}
void MetadataCacheInfo::clear_has_num_repeated_rewrites() {
  _has_bits_[0] &= ~0x00000100u;
}
void MetadataCacheInfo::clear_num_repeated_rewrites() {
  num_repeated_rewrites_ = 0;
  clear_has_num_repeated_rewrites();
}
 ::google::protobuf::int32 MetadataCacheInfo::num_repeated_rewrites() const {
  // @@protoc_insertion_point(field_get:net_instaweb.MetadataCacheInfo.num_repeated_rewrites)
  return num_repeated_rewrites_;
}
 void MetadataCacheInfo::set_num_repeated_rewrites(::google::protobuf::int32 value) {
  set_has_num_repeated_rewrites();
  num_repeated_rewrites_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.MetadataCacheInfo.num_repeated_rewrites)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRewritingInfo(
    RewritingInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewritingInfo::RewritingInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.RewritingInfo)
}

void RewritingInfo::InitAsDefaultInstance() {
}

RewritingInfo::RewritingInfo(const RewritingInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.RewritingInfo)
}

void RewritingInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewritingInfo::~RewritingInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.RewritingInfo)
  SharedDtor();
}

void RewritingInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RewritingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewritingInfo& RewritingInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

RewritingInfo* RewritingInfo::default_instance_ = NULL;

RewritingInfo* RewritingInfo::New(::google::protobuf::Arena* arena) const {
  RewritingInfo* n = new RewritingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RewritingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.RewritingInfo)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RewritingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRewritingInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.RewritingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.RewritingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.RewritingInfo)
  return false;
#undef DO_
}

void RewritingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.RewritingInfo)
  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.RewritingInfo)
}

int RewritingInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.RewritingInfo)
  int total_size = 0;

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewritingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewritingInfo*>(&from));
}

void RewritingInfo::MergeFrom(const RewritingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.RewritingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RewritingInfo::CopyFrom(const RewritingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.RewritingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewritingInfo::IsInitialized() const {

  return true;
}

void RewritingInfo::Swap(RewritingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RewritingInfo::InternalSwap(RewritingInfo* other) {
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RewritingInfo::GetTypeName() const {
  return "net_instaweb.RewritingInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewritingInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSplitHtmlInfo(
    SplitHtmlInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitHtmlInfo::kJsonSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitHtmlInfo::SplitHtmlInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.SplitHtmlInfo)
}

void SplitHtmlInfo::InitAsDefaultInstance() {
}

SplitHtmlInfo::SplitHtmlInfo(const SplitHtmlInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.SplitHtmlInfo)
}

void SplitHtmlInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitHtmlInfo::~SplitHtmlInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.SplitHtmlInfo)
  SharedDtor();
}

void SplitHtmlInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SplitHtmlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SplitHtmlInfo& SplitHtmlInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

SplitHtmlInfo* SplitHtmlInfo::default_instance_ = NULL;

SplitHtmlInfo* SplitHtmlInfo::New(::google::protobuf::Arena* arena) const {
  SplitHtmlInfo* n = new SplitHtmlInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitHtmlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.SplitHtmlInfo)
  json_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SplitHtmlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSplitHtmlInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.SplitHtmlInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 json_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &json_size_)));
          set_has_json_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.SplitHtmlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.SplitHtmlInfo)
  return false;
#undef DO_
}

void SplitHtmlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.SplitHtmlInfo)
  // optional int64 json_size = 1;
  if (has_json_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->json_size(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.SplitHtmlInfo)
}

int SplitHtmlInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.SplitHtmlInfo)
  int total_size = 0;

  // optional int64 json_size = 1;
  if (has_json_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->json_size());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitHtmlInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SplitHtmlInfo*>(&from));
}

void SplitHtmlInfo::MergeFrom(const SplitHtmlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.SplitHtmlInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_json_size()) {
      set_json_size(from.json_size());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SplitHtmlInfo::CopyFrom(const SplitHtmlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.SplitHtmlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitHtmlInfo::IsInitialized() const {

  return true;
}

void SplitHtmlInfo::Swap(SplitHtmlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitHtmlInfo::InternalSwap(SplitHtmlInfo* other) {
  std::swap(json_size_, other->json_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SplitHtmlInfo::GetTypeName() const {
  return "net_instaweb.SplitHtmlInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitHtmlInfo

// optional int64 json_size = 1;
bool SplitHtmlInfo::has_json_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SplitHtmlInfo::set_has_json_size() {
  _has_bits_[0] |= 0x00000001u;
}
void SplitHtmlInfo::clear_has_json_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void SplitHtmlInfo::clear_json_size() {
  json_size_ = GOOGLE_LONGLONG(0);
  clear_has_json_size();
}
 ::google::protobuf::int64 SplitHtmlInfo::json_size() const {
  // @@protoc_insertion_point(field_get:net_instaweb.SplitHtmlInfo.json_size)
  return json_size_;
}
 void SplitHtmlInfo::set_json_size(::google::protobuf::int64 value) {
  set_has_json_size();
  json_size_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.SplitHtmlInfo.json_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPropertyCohortInfo(
    PropertyCohortInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyCohortInfo::kNameFieldNumber;
const int PropertyCohortInfo::kIsCacheHitFieldNumber;
const int PropertyCohortInfo::kPropertiesFoundFieldNumber;
const int PropertyCohortInfo::kDeviceTypeFieldNumber;
const int PropertyCohortInfo::kCacheTypeFieldNumber;
const int PropertyCohortInfo::kCacheKeyStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyCohortInfo::PropertyCohortInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.PropertyCohortInfo)
}

void PropertyCohortInfo::InitAsDefaultInstance() {
}

PropertyCohortInfo::PropertyCohortInfo(const PropertyCohortInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.PropertyCohortInfo)
}

void PropertyCohortInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_cache_hit_ = false;
  device_type_ = 0;
  cache_type_ = 0;
  cache_key_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyCohortInfo::~PropertyCohortInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.PropertyCohortInfo)
  SharedDtor();
}

void PropertyCohortInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropertyCohortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyCohortInfo& PropertyCohortInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

PropertyCohortInfo* PropertyCohortInfo::default_instance_ = NULL;

PropertyCohortInfo* PropertyCohortInfo::New(::google::protobuf::Arena* arena) const {
  PropertyCohortInfo* n = new PropertyCohortInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyCohortInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.PropertyCohortInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PropertyCohortInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PropertyCohortInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 59u) {
    ZR_(is_cache_hit_, cache_key_state_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  properties_found_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PropertyCohortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPropertyCohortInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.PropertyCohortInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_cache_hit;
        break;
      }

      // optional bool is_cache_hit = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_is_cache_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cache_hit_)));
          set_has_is_cache_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_properties_found;
        break;
      }

      // repeated string properties_found = 3;
      case 3: {
        if (tag == 26) {
         parse_properties_found:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_properties_found()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_properties_found;
        if (input->ExpectTag(32)) goto parse_device_type;
        break;
      }

      // optional int32 device_type = 4;
      case 4: {
        if (tag == 32) {
         parse_device_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_type_)));
          set_has_device_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cache_type;
        break;
      }

      // optional int32 cache_type = 5;
      case 5: {
        if (tag == 40) {
         parse_cache_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_type_)));
          set_has_cache_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cache_key_state;
        break;
      }

      // optional int32 cache_key_state = 6;
      case 6: {
        if (tag == 48) {
         parse_cache_key_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_key_state_)));
          set_has_cache_key_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.PropertyCohortInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.PropertyCohortInfo)
  return false;
#undef DO_
}

void PropertyCohortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.PropertyCohortInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool is_cache_hit = 2 [default = false];
  if (has_is_cache_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_cache_hit(), output);
  }

  // repeated string properties_found = 3;
  for (int i = 0; i < this->properties_found_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->properties_found(i), output);
  }

  // optional int32 device_type = 4;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->device_type(), output);
  }

  // optional int32 cache_type = 5;
  if (has_cache_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cache_type(), output);
  }

  // optional int32 cache_key_state = 6;
  if (has_cache_key_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cache_key_state(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.PropertyCohortInfo)
}

int PropertyCohortInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.PropertyCohortInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 59u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool is_cache_hit = 2 [default = false];
    if (has_is_cache_hit()) {
      total_size += 1 + 1;
    }

    // optional int32 device_type = 4;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_type());
    }

    // optional int32 cache_type = 5;
    if (has_cache_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_type());
    }

    // optional int32 cache_key_state = 6;
    if (has_cache_key_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_key_state());
    }

  }
  // repeated string properties_found = 3;
  total_size += 1 * this->properties_found_size();
  for (int i = 0; i < this->properties_found_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->properties_found(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyCohortInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyCohortInfo*>(&from));
}

void PropertyCohortInfo::MergeFrom(const PropertyCohortInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.PropertyCohortInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  properties_found_.MergeFrom(from.properties_found_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_is_cache_hit()) {
      set_is_cache_hit(from.is_cache_hit());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_cache_type()) {
      set_cache_type(from.cache_type());
    }
    if (from.has_cache_key_state()) {
      set_cache_key_state(from.cache_key_state());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PropertyCohortInfo::CopyFrom(const PropertyCohortInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.PropertyCohortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyCohortInfo::IsInitialized() const {

  return true;
}

void PropertyCohortInfo::Swap(PropertyCohortInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyCohortInfo::InternalSwap(PropertyCohortInfo* other) {
  name_.Swap(&other->name_);
  std::swap(is_cache_hit_, other->is_cache_hit_);
  properties_found_.UnsafeArenaSwap(&other->properties_found_);
  std::swap(device_type_, other->device_type_);
  std::swap(cache_type_, other->cache_type_);
  std::swap(cache_key_state_, other->cache_key_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PropertyCohortInfo::GetTypeName() const {
  return "net_instaweb.PropertyCohortInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyCohortInfo

// optional string name = 1;
bool PropertyCohortInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PropertyCohortInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PropertyCohortInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PropertyCohortInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& PropertyCohortInfo::name() const {
  // @@protoc_insertion_point(field_get:net_instaweb.PropertyCohortInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropertyCohortInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.PropertyCohortInfo.name)
}
 void PropertyCohortInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.PropertyCohortInfo.name)
}
 void PropertyCohortInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.PropertyCohortInfo.name)
}
 ::std::string* PropertyCohortInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:net_instaweb.PropertyCohortInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PropertyCohortInfo::release_name() {
  // @@protoc_insertion_point(field_release:net_instaweb.PropertyCohortInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PropertyCohortInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.PropertyCohortInfo.name)
}

// optional bool is_cache_hit = 2 [default = false];
bool PropertyCohortInfo::has_is_cache_hit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PropertyCohortInfo::set_has_is_cache_hit() {
  _has_bits_[0] |= 0x00000002u;
}
void PropertyCohortInfo::clear_has_is_cache_hit() {
  _has_bits_[0] &= ~0x00000002u;
}
void PropertyCohortInfo::clear_is_cache_hit() {
  is_cache_hit_ = false;
  clear_has_is_cache_hit();
}
 bool PropertyCohortInfo::is_cache_hit() const {
  // @@protoc_insertion_point(field_get:net_instaweb.PropertyCohortInfo.is_cache_hit)
  return is_cache_hit_;
}
 void PropertyCohortInfo::set_is_cache_hit(bool value) {
  set_has_is_cache_hit();
  is_cache_hit_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.PropertyCohortInfo.is_cache_hit)
}

// repeated string properties_found = 3;
int PropertyCohortInfo::properties_found_size() const {
  return properties_found_.size();
}
void PropertyCohortInfo::clear_properties_found() {
  properties_found_.Clear();
}
 const ::std::string& PropertyCohortInfo::properties_found(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.PropertyCohortInfo.properties_found)
  return properties_found_.Get(index);
}
 ::std::string* PropertyCohortInfo::mutable_properties_found(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.PropertyCohortInfo.properties_found)
  return properties_found_.Mutable(index);
}
 void PropertyCohortInfo::set_properties_found(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:net_instaweb.PropertyCohortInfo.properties_found)
  properties_found_.Mutable(index)->assign(value);
}
 void PropertyCohortInfo::set_properties_found(int index, const char* value) {
  properties_found_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:net_instaweb.PropertyCohortInfo.properties_found)
}
 void PropertyCohortInfo::set_properties_found(int index, const char* value, size_t size) {
  properties_found_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.PropertyCohortInfo.properties_found)
}
 ::std::string* PropertyCohortInfo::add_properties_found() {
  // @@protoc_insertion_point(field_add_mutable:net_instaweb.PropertyCohortInfo.properties_found)
  return properties_found_.Add();
}
 void PropertyCohortInfo::add_properties_found(const ::std::string& value) {
  properties_found_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:net_instaweb.PropertyCohortInfo.properties_found)
}
 void PropertyCohortInfo::add_properties_found(const char* value) {
  properties_found_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:net_instaweb.PropertyCohortInfo.properties_found)
}
 void PropertyCohortInfo::add_properties_found(const char* value, size_t size) {
  properties_found_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:net_instaweb.PropertyCohortInfo.properties_found)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PropertyCohortInfo::properties_found() const {
  // @@protoc_insertion_point(field_list:net_instaweb.PropertyCohortInfo.properties_found)
  return properties_found_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PropertyCohortInfo::mutable_properties_found() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.PropertyCohortInfo.properties_found)
  return &properties_found_;
}

// optional int32 device_type = 4;
bool PropertyCohortInfo::has_device_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PropertyCohortInfo::set_has_device_type() {
  _has_bits_[0] |= 0x00000008u;
}
void PropertyCohortInfo::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void PropertyCohortInfo::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
 ::google::protobuf::int32 PropertyCohortInfo::device_type() const {
  // @@protoc_insertion_point(field_get:net_instaweb.PropertyCohortInfo.device_type)
  return device_type_;
}
 void PropertyCohortInfo::set_device_type(::google::protobuf::int32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.PropertyCohortInfo.device_type)
}

// optional int32 cache_type = 5;
bool PropertyCohortInfo::has_cache_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PropertyCohortInfo::set_has_cache_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PropertyCohortInfo::clear_has_cache_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PropertyCohortInfo::clear_cache_type() {
  cache_type_ = 0;
  clear_has_cache_type();
}
 ::google::protobuf::int32 PropertyCohortInfo::cache_type() const {
  // @@protoc_insertion_point(field_get:net_instaweb.PropertyCohortInfo.cache_type)
  return cache_type_;
}
 void PropertyCohortInfo::set_cache_type(::google::protobuf::int32 value) {
  set_has_cache_type();
  cache_type_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.PropertyCohortInfo.cache_type)
}

// optional int32 cache_key_state = 6;
bool PropertyCohortInfo::has_cache_key_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PropertyCohortInfo::set_has_cache_key_state() {
  _has_bits_[0] |= 0x00000020u;
}
void PropertyCohortInfo::clear_has_cache_key_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void PropertyCohortInfo::clear_cache_key_state() {
  cache_key_state_ = 0;
  clear_has_cache_key_state();
}
 ::google::protobuf::int32 PropertyCohortInfo::cache_key_state() const {
  // @@protoc_insertion_point(field_get:net_instaweb.PropertyCohortInfo.cache_key_state)
  return cache_key_state_;
}
 void PropertyCohortInfo::set_cache_key_state(::google::protobuf::int32 value) {
  set_has_cache_key_state();
  cache_key_state_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.PropertyCohortInfo.cache_key_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForPropertyPageInfo(
    PropertyPageInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyPageInfo::kCohortInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyPageInfo::PropertyPageInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.PropertyPageInfo)
}

void PropertyPageInfo::InitAsDefaultInstance() {
}

PropertyPageInfo::PropertyPageInfo(const PropertyPageInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.PropertyPageInfo)
}

void PropertyPageInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertyPageInfo::~PropertyPageInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.PropertyPageInfo)
  SharedDtor();
}

void PropertyPageInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PropertyPageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PropertyPageInfo& PropertyPageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

PropertyPageInfo* PropertyPageInfo::default_instance_ = NULL;

PropertyPageInfo* PropertyPageInfo::New(::google::protobuf::Arena* arena) const {
  PropertyPageInfo* n = new PropertyPageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyPageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.PropertyPageInfo)
  cohort_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PropertyPageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForPropertyPageInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.PropertyPageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .net_instaweb.PropertyCohortInfo cohort_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cohort_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cohort_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cohort_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.PropertyPageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.PropertyPageInfo)
  return false;
#undef DO_
}

void PropertyPageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.PropertyPageInfo)
  // repeated .net_instaweb.PropertyCohortInfo cohort_info = 1;
  for (unsigned int i = 0, n = this->cohort_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cohort_info(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.PropertyPageInfo)
}

int PropertyPageInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.PropertyPageInfo)
  int total_size = 0;

  // repeated .net_instaweb.PropertyCohortInfo cohort_info = 1;
  total_size += 1 * this->cohort_info_size();
  for (int i = 0; i < this->cohort_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cohort_info(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyPageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PropertyPageInfo*>(&from));
}

void PropertyPageInfo::MergeFrom(const PropertyPageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.PropertyPageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cohort_info_.MergeFrom(from.cohort_info_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void PropertyPageInfo::CopyFrom(const PropertyPageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.PropertyPageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyPageInfo::IsInitialized() const {

  return true;
}

void PropertyPageInfo::Swap(PropertyPageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyPageInfo::InternalSwap(PropertyPageInfo* other) {
  cohort_info_.UnsafeArenaSwap(&other->cohort_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PropertyPageInfo::GetTypeName() const {
  return "net_instaweb.PropertyPageInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyPageInfo

// repeated .net_instaweb.PropertyCohortInfo cohort_info = 1;
int PropertyPageInfo::cohort_info_size() const {
  return cohort_info_.size();
}
void PropertyPageInfo::clear_cohort_info() {
  cohort_info_.Clear();
}
const ::net_instaweb::PropertyCohortInfo& PropertyPageInfo::cohort_info(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.PropertyPageInfo.cohort_info)
  return cohort_info_.Get(index);
}
::net_instaweb::PropertyCohortInfo* PropertyPageInfo::mutable_cohort_info(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.PropertyPageInfo.cohort_info)
  return cohort_info_.Mutable(index);
}
::net_instaweb::PropertyCohortInfo* PropertyPageInfo::add_cohort_info() {
  // @@protoc_insertion_point(field_add:net_instaweb.PropertyPageInfo.cohort_info)
  return cohort_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::net_instaweb::PropertyCohortInfo >*
PropertyPageInfo::mutable_cohort_info() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.PropertyPageInfo.cohort_info)
  return &cohort_info_;
}
const ::google::protobuf::RepeatedPtrField< ::net_instaweb::PropertyCohortInfo >&
PropertyPageInfo::cohort_info() const {
  // @@protoc_insertion_point(field_list:net_instaweb.PropertyPageInfo.cohort_info)
  return cohort_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFlushEarlyFlowInfo(
    FlushEarlyFlowInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlushEarlyFlowInfo::kAvailableTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushEarlyFlowInfo::FlushEarlyFlowInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.FlushEarlyFlowInfo)
}

void FlushEarlyFlowInfo::InitAsDefaultInstance() {
}

FlushEarlyFlowInfo::FlushEarlyFlowInfo(const FlushEarlyFlowInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.FlushEarlyFlowInfo)
}

void FlushEarlyFlowInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_time_ms_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushEarlyFlowInfo::~FlushEarlyFlowInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.FlushEarlyFlowInfo)
  SharedDtor();
}

void FlushEarlyFlowInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FlushEarlyFlowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlushEarlyFlowInfo& FlushEarlyFlowInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

FlushEarlyFlowInfo* FlushEarlyFlowInfo::default_instance_ = NULL;

FlushEarlyFlowInfo* FlushEarlyFlowInfo::New(::google::protobuf::Arena* arena) const {
  FlushEarlyFlowInfo* n = new FlushEarlyFlowInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlushEarlyFlowInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.FlushEarlyFlowInfo)
  available_time_ms_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FlushEarlyFlowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForFlushEarlyFlowInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.FlushEarlyFlowInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 available_time_ms = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_time_ms_)));
          set_has_available_time_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.FlushEarlyFlowInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.FlushEarlyFlowInfo)
  return false;
#undef DO_
}

void FlushEarlyFlowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.FlushEarlyFlowInfo)
  // optional int64 available_time_ms = 1;
  if (has_available_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->available_time_ms(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.FlushEarlyFlowInfo)
}

int FlushEarlyFlowInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.FlushEarlyFlowInfo)
  int total_size = 0;

  // optional int64 available_time_ms = 1;
  if (has_available_time_ms()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->available_time_ms());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushEarlyFlowInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlushEarlyFlowInfo*>(&from));
}

void FlushEarlyFlowInfo::MergeFrom(const FlushEarlyFlowInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.FlushEarlyFlowInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_available_time_ms()) {
      set_available_time_ms(from.available_time_ms());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void FlushEarlyFlowInfo::CopyFrom(const FlushEarlyFlowInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.FlushEarlyFlowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushEarlyFlowInfo::IsInitialized() const {

  return true;
}

void FlushEarlyFlowInfo::Swap(FlushEarlyFlowInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushEarlyFlowInfo::InternalSwap(FlushEarlyFlowInfo* other) {
  std::swap(available_time_ms_, other->available_time_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlushEarlyFlowInfo::GetTypeName() const {
  return "net_instaweb.FlushEarlyFlowInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlushEarlyFlowInfo

// optional int64 available_time_ms = 1;
bool FlushEarlyFlowInfo::has_available_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FlushEarlyFlowInfo::set_has_available_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
void FlushEarlyFlowInfo::clear_has_available_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
void FlushEarlyFlowInfo::clear_available_time_ms() {
  available_time_ms_ = GOOGLE_LONGLONG(0);
  clear_has_available_time_ms();
}
 ::google::protobuf::int64 FlushEarlyFlowInfo::available_time_ms() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyFlowInfo.available_time_ms)
  return available_time_ms_;
}
 void FlushEarlyFlowInfo::set_available_time_ms(::google::protobuf::int64 value) {
  set_has_available_time_ms();
  available_time_ms_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyFlowInfo.available_time_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFlushEarlyResourceInfo(
    FlushEarlyResourceInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

bool FlushEarlyResourceInfo_ResourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::UNKNOWN_TYPE;
const FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::PAGESPEED;
const FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::NON_PAGESPEED;
const FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::PRIVATE_CACHEABLE;
const FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::DEFERJS_SCRIPT;
const FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::PUBLIC_CACHEABLE;
const FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::ResourceType_MIN;
const FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::ResourceType_MAX;
const int FlushEarlyResourceInfo::ResourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FlushEarlyResourceInfo_ContentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlushEarlyResourceInfo_ContentType FlushEarlyResourceInfo::UNKNOWN_CONTENT_TYPE;
const FlushEarlyResourceInfo_ContentType FlushEarlyResourceInfo::IMAGE;
const FlushEarlyResourceInfo_ContentType FlushEarlyResourceInfo::JS;
const FlushEarlyResourceInfo_ContentType FlushEarlyResourceInfo::CSS;
const FlushEarlyResourceInfo_ContentType FlushEarlyResourceInfo::ContentType_MIN;
const FlushEarlyResourceInfo_ContentType FlushEarlyResourceInfo::ContentType_MAX;
const int FlushEarlyResourceInfo::ContentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlushEarlyResourceInfo::kContentTypeFieldNumber;
const int FlushEarlyResourceInfo::kResourceTypeFieldNumber;
const int FlushEarlyResourceInfo::kIsBandwidthAffectedFieldNumber;
const int FlushEarlyResourceInfo::kInHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushEarlyResourceInfo::FlushEarlyResourceInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.FlushEarlyResourceInfo)
}

void FlushEarlyResourceInfo::InitAsDefaultInstance() {
}

FlushEarlyResourceInfo::FlushEarlyResourceInfo(const FlushEarlyResourceInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.FlushEarlyResourceInfo)
}

void FlushEarlyResourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = 0;
  resource_type_ = 0;
  is_bandwidth_affected_ = false;
  in_head_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushEarlyResourceInfo::~FlushEarlyResourceInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.FlushEarlyResourceInfo)
  SharedDtor();
}

void FlushEarlyResourceInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FlushEarlyResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlushEarlyResourceInfo& FlushEarlyResourceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

FlushEarlyResourceInfo* FlushEarlyResourceInfo::default_instance_ = NULL;

FlushEarlyResourceInfo* FlushEarlyResourceInfo::New(::google::protobuf::Arena* arena) const {
  FlushEarlyResourceInfo* n = new FlushEarlyResourceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlushEarlyResourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.FlushEarlyResourceInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FlushEarlyResourceInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FlushEarlyResourceInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(content_type_, in_head_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FlushEarlyResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForFlushEarlyResourceInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.FlushEarlyResourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net_instaweb.FlushEarlyResourceInfo.ContentType content_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::FlushEarlyResourceInfo_ContentType_IsValid(value)) {
            set_content_type(static_cast< ::net_instaweb::FlushEarlyResourceInfo_ContentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_resource_type;
        break;
      }

      // optional .net_instaweb.FlushEarlyResourceInfo.ResourceType resource_type = 2;
      case 2: {
        if (tag == 16) {
         parse_resource_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::FlushEarlyResourceInfo_ResourceType_IsValid(value)) {
            set_resource_type(static_cast< ::net_instaweb::FlushEarlyResourceInfo_ResourceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_bandwidth_affected;
        break;
      }

      // optional bool is_bandwidth_affected = 3;
      case 3: {
        if (tag == 24) {
         parse_is_bandwidth_affected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bandwidth_affected_)));
          set_has_is_bandwidth_affected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_in_head;
        break;
      }

      // optional bool in_head = 4;
      case 4: {
        if (tag == 32) {
         parse_in_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_head_)));
          set_has_in_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.FlushEarlyResourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.FlushEarlyResourceInfo)
  return false;
#undef DO_
}

void FlushEarlyResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.FlushEarlyResourceInfo)
  // optional .net_instaweb.FlushEarlyResourceInfo.ContentType content_type = 1;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->content_type(), output);
  }

  // optional .net_instaweb.FlushEarlyResourceInfo.ResourceType resource_type = 2;
  if (has_resource_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->resource_type(), output);
  }

  // optional bool is_bandwidth_affected = 3;
  if (has_is_bandwidth_affected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_bandwidth_affected(), output);
  }

  // optional bool in_head = 4;
  if (has_in_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->in_head(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.FlushEarlyResourceInfo)
}

int FlushEarlyResourceInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.FlushEarlyResourceInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .net_instaweb.FlushEarlyResourceInfo.ContentType content_type = 1;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->content_type());
    }

    // optional .net_instaweb.FlushEarlyResourceInfo.ResourceType resource_type = 2;
    if (has_resource_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource_type());
    }

    // optional bool is_bandwidth_affected = 3;
    if (has_is_bandwidth_affected()) {
      total_size += 1 + 1;
    }

    // optional bool in_head = 4;
    if (has_in_head()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushEarlyResourceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlushEarlyResourceInfo*>(&from));
}

void FlushEarlyResourceInfo::MergeFrom(const FlushEarlyResourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.FlushEarlyResourceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_resource_type()) {
      set_resource_type(from.resource_type());
    }
    if (from.has_is_bandwidth_affected()) {
      set_is_bandwidth_affected(from.is_bandwidth_affected());
    }
    if (from.has_in_head()) {
      set_in_head(from.in_head());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void FlushEarlyResourceInfo::CopyFrom(const FlushEarlyResourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.FlushEarlyResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushEarlyResourceInfo::IsInitialized() const {

  return true;
}

void FlushEarlyResourceInfo::Swap(FlushEarlyResourceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushEarlyResourceInfo::InternalSwap(FlushEarlyResourceInfo* other) {
  std::swap(content_type_, other->content_type_);
  std::swap(resource_type_, other->resource_type_);
  std::swap(is_bandwidth_affected_, other->is_bandwidth_affected_);
  std::swap(in_head_, other->in_head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlushEarlyResourceInfo::GetTypeName() const {
  return "net_instaweb.FlushEarlyResourceInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlushEarlyResourceInfo

// optional .net_instaweb.FlushEarlyResourceInfo.ContentType content_type = 1;
bool FlushEarlyResourceInfo::has_content_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FlushEarlyResourceInfo::set_has_content_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FlushEarlyResourceInfo::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FlushEarlyResourceInfo::clear_content_type() {
  content_type_ = 0;
  clear_has_content_type();
}
 ::net_instaweb::FlushEarlyResourceInfo_ContentType FlushEarlyResourceInfo::content_type() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyResourceInfo.content_type)
  return static_cast< ::net_instaweb::FlushEarlyResourceInfo_ContentType >(content_type_);
}
 void FlushEarlyResourceInfo::set_content_type(::net_instaweb::FlushEarlyResourceInfo_ContentType value) {
  assert(::net_instaweb::FlushEarlyResourceInfo_ContentType_IsValid(value));
  set_has_content_type();
  content_type_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyResourceInfo.content_type)
}

// optional .net_instaweb.FlushEarlyResourceInfo.ResourceType resource_type = 2;
bool FlushEarlyResourceInfo::has_resource_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FlushEarlyResourceInfo::set_has_resource_type() {
  _has_bits_[0] |= 0x00000002u;
}
void FlushEarlyResourceInfo::clear_has_resource_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void FlushEarlyResourceInfo::clear_resource_type() {
  resource_type_ = 0;
  clear_has_resource_type();
}
 ::net_instaweb::FlushEarlyResourceInfo_ResourceType FlushEarlyResourceInfo::resource_type() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyResourceInfo.resource_type)
  return static_cast< ::net_instaweb::FlushEarlyResourceInfo_ResourceType >(resource_type_);
}
 void FlushEarlyResourceInfo::set_resource_type(::net_instaweb::FlushEarlyResourceInfo_ResourceType value) {
  assert(::net_instaweb::FlushEarlyResourceInfo_ResourceType_IsValid(value));
  set_has_resource_type();
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyResourceInfo.resource_type)
}

// optional bool is_bandwidth_affected = 3;
bool FlushEarlyResourceInfo::has_is_bandwidth_affected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FlushEarlyResourceInfo::set_has_is_bandwidth_affected() {
  _has_bits_[0] |= 0x00000004u;
}
void FlushEarlyResourceInfo::clear_has_is_bandwidth_affected() {
  _has_bits_[0] &= ~0x00000004u;
}
void FlushEarlyResourceInfo::clear_is_bandwidth_affected() {
  is_bandwidth_affected_ = false;
  clear_has_is_bandwidth_affected();
}
 bool FlushEarlyResourceInfo::is_bandwidth_affected() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyResourceInfo.is_bandwidth_affected)
  return is_bandwidth_affected_;
}
 void FlushEarlyResourceInfo::set_is_bandwidth_affected(bool value) {
  set_has_is_bandwidth_affected();
  is_bandwidth_affected_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyResourceInfo.is_bandwidth_affected)
}

// optional bool in_head = 4;
bool FlushEarlyResourceInfo::has_in_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FlushEarlyResourceInfo::set_has_in_head() {
  _has_bits_[0] |= 0x00000008u;
}
void FlushEarlyResourceInfo::clear_has_in_head() {
  _has_bits_[0] &= ~0x00000008u;
}
void FlushEarlyResourceInfo::clear_in_head() {
  in_head_ = false;
  clear_has_in_head();
}
 bool FlushEarlyResourceInfo::in_head() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyResourceInfo.in_head)
  return in_head_;
}
 void FlushEarlyResourceInfo::set_in_head(bool value) {
  set_has_in_head();
  in_head_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyResourceInfo.in_head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCriticalCssInfo(
    CriticalCssInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CriticalCssInfo::kCriticalInlinedBytesFieldNumber;
const int CriticalCssInfo::kOriginalExternalBytesFieldNumber;
const int CriticalCssInfo::kOverheadBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CriticalCssInfo::CriticalCssInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.CriticalCssInfo)
}

void CriticalCssInfo::InitAsDefaultInstance() {
}

CriticalCssInfo::CriticalCssInfo(const CriticalCssInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.CriticalCssInfo)
}

void CriticalCssInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  critical_inlined_bytes_ = GOOGLE_LONGLONG(0);
  original_external_bytes_ = GOOGLE_LONGLONG(0);
  overhead_bytes_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CriticalCssInfo::~CriticalCssInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.CriticalCssInfo)
  SharedDtor();
}

void CriticalCssInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CriticalCssInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CriticalCssInfo& CriticalCssInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

CriticalCssInfo* CriticalCssInfo::default_instance_ = NULL;

CriticalCssInfo* CriticalCssInfo::New(::google::protobuf::Arena* arena) const {
  CriticalCssInfo* n = new CriticalCssInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CriticalCssInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.CriticalCssInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CriticalCssInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CriticalCssInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(critical_inlined_bytes_, overhead_bytes_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CriticalCssInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCriticalCssInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.CriticalCssInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 critical_inlined_bytes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &critical_inlined_bytes_)));
          set_has_critical_inlined_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_original_external_bytes;
        break;
      }

      // optional int64 original_external_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_original_external_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &original_external_bytes_)));
          set_has_original_external_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_overhead_bytes;
        break;
      }

      // optional int64 overhead_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_overhead_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &overhead_bytes_)));
          set_has_overhead_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.CriticalCssInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.CriticalCssInfo)
  return false;
#undef DO_
}

void CriticalCssInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.CriticalCssInfo)
  // optional int64 critical_inlined_bytes = 1;
  if (has_critical_inlined_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->critical_inlined_bytes(), output);
  }

  // optional int64 original_external_bytes = 2;
  if (has_original_external_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->original_external_bytes(), output);
  }

  // optional int64 overhead_bytes = 3;
  if (has_overhead_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->overhead_bytes(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.CriticalCssInfo)
}

int CriticalCssInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.CriticalCssInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 critical_inlined_bytes = 1;
    if (has_critical_inlined_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->critical_inlined_bytes());
    }

    // optional int64 original_external_bytes = 2;
    if (has_original_external_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->original_external_bytes());
    }

    // optional int64 overhead_bytes = 3;
    if (has_overhead_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->overhead_bytes());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CriticalCssInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CriticalCssInfo*>(&from));
}

void CriticalCssInfo::MergeFrom(const CriticalCssInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.CriticalCssInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_critical_inlined_bytes()) {
      set_critical_inlined_bytes(from.critical_inlined_bytes());
    }
    if (from.has_original_external_bytes()) {
      set_original_external_bytes(from.original_external_bytes());
    }
    if (from.has_overhead_bytes()) {
      set_overhead_bytes(from.overhead_bytes());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CriticalCssInfo::CopyFrom(const CriticalCssInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.CriticalCssInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CriticalCssInfo::IsInitialized() const {

  return true;
}

void CriticalCssInfo::Swap(CriticalCssInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CriticalCssInfo::InternalSwap(CriticalCssInfo* other) {
  std::swap(critical_inlined_bytes_, other->critical_inlined_bytes_);
  std::swap(original_external_bytes_, other->original_external_bytes_);
  std::swap(overhead_bytes_, other->overhead_bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CriticalCssInfo::GetTypeName() const {
  return "net_instaweb.CriticalCssInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CriticalCssInfo

// optional int64 critical_inlined_bytes = 1;
bool CriticalCssInfo::has_critical_inlined_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CriticalCssInfo::set_has_critical_inlined_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void CriticalCssInfo::clear_has_critical_inlined_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void CriticalCssInfo::clear_critical_inlined_bytes() {
  critical_inlined_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_critical_inlined_bytes();
}
 ::google::protobuf::int64 CriticalCssInfo::critical_inlined_bytes() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalCssInfo.critical_inlined_bytes)
  return critical_inlined_bytes_;
}
 void CriticalCssInfo::set_critical_inlined_bytes(::google::protobuf::int64 value) {
  set_has_critical_inlined_bytes();
  critical_inlined_bytes_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalCssInfo.critical_inlined_bytes)
}

// optional int64 original_external_bytes = 2;
bool CriticalCssInfo::has_original_external_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CriticalCssInfo::set_has_original_external_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void CriticalCssInfo::clear_has_original_external_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void CriticalCssInfo::clear_original_external_bytes() {
  original_external_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_original_external_bytes();
}
 ::google::protobuf::int64 CriticalCssInfo::original_external_bytes() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalCssInfo.original_external_bytes)
  return original_external_bytes_;
}
 void CriticalCssInfo::set_original_external_bytes(::google::protobuf::int64 value) {
  set_has_original_external_bytes();
  original_external_bytes_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalCssInfo.original_external_bytes)
}

// optional int64 overhead_bytes = 3;
bool CriticalCssInfo::has_overhead_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CriticalCssInfo::set_has_overhead_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
void CriticalCssInfo::clear_has_overhead_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
void CriticalCssInfo::clear_overhead_bytes() {
  overhead_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_overhead_bytes();
}
 ::google::protobuf::int64 CriticalCssInfo::overhead_bytes() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CriticalCssInfo.overhead_bytes)
  return overhead_bytes_;
}
 void CriticalCssInfo::set_overhead_bytes(::google::protobuf::int64 value) {
  set_has_overhead_bytes();
  overhead_bytes_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CriticalCssInfo.overhead_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForCacheHtmlLoggingInfo(
    CacheHtmlLoggingInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

bool CacheHtmlLoggingInfo_CacheHtmlRequestFlow_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::CACHE_HTML_HIT;
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::CACHE_HTML_MISS_FOUND_RESOURCE;
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::CACHE_HTML_MISS_FETCH_NON_OK;
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::CACHE_HTML_MISS_TRIGGERED_REWRITE;
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::FOUND_MALFORMED_HTML;
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::FOUND_CONTENT_LENGTH_OVER_THRESHOLD;
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::CACHE_HTML_BLACKLISTED;
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::CacheHtmlRequestFlow_MIN;
const CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::CacheHtmlRequestFlow_MAX;
const int CacheHtmlLoggingInfo::CacheHtmlRequestFlow_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CacheHtmlLoggingInfo_UserAgent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::NOT_SET;
const CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::CACHE_HTML_DESKTOP_WHITELIST;
const CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::CACHE_HTML_DESKTOP_BLACKLIST;
const CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::CACHE_HTML_MOBILE;
const CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::NULL_OR_EMPTY;
const CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::NOT_SUPPORT_CACHE_HTML;
const CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::UserAgent_MIN;
const CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::UserAgent_MAX;
const int CacheHtmlLoggingInfo::UserAgent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CacheHtmlLoggingInfo::kCacheHtmlRequestFlowFieldNumber;
const int CacheHtmlLoggingInfo::kRequestEventIdTimeUsecFieldNumber;
const int CacheHtmlLoggingInfo::kHtmlMatchFieldNumber;
const int CacheHtmlLoggingInfo::kHtmlSmartDiffMatchFieldNumber;
const int CacheHtmlLoggingInfo::kUrlFieldNumber;
const int CacheHtmlLoggingInfo::kCacheHtmlUserAgentFieldNumber;
const int CacheHtmlLoggingInfo::kMismatchBlacklistThresholdExceededFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CacheHtmlLoggingInfo::CacheHtmlLoggingInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.CacheHtmlLoggingInfo)
}

void CacheHtmlLoggingInfo::InitAsDefaultInstance() {
}

CacheHtmlLoggingInfo::CacheHtmlLoggingInfo(const CacheHtmlLoggingInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.CacheHtmlLoggingInfo)
}

void CacheHtmlLoggingInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_html_request_flow_ = 1;
  request_event_id_time_usec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_match_ = false;
  html_smart_diff_match_ = false;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_html_user_agent_ = 0;
  mismatch_blacklist_threshold_exceeded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheHtmlLoggingInfo::~CacheHtmlLoggingInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.CacheHtmlLoggingInfo)
  SharedDtor();
}

void CacheHtmlLoggingInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_event_id_time_usec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CacheHtmlLoggingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CacheHtmlLoggingInfo& CacheHtmlLoggingInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

CacheHtmlLoggingInfo* CacheHtmlLoggingInfo::default_instance_ = NULL;

CacheHtmlLoggingInfo* CacheHtmlLoggingInfo::New(::google::protobuf::Arena* arena) const {
  CacheHtmlLoggingInfo* n = new CacheHtmlLoggingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CacheHtmlLoggingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.CacheHtmlLoggingInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CacheHtmlLoggingInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CacheHtmlLoggingInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(html_match_, mismatch_blacklist_threshold_exceeded_);
    cache_html_request_flow_ = 1;
    if (has_request_event_id_time_usec()) {
      request_event_id_time_usec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_url()) {
      url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    cache_html_user_agent_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CacheHtmlLoggingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForCacheHtmlLoggingInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.CacheHtmlLoggingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net_instaweb.CacheHtmlLoggingInfo.CacheHtmlRequestFlow cache_html_request_flow = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::CacheHtmlLoggingInfo_CacheHtmlRequestFlow_IsValid(value)) {
            set_cache_html_request_flow(static_cast< ::net_instaweb::CacheHtmlLoggingInfo_CacheHtmlRequestFlow >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_event_id_time_usec;
        break;
      }

      // optional string request_event_id_time_usec = 2;
      case 2: {
        if (tag == 18) {
         parse_request_event_id_time_usec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_event_id_time_usec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_html_match;
        break;
      }

      // optional bool html_match = 3;
      case 3: {
        if (tag == 24) {
         parse_html_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &html_match_)));
          set_has_html_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_html_smart_diff_match;
        break;
      }

      // optional bool html_smart_diff_match = 4;
      case 4: {
        if (tag == 32) {
         parse_html_smart_diff_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &html_smart_diff_match_)));
          set_has_html_smart_diff_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_url;
        break;
      }

      // optional string url = 5;
      case 5: {
        if (tag == 42) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cache_html_user_agent;
        break;
      }

      // optional .net_instaweb.CacheHtmlLoggingInfo.UserAgent cache_html_user_agent = 6;
      case 6: {
        if (tag == 48) {
         parse_cache_html_user_agent:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::CacheHtmlLoggingInfo_UserAgent_IsValid(value)) {
            set_cache_html_user_agent(static_cast< ::net_instaweb::CacheHtmlLoggingInfo_UserAgent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mismatch_blacklist_threshold_exceeded;
        break;
      }

      // optional bool mismatch_blacklist_threshold_exceeded = 7;
      case 7: {
        if (tag == 56) {
         parse_mismatch_blacklist_threshold_exceeded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mismatch_blacklist_threshold_exceeded_)));
          set_has_mismatch_blacklist_threshold_exceeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.CacheHtmlLoggingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.CacheHtmlLoggingInfo)
  return false;
#undef DO_
}

void CacheHtmlLoggingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.CacheHtmlLoggingInfo)
  // optional .net_instaweb.CacheHtmlLoggingInfo.CacheHtmlRequestFlow cache_html_request_flow = 1;
  if (has_cache_html_request_flow()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cache_html_request_flow(), output);
  }

  // optional string request_event_id_time_usec = 2;
  if (has_request_event_id_time_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_event_id_time_usec(), output);
  }

  // optional bool html_match = 3;
  if (has_html_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->html_match(), output);
  }

  // optional bool html_smart_diff_match = 4;
  if (has_html_smart_diff_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->html_smart_diff_match(), output);
  }

  // optional string url = 5;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // optional .net_instaweb.CacheHtmlLoggingInfo.UserAgent cache_html_user_agent = 6;
  if (has_cache_html_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cache_html_user_agent(), output);
  }

  // optional bool mismatch_blacklist_threshold_exceeded = 7;
  if (has_mismatch_blacklist_threshold_exceeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->mismatch_blacklist_threshold_exceeded(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.CacheHtmlLoggingInfo)
}

int CacheHtmlLoggingInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.CacheHtmlLoggingInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .net_instaweb.CacheHtmlLoggingInfo.CacheHtmlRequestFlow cache_html_request_flow = 1;
    if (has_cache_html_request_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cache_html_request_flow());
    }

    // optional string request_event_id_time_usec = 2;
    if (has_request_event_id_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_event_id_time_usec());
    }

    // optional bool html_match = 3;
    if (has_html_match()) {
      total_size += 1 + 1;
    }

    // optional bool html_smart_diff_match = 4;
    if (has_html_smart_diff_match()) {
      total_size += 1 + 1;
    }

    // optional string url = 5;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .net_instaweb.CacheHtmlLoggingInfo.UserAgent cache_html_user_agent = 6;
    if (has_cache_html_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cache_html_user_agent());
    }

    // optional bool mismatch_blacklist_threshold_exceeded = 7;
    if (has_mismatch_blacklist_threshold_exceeded()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheHtmlLoggingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CacheHtmlLoggingInfo*>(&from));
}

void CacheHtmlLoggingInfo::MergeFrom(const CacheHtmlLoggingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.CacheHtmlLoggingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cache_html_request_flow()) {
      set_cache_html_request_flow(from.cache_html_request_flow());
    }
    if (from.has_request_event_id_time_usec()) {
      set_has_request_event_id_time_usec();
      request_event_id_time_usec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_event_id_time_usec_);
    }
    if (from.has_html_match()) {
      set_html_match(from.html_match());
    }
    if (from.has_html_smart_diff_match()) {
      set_html_smart_diff_match(from.html_smart_diff_match());
    }
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (from.has_cache_html_user_agent()) {
      set_cache_html_user_agent(from.cache_html_user_agent());
    }
    if (from.has_mismatch_blacklist_threshold_exceeded()) {
      set_mismatch_blacklist_threshold_exceeded(from.mismatch_blacklist_threshold_exceeded());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void CacheHtmlLoggingInfo::CopyFrom(const CacheHtmlLoggingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.CacheHtmlLoggingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheHtmlLoggingInfo::IsInitialized() const {

  return true;
}

void CacheHtmlLoggingInfo::Swap(CacheHtmlLoggingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CacheHtmlLoggingInfo::InternalSwap(CacheHtmlLoggingInfo* other) {
  std::swap(cache_html_request_flow_, other->cache_html_request_flow_);
  request_event_id_time_usec_.Swap(&other->request_event_id_time_usec_);
  std::swap(html_match_, other->html_match_);
  std::swap(html_smart_diff_match_, other->html_smart_diff_match_);
  url_.Swap(&other->url_);
  std::swap(cache_html_user_agent_, other->cache_html_user_agent_);
  std::swap(mismatch_blacklist_threshold_exceeded_, other->mismatch_blacklist_threshold_exceeded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CacheHtmlLoggingInfo::GetTypeName() const {
  return "net_instaweb.CacheHtmlLoggingInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CacheHtmlLoggingInfo

// optional .net_instaweb.CacheHtmlLoggingInfo.CacheHtmlRequestFlow cache_html_request_flow = 1;
bool CacheHtmlLoggingInfo::has_cache_html_request_flow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CacheHtmlLoggingInfo::set_has_cache_html_request_flow() {
  _has_bits_[0] |= 0x00000001u;
}
void CacheHtmlLoggingInfo::clear_has_cache_html_request_flow() {
  _has_bits_[0] &= ~0x00000001u;
}
void CacheHtmlLoggingInfo::clear_cache_html_request_flow() {
  cache_html_request_flow_ = 1;
  clear_has_cache_html_request_flow();
}
 ::net_instaweb::CacheHtmlLoggingInfo_CacheHtmlRequestFlow CacheHtmlLoggingInfo::cache_html_request_flow() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CacheHtmlLoggingInfo.cache_html_request_flow)
  return static_cast< ::net_instaweb::CacheHtmlLoggingInfo_CacheHtmlRequestFlow >(cache_html_request_flow_);
}
 void CacheHtmlLoggingInfo::set_cache_html_request_flow(::net_instaweb::CacheHtmlLoggingInfo_CacheHtmlRequestFlow value) {
  assert(::net_instaweb::CacheHtmlLoggingInfo_CacheHtmlRequestFlow_IsValid(value));
  set_has_cache_html_request_flow();
  cache_html_request_flow_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CacheHtmlLoggingInfo.cache_html_request_flow)
}

// optional string request_event_id_time_usec = 2;
bool CacheHtmlLoggingInfo::has_request_event_id_time_usec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CacheHtmlLoggingInfo::set_has_request_event_id_time_usec() {
  _has_bits_[0] |= 0x00000002u;
}
void CacheHtmlLoggingInfo::clear_has_request_event_id_time_usec() {
  _has_bits_[0] &= ~0x00000002u;
}
void CacheHtmlLoggingInfo::clear_request_event_id_time_usec() {
  request_event_id_time_usec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_event_id_time_usec();
}
 const ::std::string& CacheHtmlLoggingInfo::request_event_id_time_usec() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CacheHtmlLoggingInfo.request_event_id_time_usec)
  return request_event_id_time_usec_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CacheHtmlLoggingInfo::set_request_event_id_time_usec(const ::std::string& value) {
  set_has_request_event_id_time_usec();
  request_event_id_time_usec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.CacheHtmlLoggingInfo.request_event_id_time_usec)
}
 void CacheHtmlLoggingInfo::set_request_event_id_time_usec(const char* value) {
  set_has_request_event_id_time_usec();
  request_event_id_time_usec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.CacheHtmlLoggingInfo.request_event_id_time_usec)
}
 void CacheHtmlLoggingInfo::set_request_event_id_time_usec(const char* value, size_t size) {
  set_has_request_event_id_time_usec();
  request_event_id_time_usec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.CacheHtmlLoggingInfo.request_event_id_time_usec)
}
 ::std::string* CacheHtmlLoggingInfo::mutable_request_event_id_time_usec() {
  set_has_request_event_id_time_usec();
  // @@protoc_insertion_point(field_mutable:net_instaweb.CacheHtmlLoggingInfo.request_event_id_time_usec)
  return request_event_id_time_usec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CacheHtmlLoggingInfo::release_request_event_id_time_usec() {
  // @@protoc_insertion_point(field_release:net_instaweb.CacheHtmlLoggingInfo.request_event_id_time_usec)
  clear_has_request_event_id_time_usec();
  return request_event_id_time_usec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CacheHtmlLoggingInfo::set_allocated_request_event_id_time_usec(::std::string* request_event_id_time_usec) {
  if (request_event_id_time_usec != NULL) {
    set_has_request_event_id_time_usec();
  } else {
    clear_has_request_event_id_time_usec();
  }
  request_event_id_time_usec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_event_id_time_usec);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.CacheHtmlLoggingInfo.request_event_id_time_usec)
}

// optional bool html_match = 3;
bool CacheHtmlLoggingInfo::has_html_match() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CacheHtmlLoggingInfo::set_has_html_match() {
  _has_bits_[0] |= 0x00000004u;
}
void CacheHtmlLoggingInfo::clear_has_html_match() {
  _has_bits_[0] &= ~0x00000004u;
}
void CacheHtmlLoggingInfo::clear_html_match() {
  html_match_ = false;
  clear_has_html_match();
}
 bool CacheHtmlLoggingInfo::html_match() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CacheHtmlLoggingInfo.html_match)
  return html_match_;
}
 void CacheHtmlLoggingInfo::set_html_match(bool value) {
  set_has_html_match();
  html_match_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CacheHtmlLoggingInfo.html_match)
}

// optional bool html_smart_diff_match = 4;
bool CacheHtmlLoggingInfo::has_html_smart_diff_match() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CacheHtmlLoggingInfo::set_has_html_smart_diff_match() {
  _has_bits_[0] |= 0x00000008u;
}
void CacheHtmlLoggingInfo::clear_has_html_smart_diff_match() {
  _has_bits_[0] &= ~0x00000008u;
}
void CacheHtmlLoggingInfo::clear_html_smart_diff_match() {
  html_smart_diff_match_ = false;
  clear_has_html_smart_diff_match();
}
 bool CacheHtmlLoggingInfo::html_smart_diff_match() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CacheHtmlLoggingInfo.html_smart_diff_match)
  return html_smart_diff_match_;
}
 void CacheHtmlLoggingInfo::set_html_smart_diff_match(bool value) {
  set_has_html_smart_diff_match();
  html_smart_diff_match_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CacheHtmlLoggingInfo.html_smart_diff_match)
}

// optional string url = 5;
bool CacheHtmlLoggingInfo::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CacheHtmlLoggingInfo::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
void CacheHtmlLoggingInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void CacheHtmlLoggingInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& CacheHtmlLoggingInfo::url() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CacheHtmlLoggingInfo.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CacheHtmlLoggingInfo::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.CacheHtmlLoggingInfo.url)
}
 void CacheHtmlLoggingInfo::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.CacheHtmlLoggingInfo.url)
}
 void CacheHtmlLoggingInfo::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.CacheHtmlLoggingInfo.url)
}
 ::std::string* CacheHtmlLoggingInfo::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:net_instaweb.CacheHtmlLoggingInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CacheHtmlLoggingInfo::release_url() {
  // @@protoc_insertion_point(field_release:net_instaweb.CacheHtmlLoggingInfo.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CacheHtmlLoggingInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.CacheHtmlLoggingInfo.url)
}

// optional .net_instaweb.CacheHtmlLoggingInfo.UserAgent cache_html_user_agent = 6;
bool CacheHtmlLoggingInfo::has_cache_html_user_agent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CacheHtmlLoggingInfo::set_has_cache_html_user_agent() {
  _has_bits_[0] |= 0x00000020u;
}
void CacheHtmlLoggingInfo::clear_has_cache_html_user_agent() {
  _has_bits_[0] &= ~0x00000020u;
}
void CacheHtmlLoggingInfo::clear_cache_html_user_agent() {
  cache_html_user_agent_ = 0;
  clear_has_cache_html_user_agent();
}
 ::net_instaweb::CacheHtmlLoggingInfo_UserAgent CacheHtmlLoggingInfo::cache_html_user_agent() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CacheHtmlLoggingInfo.cache_html_user_agent)
  return static_cast< ::net_instaweb::CacheHtmlLoggingInfo_UserAgent >(cache_html_user_agent_);
}
 void CacheHtmlLoggingInfo::set_cache_html_user_agent(::net_instaweb::CacheHtmlLoggingInfo_UserAgent value) {
  assert(::net_instaweb::CacheHtmlLoggingInfo_UserAgent_IsValid(value));
  set_has_cache_html_user_agent();
  cache_html_user_agent_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CacheHtmlLoggingInfo.cache_html_user_agent)
}

// optional bool mismatch_blacklist_threshold_exceeded = 7;
bool CacheHtmlLoggingInfo::has_mismatch_blacklist_threshold_exceeded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CacheHtmlLoggingInfo::set_has_mismatch_blacklist_threshold_exceeded() {
  _has_bits_[0] |= 0x00000040u;
}
void CacheHtmlLoggingInfo::clear_has_mismatch_blacklist_threshold_exceeded() {
  _has_bits_[0] &= ~0x00000040u;
}
void CacheHtmlLoggingInfo::clear_mismatch_blacklist_threshold_exceeded() {
  mismatch_blacklist_threshold_exceeded_ = false;
  clear_has_mismatch_blacklist_threshold_exceeded();
}
 bool CacheHtmlLoggingInfo::mismatch_blacklist_threshold_exceeded() const {
  // @@protoc_insertion_point(field_get:net_instaweb.CacheHtmlLoggingInfo.mismatch_blacklist_threshold_exceeded)
  return mismatch_blacklist_threshold_exceeded_;
}
 void CacheHtmlLoggingInfo::set_mismatch_blacklist_threshold_exceeded(bool value) {
  set_has_mismatch_blacklist_threshold_exceeded();
  mismatch_blacklist_threshold_exceeded_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.CacheHtmlLoggingInfo.mismatch_blacklist_threshold_exceeded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRewriteResourceInfo(
    RewriteResourceInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriteResourceInfo::kIsInlinedFieldNumber;
const int RewriteResourceInfo::kIsCriticalFieldNumber;
const int RewriteResourceInfo::kHasPagespeedNoDeferFieldNumber;
const int RewriteResourceInfo::kIsBlacklistedFieldNumber;
const int RewriteResourceInfo::kOriginalResourceUrlIndexFieldNumber;
const int RewriteResourceInfo::kOriginalSizeFieldNumber;
const int RewriteResourceInfo::kOptimizedSizeFieldNumber;
const int RewriteResourceInfo::kIsRecompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriteResourceInfo::RewriteResourceInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.RewriteResourceInfo)
}

void RewriteResourceInfo::InitAsDefaultInstance() {
}

RewriteResourceInfo::RewriteResourceInfo(const RewriteResourceInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.RewriteResourceInfo)
}

void RewriteResourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_inlined_ = false;
  is_critical_ = false;
  has_pagespeed_no_defer_ = false;
  is_blacklisted_ = false;
  original_resource_url_index_ = -1;
  original_size_ = 0;
  optimized_size_ = 0;
  is_recompressed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewriteResourceInfo::~RewriteResourceInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.RewriteResourceInfo)
  SharedDtor();
}

void RewriteResourceInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RewriteResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewriteResourceInfo& RewriteResourceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

RewriteResourceInfo* RewriteResourceInfo::default_instance_ = NULL;

RewriteResourceInfo* RewriteResourceInfo::New(::google::protobuf::Arena* arena) const {
  RewriteResourceInfo* n = new RewriteResourceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RewriteResourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.RewriteResourceInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RewriteResourceInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RewriteResourceInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(is_inlined_, is_blacklisted_);
    ZR_(original_size_, is_recompressed_);
    original_resource_url_index_ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RewriteResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRewriteResourceInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.RewriteResourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_inlined = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inlined_)));
          set_has_is_inlined();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_critical;
        break;
      }

      // optional bool is_critical = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_is_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_critical_)));
          set_has_is_critical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_pagespeed_no_defer;
        break;
      }

      // optional bool has_pagespeed_no_defer = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_has_pagespeed_no_defer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pagespeed_no_defer_)));
          set_has_has_pagespeed_no_defer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_blacklisted;
        break;
      }

      // optional bool is_blacklisted = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_is_blacklisted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blacklisted_)));
          set_has_is_blacklisted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_original_resource_url_index;
        break;
      }

      // optional int32 original_resource_url_index = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_original_resource_url_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_resource_url_index_)));
          set_has_original_resource_url_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_original_size;
        break;
      }

      // optional int32 original_size = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_original_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_size_)));
          set_has_original_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_optimized_size;
        break;
      }

      // optional int32 optimized_size = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_optimized_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optimized_size_)));
          set_has_optimized_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_recompressed;
        break;
      }

      // optional bool is_recompressed = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_is_recompressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recompressed_)));
          set_has_is_recompressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.RewriteResourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.RewriteResourceInfo)
  return false;
#undef DO_
}

void RewriteResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.RewriteResourceInfo)
  // optional bool is_inlined = 1 [default = false];
  if (has_is_inlined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_inlined(), output);
  }

  // optional bool is_critical = 2 [default = false];
  if (has_is_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_critical(), output);
  }

  // optional bool has_pagespeed_no_defer = 3 [default = false];
  if (has_has_pagespeed_no_defer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_pagespeed_no_defer(), output);
  }

  // optional bool is_blacklisted = 4 [default = false];
  if (has_is_blacklisted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_blacklisted(), output);
  }

  // optional int32 original_resource_url_index = 5 [default = -1];
  if (has_original_resource_url_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->original_resource_url_index(), output);
  }

  // optional int32 original_size = 6 [default = 0];
  if (has_original_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->original_size(), output);
  }

  // optional int32 optimized_size = 7 [default = 0];
  if (has_optimized_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->optimized_size(), output);
  }

  // optional bool is_recompressed = 8 [default = false];
  if (has_is_recompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_recompressed(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.RewriteResourceInfo)
}

int RewriteResourceInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.RewriteResourceInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool is_inlined = 1 [default = false];
    if (has_is_inlined()) {
      total_size += 1 + 1;
    }

    // optional bool is_critical = 2 [default = false];
    if (has_is_critical()) {
      total_size += 1 + 1;
    }

    // optional bool has_pagespeed_no_defer = 3 [default = false];
    if (has_has_pagespeed_no_defer()) {
      total_size += 1 + 1;
    }

    // optional bool is_blacklisted = 4 [default = false];
    if (has_is_blacklisted()) {
      total_size += 1 + 1;
    }

    // optional int32 original_resource_url_index = 5 [default = -1];
    if (has_original_resource_url_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_resource_url_index());
    }

    // optional int32 original_size = 6 [default = 0];
    if (has_original_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_size());
    }

    // optional int32 optimized_size = 7 [default = 0];
    if (has_optimized_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optimized_size());
    }

    // optional bool is_recompressed = 8 [default = false];
    if (has_is_recompressed()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriteResourceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewriteResourceInfo*>(&from));
}

void RewriteResourceInfo::MergeFrom(const RewriteResourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.RewriteResourceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_inlined()) {
      set_is_inlined(from.is_inlined());
    }
    if (from.has_is_critical()) {
      set_is_critical(from.is_critical());
    }
    if (from.has_has_pagespeed_no_defer()) {
      set_has_pagespeed_no_defer(from.has_pagespeed_no_defer());
    }
    if (from.has_is_blacklisted()) {
      set_is_blacklisted(from.is_blacklisted());
    }
    if (from.has_original_resource_url_index()) {
      set_original_resource_url_index(from.original_resource_url_index());
    }
    if (from.has_original_size()) {
      set_original_size(from.original_size());
    }
    if (from.has_optimized_size()) {
      set_optimized_size(from.optimized_size());
    }
    if (from.has_is_recompressed()) {
      set_is_recompressed(from.is_recompressed());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RewriteResourceInfo::CopyFrom(const RewriteResourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.RewriteResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteResourceInfo::IsInitialized() const {

  return true;
}

void RewriteResourceInfo::Swap(RewriteResourceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RewriteResourceInfo::InternalSwap(RewriteResourceInfo* other) {
  std::swap(is_inlined_, other->is_inlined_);
  std::swap(is_critical_, other->is_critical_);
  std::swap(has_pagespeed_no_defer_, other->has_pagespeed_no_defer_);
  std::swap(is_blacklisted_, other->is_blacklisted_);
  std::swap(original_resource_url_index_, other->original_resource_url_index_);
  std::swap(original_size_, other->original_size_);
  std::swap(optimized_size_, other->optimized_size_);
  std::swap(is_recompressed_, other->is_recompressed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RewriteResourceInfo::GetTypeName() const {
  return "net_instaweb.RewriteResourceInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriteResourceInfo

// optional bool is_inlined = 1 [default = false];
bool RewriteResourceInfo::has_is_inlined() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RewriteResourceInfo::set_has_is_inlined() {
  _has_bits_[0] |= 0x00000001u;
}
void RewriteResourceInfo::clear_has_is_inlined() {
  _has_bits_[0] &= ~0x00000001u;
}
void RewriteResourceInfo::clear_is_inlined() {
  is_inlined_ = false;
  clear_has_is_inlined();
}
 bool RewriteResourceInfo::is_inlined() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteResourceInfo.is_inlined)
  return is_inlined_;
}
 void RewriteResourceInfo::set_is_inlined(bool value) {
  set_has_is_inlined();
  is_inlined_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteResourceInfo.is_inlined)
}

// optional bool is_critical = 2 [default = false];
bool RewriteResourceInfo::has_is_critical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RewriteResourceInfo::set_has_is_critical() {
  _has_bits_[0] |= 0x00000002u;
}
void RewriteResourceInfo::clear_has_is_critical() {
  _has_bits_[0] &= ~0x00000002u;
}
void RewriteResourceInfo::clear_is_critical() {
  is_critical_ = false;
  clear_has_is_critical();
}
 bool RewriteResourceInfo::is_critical() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteResourceInfo.is_critical)
  return is_critical_;
}
 void RewriteResourceInfo::set_is_critical(bool value) {
  set_has_is_critical();
  is_critical_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteResourceInfo.is_critical)
}

// optional bool has_pagespeed_no_defer = 3 [default = false];
bool RewriteResourceInfo::has_has_pagespeed_no_defer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RewriteResourceInfo::set_has_has_pagespeed_no_defer() {
  _has_bits_[0] |= 0x00000004u;
}
void RewriteResourceInfo::clear_has_has_pagespeed_no_defer() {
  _has_bits_[0] &= ~0x00000004u;
}
void RewriteResourceInfo::clear_has_pagespeed_no_defer() {
  has_pagespeed_no_defer_ = false;
  clear_has_has_pagespeed_no_defer();
}
 bool RewriteResourceInfo::has_pagespeed_no_defer() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteResourceInfo.has_pagespeed_no_defer)
  return has_pagespeed_no_defer_;
}
 void RewriteResourceInfo::set_has_pagespeed_no_defer(bool value) {
  set_has_has_pagespeed_no_defer();
  has_pagespeed_no_defer_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteResourceInfo.has_pagespeed_no_defer)
}

// optional bool is_blacklisted = 4 [default = false];
bool RewriteResourceInfo::has_is_blacklisted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RewriteResourceInfo::set_has_is_blacklisted() {
  _has_bits_[0] |= 0x00000008u;
}
void RewriteResourceInfo::clear_has_is_blacklisted() {
  _has_bits_[0] &= ~0x00000008u;
}
void RewriteResourceInfo::clear_is_blacklisted() {
  is_blacklisted_ = false;
  clear_has_is_blacklisted();
}
 bool RewriteResourceInfo::is_blacklisted() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteResourceInfo.is_blacklisted)
  return is_blacklisted_;
}
 void RewriteResourceInfo::set_is_blacklisted(bool value) {
  set_has_is_blacklisted();
  is_blacklisted_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteResourceInfo.is_blacklisted)
}

// optional int32 original_resource_url_index = 5 [default = -1];
bool RewriteResourceInfo::has_original_resource_url_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RewriteResourceInfo::set_has_original_resource_url_index() {
  _has_bits_[0] |= 0x00000010u;
}
void RewriteResourceInfo::clear_has_original_resource_url_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void RewriteResourceInfo::clear_original_resource_url_index() {
  original_resource_url_index_ = -1;
  clear_has_original_resource_url_index();
}
 ::google::protobuf::int32 RewriteResourceInfo::original_resource_url_index() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteResourceInfo.original_resource_url_index)
  return original_resource_url_index_;
}
 void RewriteResourceInfo::set_original_resource_url_index(::google::protobuf::int32 value) {
  set_has_original_resource_url_index();
  original_resource_url_index_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteResourceInfo.original_resource_url_index)
}

// optional int32 original_size = 6 [default = 0];
bool RewriteResourceInfo::has_original_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RewriteResourceInfo::set_has_original_size() {
  _has_bits_[0] |= 0x00000020u;
}
void RewriteResourceInfo::clear_has_original_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void RewriteResourceInfo::clear_original_size() {
  original_size_ = 0;
  clear_has_original_size();
}
 ::google::protobuf::int32 RewriteResourceInfo::original_size() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteResourceInfo.original_size)
  return original_size_;
}
 void RewriteResourceInfo::set_original_size(::google::protobuf::int32 value) {
  set_has_original_size();
  original_size_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteResourceInfo.original_size)
}

// optional int32 optimized_size = 7 [default = 0];
bool RewriteResourceInfo::has_optimized_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RewriteResourceInfo::set_has_optimized_size() {
  _has_bits_[0] |= 0x00000040u;
}
void RewriteResourceInfo::clear_has_optimized_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void RewriteResourceInfo::clear_optimized_size() {
  optimized_size_ = 0;
  clear_has_optimized_size();
}
 ::google::protobuf::int32 RewriteResourceInfo::optimized_size() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteResourceInfo.optimized_size)
  return optimized_size_;
}
 void RewriteResourceInfo::set_optimized_size(::google::protobuf::int32 value) {
  set_has_optimized_size();
  optimized_size_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteResourceInfo.optimized_size)
}

// optional bool is_recompressed = 8 [default = false];
bool RewriteResourceInfo::has_is_recompressed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RewriteResourceInfo::set_has_is_recompressed() {
  _has_bits_[0] |= 0x00000080u;
}
void RewriteResourceInfo::clear_has_is_recompressed() {
  _has_bits_[0] &= ~0x00000080u;
}
void RewriteResourceInfo::clear_is_recompressed() {
  is_recompressed_ = false;
  clear_has_is_recompressed();
}
 bool RewriteResourceInfo::is_recompressed() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteResourceInfo.is_recompressed)
  return is_recompressed_;
}
 void RewriteResourceInfo::set_is_recompressed(bool value) {
  set_has_is_recompressed();
  is_recompressed_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteResourceInfo.is_recompressed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForImageRewriteResourceInfo(
    ImageRewriteResourceInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageRewriteResourceInfo::kIsLowResSrcInsertedFieldNumber;
const int ImageRewriteResourceInfo::kLowResSizeFieldNumber;
const int ImageRewriteResourceInfo::kOriginalImageTypeFieldNumber;
const int ImageRewriteResourceInfo::kOptimizedImageTypeFieldNumber;
const int ImageRewriteResourceInfo::kIsResizedFieldNumber;
const int ImageRewriteResourceInfo::kOriginalHeightFieldNumber;
const int ImageRewriteResourceInfo::kOriginalWidthFieldNumber;
const int ImageRewriteResourceInfo::kIsResizedUsingRenderedDimensionsFieldNumber;
const int ImageRewriteResourceInfo::kResizedHeightFieldNumber;
const int ImageRewriteResourceInfo::kResizedWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageRewriteResourceInfo::ImageRewriteResourceInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.ImageRewriteResourceInfo)
}

void ImageRewriteResourceInfo::InitAsDefaultInstance() {
}

ImageRewriteResourceInfo::ImageRewriteResourceInfo(const ImageRewriteResourceInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.ImageRewriteResourceInfo)
}

void ImageRewriteResourceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_low_res_src_inserted_ = false;
  low_res_size_ = 0;
  original_image_type_ = 0;
  optimized_image_type_ = 0;
  is_resized_ = false;
  original_height_ = 0;
  original_width_ = 0;
  is_resized_using_rendered_dimensions_ = false;
  resized_height_ = 0;
  resized_width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageRewriteResourceInfo::~ImageRewriteResourceInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.ImageRewriteResourceInfo)
  SharedDtor();
}

void ImageRewriteResourceInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ImageRewriteResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageRewriteResourceInfo& ImageRewriteResourceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

ImageRewriteResourceInfo* ImageRewriteResourceInfo::default_instance_ = NULL;

ImageRewriteResourceInfo* ImageRewriteResourceInfo::New(::google::protobuf::Arena* arena) const {
  ImageRewriteResourceInfo* n = new ImageRewriteResourceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageRewriteResourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.ImageRewriteResourceInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageRewriteResourceInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageRewriteResourceInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(low_res_size_, original_width_);
  }
  ZR_(resized_height_, resized_width_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImageRewriteResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForImageRewriteResourceInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.ImageRewriteResourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_low_res_src_inserted = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_low_res_src_inserted_)));
          set_has_is_low_res_src_inserted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_low_res_size;
        break;
      }

      // optional int32 low_res_size = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_low_res_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_res_size_)));
          set_has_low_res_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_original_image_type;
        break;
      }

      // optional .net_instaweb.ImageType original_image_type = 3 [default = IMAGE_UNKNOWN];
      case 3: {
        if (tag == 24) {
         parse_original_image_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::ImageType_IsValid(value)) {
            set_original_image_type(static_cast< ::net_instaweb::ImageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_optimized_image_type;
        break;
      }

      // optional .net_instaweb.ImageType optimized_image_type = 4 [default = IMAGE_UNKNOWN];
      case 4: {
        if (tag == 32) {
         parse_optimized_image_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::ImageType_IsValid(value)) {
            set_optimized_image_type(static_cast< ::net_instaweb::ImageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_resized;
        break;
      }

      // optional bool is_resized = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_is_resized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_resized_)));
          set_has_is_resized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_original_height;
        break;
      }

      // optional int32 original_height = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_original_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_height_)));
          set_has_original_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_original_width;
        break;
      }

      // optional int32 original_width = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_original_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_width_)));
          set_has_original_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_resized_using_rendered_dimensions;
        break;
      }

      // optional bool is_resized_using_rendered_dimensions = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_is_resized_using_rendered_dimensions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_resized_using_rendered_dimensions_)));
          set_has_is_resized_using_rendered_dimensions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_resized_height;
        break;
      }

      // optional int32 resized_height = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_resized_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resized_height_)));
          set_has_resized_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_resized_width;
        break;
      }

      // optional int32 resized_width = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_resized_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resized_width_)));
          set_has_resized_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.ImageRewriteResourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.ImageRewriteResourceInfo)
  return false;
#undef DO_
}

void ImageRewriteResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.ImageRewriteResourceInfo)
  // optional bool is_low_res_src_inserted = 1 [default = false];
  if (has_is_low_res_src_inserted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_low_res_src_inserted(), output);
  }

  // optional int32 low_res_size = 2 [default = 0];
  if (has_low_res_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->low_res_size(), output);
  }

  // optional .net_instaweb.ImageType original_image_type = 3 [default = IMAGE_UNKNOWN];
  if (has_original_image_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->original_image_type(), output);
  }

  // optional .net_instaweb.ImageType optimized_image_type = 4 [default = IMAGE_UNKNOWN];
  if (has_optimized_image_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->optimized_image_type(), output);
  }

  // optional bool is_resized = 5 [default = false];
  if (has_is_resized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_resized(), output);
  }

  // optional int32 original_height = 6 [default = 0];
  if (has_original_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->original_height(), output);
  }

  // optional int32 original_width = 7 [default = 0];
  if (has_original_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->original_width(), output);
  }

  // optional bool is_resized_using_rendered_dimensions = 8 [default = false];
  if (has_is_resized_using_rendered_dimensions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_resized_using_rendered_dimensions(), output);
  }

  // optional int32 resized_height = 9 [default = 0];
  if (has_resized_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->resized_height(), output);
  }

  // optional int32 resized_width = 10 [default = 0];
  if (has_resized_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->resized_width(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.ImageRewriteResourceInfo)
}

int ImageRewriteResourceInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.ImageRewriteResourceInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool is_low_res_src_inserted = 1 [default = false];
    if (has_is_low_res_src_inserted()) {
      total_size += 1 + 1;
    }

    // optional int32 low_res_size = 2 [default = 0];
    if (has_low_res_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low_res_size());
    }

    // optional .net_instaweb.ImageType original_image_type = 3 [default = IMAGE_UNKNOWN];
    if (has_original_image_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->original_image_type());
    }

    // optional .net_instaweb.ImageType optimized_image_type = 4 [default = IMAGE_UNKNOWN];
    if (has_optimized_image_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optimized_image_type());
    }

    // optional bool is_resized = 5 [default = false];
    if (has_is_resized()) {
      total_size += 1 + 1;
    }

    // optional int32 original_height = 6 [default = 0];
    if (has_original_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_height());
    }

    // optional int32 original_width = 7 [default = 0];
    if (has_original_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_width());
    }

    // optional bool is_resized_using_rendered_dimensions = 8 [default = false];
    if (has_is_resized_using_rendered_dimensions()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 resized_height = 9 [default = 0];
    if (has_resized_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resized_height());
    }

    // optional int32 resized_width = 10 [default = 0];
    if (has_resized_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resized_width());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageRewriteResourceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageRewriteResourceInfo*>(&from));
}

void ImageRewriteResourceInfo::MergeFrom(const ImageRewriteResourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.ImageRewriteResourceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_low_res_src_inserted()) {
      set_is_low_res_src_inserted(from.is_low_res_src_inserted());
    }
    if (from.has_low_res_size()) {
      set_low_res_size(from.low_res_size());
    }
    if (from.has_original_image_type()) {
      set_original_image_type(from.original_image_type());
    }
    if (from.has_optimized_image_type()) {
      set_optimized_image_type(from.optimized_image_type());
    }
    if (from.has_is_resized()) {
      set_is_resized(from.is_resized());
    }
    if (from.has_original_height()) {
      set_original_height(from.original_height());
    }
    if (from.has_original_width()) {
      set_original_width(from.original_width());
    }
    if (from.has_is_resized_using_rendered_dimensions()) {
      set_is_resized_using_rendered_dimensions(from.is_resized_using_rendered_dimensions());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resized_height()) {
      set_resized_height(from.resized_height());
    }
    if (from.has_resized_width()) {
      set_resized_width(from.resized_width());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ImageRewriteResourceInfo::CopyFrom(const ImageRewriteResourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.ImageRewriteResourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRewriteResourceInfo::IsInitialized() const {

  return true;
}

void ImageRewriteResourceInfo::Swap(ImageRewriteResourceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageRewriteResourceInfo::InternalSwap(ImageRewriteResourceInfo* other) {
  std::swap(is_low_res_src_inserted_, other->is_low_res_src_inserted_);
  std::swap(low_res_size_, other->low_res_size_);
  std::swap(original_image_type_, other->original_image_type_);
  std::swap(optimized_image_type_, other->optimized_image_type_);
  std::swap(is_resized_, other->is_resized_);
  std::swap(original_height_, other->original_height_);
  std::swap(original_width_, other->original_width_);
  std::swap(is_resized_using_rendered_dimensions_, other->is_resized_using_rendered_dimensions_);
  std::swap(resized_height_, other->resized_height_);
  std::swap(resized_width_, other->resized_width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageRewriteResourceInfo::GetTypeName() const {
  return "net_instaweb.ImageRewriteResourceInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageRewriteResourceInfo

// optional bool is_low_res_src_inserted = 1 [default = false];
bool ImageRewriteResourceInfo::has_is_low_res_src_inserted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageRewriteResourceInfo::set_has_is_low_res_src_inserted() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageRewriteResourceInfo::clear_has_is_low_res_src_inserted() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageRewriteResourceInfo::clear_is_low_res_src_inserted() {
  is_low_res_src_inserted_ = false;
  clear_has_is_low_res_src_inserted();
}
 bool ImageRewriteResourceInfo::is_low_res_src_inserted() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.is_low_res_src_inserted)
  return is_low_res_src_inserted_;
}
 void ImageRewriteResourceInfo::set_is_low_res_src_inserted(bool value) {
  set_has_is_low_res_src_inserted();
  is_low_res_src_inserted_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.is_low_res_src_inserted)
}

// optional int32 low_res_size = 2 [default = 0];
bool ImageRewriteResourceInfo::has_low_res_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageRewriteResourceInfo::set_has_low_res_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageRewriteResourceInfo::clear_has_low_res_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageRewriteResourceInfo::clear_low_res_size() {
  low_res_size_ = 0;
  clear_has_low_res_size();
}
 ::google::protobuf::int32 ImageRewriteResourceInfo::low_res_size() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.low_res_size)
  return low_res_size_;
}
 void ImageRewriteResourceInfo::set_low_res_size(::google::protobuf::int32 value) {
  set_has_low_res_size();
  low_res_size_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.low_res_size)
}

// optional .net_instaweb.ImageType original_image_type = 3 [default = IMAGE_UNKNOWN];
bool ImageRewriteResourceInfo::has_original_image_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageRewriteResourceInfo::set_has_original_image_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageRewriteResourceInfo::clear_has_original_image_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageRewriteResourceInfo::clear_original_image_type() {
  original_image_type_ = 0;
  clear_has_original_image_type();
}
 ::net_instaweb::ImageType ImageRewriteResourceInfo::original_image_type() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.original_image_type)
  return static_cast< ::net_instaweb::ImageType >(original_image_type_);
}
 void ImageRewriteResourceInfo::set_original_image_type(::net_instaweb::ImageType value) {
  assert(::net_instaweb::ImageType_IsValid(value));
  set_has_original_image_type();
  original_image_type_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.original_image_type)
}

// optional .net_instaweb.ImageType optimized_image_type = 4 [default = IMAGE_UNKNOWN];
bool ImageRewriteResourceInfo::has_optimized_image_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageRewriteResourceInfo::set_has_optimized_image_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageRewriteResourceInfo::clear_has_optimized_image_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageRewriteResourceInfo::clear_optimized_image_type() {
  optimized_image_type_ = 0;
  clear_has_optimized_image_type();
}
 ::net_instaweb::ImageType ImageRewriteResourceInfo::optimized_image_type() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.optimized_image_type)
  return static_cast< ::net_instaweb::ImageType >(optimized_image_type_);
}
 void ImageRewriteResourceInfo::set_optimized_image_type(::net_instaweb::ImageType value) {
  assert(::net_instaweb::ImageType_IsValid(value));
  set_has_optimized_image_type();
  optimized_image_type_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.optimized_image_type)
}

// optional bool is_resized = 5 [default = false];
bool ImageRewriteResourceInfo::has_is_resized() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageRewriteResourceInfo::set_has_is_resized() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageRewriteResourceInfo::clear_has_is_resized() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageRewriteResourceInfo::clear_is_resized() {
  is_resized_ = false;
  clear_has_is_resized();
}
 bool ImageRewriteResourceInfo::is_resized() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.is_resized)
  return is_resized_;
}
 void ImageRewriteResourceInfo::set_is_resized(bool value) {
  set_has_is_resized();
  is_resized_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.is_resized)
}

// optional int32 original_height = 6 [default = 0];
bool ImageRewriteResourceInfo::has_original_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageRewriteResourceInfo::set_has_original_height() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageRewriteResourceInfo::clear_has_original_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageRewriteResourceInfo::clear_original_height() {
  original_height_ = 0;
  clear_has_original_height();
}
 ::google::protobuf::int32 ImageRewriteResourceInfo::original_height() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.original_height)
  return original_height_;
}
 void ImageRewriteResourceInfo::set_original_height(::google::protobuf::int32 value) {
  set_has_original_height();
  original_height_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.original_height)
}

// optional int32 original_width = 7 [default = 0];
bool ImageRewriteResourceInfo::has_original_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageRewriteResourceInfo::set_has_original_width() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageRewriteResourceInfo::clear_has_original_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageRewriteResourceInfo::clear_original_width() {
  original_width_ = 0;
  clear_has_original_width();
}
 ::google::protobuf::int32 ImageRewriteResourceInfo::original_width() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.original_width)
  return original_width_;
}
 void ImageRewriteResourceInfo::set_original_width(::google::protobuf::int32 value) {
  set_has_original_width();
  original_width_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.original_width)
}

// optional bool is_resized_using_rendered_dimensions = 8 [default = false];
bool ImageRewriteResourceInfo::has_is_resized_using_rendered_dimensions() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageRewriteResourceInfo::set_has_is_resized_using_rendered_dimensions() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageRewriteResourceInfo::clear_has_is_resized_using_rendered_dimensions() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageRewriteResourceInfo::clear_is_resized_using_rendered_dimensions() {
  is_resized_using_rendered_dimensions_ = false;
  clear_has_is_resized_using_rendered_dimensions();
}
 bool ImageRewriteResourceInfo::is_resized_using_rendered_dimensions() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.is_resized_using_rendered_dimensions)
  return is_resized_using_rendered_dimensions_;
}
 void ImageRewriteResourceInfo::set_is_resized_using_rendered_dimensions(bool value) {
  set_has_is_resized_using_rendered_dimensions();
  is_resized_using_rendered_dimensions_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.is_resized_using_rendered_dimensions)
}

// optional int32 resized_height = 9 [default = 0];
bool ImageRewriteResourceInfo::has_resized_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageRewriteResourceInfo::set_has_resized_height() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageRewriteResourceInfo::clear_has_resized_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageRewriteResourceInfo::clear_resized_height() {
  resized_height_ = 0;
  clear_has_resized_height();
}
 ::google::protobuf::int32 ImageRewriteResourceInfo::resized_height() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.resized_height)
  return resized_height_;
}
 void ImageRewriteResourceInfo::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.resized_height)
}

// optional int32 resized_width = 10 [default = 0];
bool ImageRewriteResourceInfo::has_resized_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageRewriteResourceInfo::set_has_resized_width() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageRewriteResourceInfo::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageRewriteResourceInfo::clear_resized_width() {
  resized_width_ = 0;
  clear_has_resized_width();
}
 ::google::protobuf::int32 ImageRewriteResourceInfo::resized_width() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageRewriteResourceInfo.resized_width)
  return resized_width_;
}
 void ImageRewriteResourceInfo::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageRewriteResourceInfo.resized_width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRewriterInfo(
    RewriterInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterInfo::kIdFieldNumber;
const int RewriterInfo::kStatusFieldNumber;
const int RewriterInfo::kFlushEarlyResourceInfoFieldNumber;
const int RewriterInfo::kRewriteResourceInfoFieldNumber;
const int RewriterInfo::kImageRewriteResourceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterInfo::RewriterInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.RewriterInfo)
}

void RewriterInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  flush_early_resource_info_ = const_cast< ::net_instaweb::FlushEarlyResourceInfo*>(
      ::net_instaweb::FlushEarlyResourceInfo::internal_default_instance());
#else
  flush_early_resource_info_ = const_cast< ::net_instaweb::FlushEarlyResourceInfo*>(&::net_instaweb::FlushEarlyResourceInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rewrite_resource_info_ = const_cast< ::net_instaweb::RewriteResourceInfo*>(
      ::net_instaweb::RewriteResourceInfo::internal_default_instance());
#else
  rewrite_resource_info_ = const_cast< ::net_instaweb::RewriteResourceInfo*>(&::net_instaweb::RewriteResourceInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  image_rewrite_resource_info_ = const_cast< ::net_instaweb::ImageRewriteResourceInfo*>(
      ::net_instaweb::ImageRewriteResourceInfo::internal_default_instance());
#else
  image_rewrite_resource_info_ = const_cast< ::net_instaweb::ImageRewriteResourceInfo*>(&::net_instaweb::ImageRewriteResourceInfo::default_instance());
#endif
}

RewriterInfo::RewriterInfo(const RewriterInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.RewriterInfo)
}

void RewriterInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  flush_early_resource_info_ = NULL;
  rewrite_resource_info_ = NULL;
  image_rewrite_resource_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewriterInfo::~RewriterInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.RewriterInfo)
  SharedDtor();
}

void RewriterInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete flush_early_resource_info_;
    delete rewrite_resource_info_;
    delete image_rewrite_resource_info_;
  }
}

void RewriterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewriterInfo& RewriterInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

RewriterInfo* RewriterInfo::default_instance_ = NULL;

RewriterInfo* RewriterInfo::New(::google::protobuf::Arena* arena) const {
  RewriterInfo* n = new RewriterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RewriterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.RewriterInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
    if (has_flush_early_resource_info()) {
      if (flush_early_resource_info_ != NULL) flush_early_resource_info_->::net_instaweb::FlushEarlyResourceInfo::Clear();
    }
    if (has_rewrite_resource_info()) {
      if (rewrite_resource_info_ != NULL) rewrite_resource_info_->::net_instaweb::RewriteResourceInfo::Clear();
    }
    if (has_image_rewrite_resource_info()) {
      if (image_rewrite_resource_info_ != NULL) image_rewrite_resource_info_->::net_instaweb::ImageRewriteResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RewriterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRewriterInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.RewriterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .net_instaweb.RewriterApplication.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::RewriterApplication_Status_IsValid(value)) {
            set_status(static_cast< ::net_instaweb::RewriterApplication_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_flush_early_resource_info;
        break;
      }

      // optional .net_instaweb.FlushEarlyResourceInfo flush_early_resource_info = 3;
      case 3: {
        if (tag == 26) {
         parse_flush_early_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush_early_resource_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewrite_resource_info;
        break;
      }

      // optional .net_instaweb.RewriteResourceInfo rewrite_resource_info = 4;
      case 4: {
        if (tag == 34) {
         parse_rewrite_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewrite_resource_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_rewrite_resource_info;
        break;
      }

      // optional .net_instaweb.ImageRewriteResourceInfo image_rewrite_resource_info = 5;
      case 5: {
        if (tag == 42) {
         parse_image_rewrite_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_rewrite_resource_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.RewriterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.RewriterInfo)
  return false;
#undef DO_
}

void RewriterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.RewriterInfo)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .net_instaweb.RewriterApplication.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .net_instaweb.FlushEarlyResourceInfo flush_early_resource_info = 3;
  if (has_flush_early_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->flush_early_resource_info_, output);
  }

  // optional .net_instaweb.RewriteResourceInfo rewrite_resource_info = 4;
  if (has_rewrite_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->rewrite_resource_info_, output);
  }

  // optional .net_instaweb.ImageRewriteResourceInfo image_rewrite_resource_info = 5;
  if (has_image_rewrite_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->image_rewrite_resource_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.RewriterInfo)
}

int RewriterInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.RewriterInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .net_instaweb.RewriterApplication.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .net_instaweb.FlushEarlyResourceInfo flush_early_resource_info = 3;
    if (has_flush_early_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flush_early_resource_info_);
    }

    // optional .net_instaweb.RewriteResourceInfo rewrite_resource_info = 4;
    if (has_rewrite_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rewrite_resource_info_);
    }

    // optional .net_instaweb.ImageRewriteResourceInfo image_rewrite_resource_info = 5;
    if (has_image_rewrite_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_rewrite_resource_info_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriterInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewriterInfo*>(&from));
}

void RewriterInfo::MergeFrom(const RewriterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.RewriterInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_flush_early_resource_info()) {
      mutable_flush_early_resource_info()->::net_instaweb::FlushEarlyResourceInfo::MergeFrom(from.flush_early_resource_info());
    }
    if (from.has_rewrite_resource_info()) {
      mutable_rewrite_resource_info()->::net_instaweb::RewriteResourceInfo::MergeFrom(from.rewrite_resource_info());
    }
    if (from.has_image_rewrite_resource_info()) {
      mutable_image_rewrite_resource_info()->::net_instaweb::ImageRewriteResourceInfo::MergeFrom(from.image_rewrite_resource_info());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RewriterInfo::CopyFrom(const RewriterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.RewriterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterInfo::IsInitialized() const {

  return true;
}

void RewriterInfo::Swap(RewriterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RewriterInfo::InternalSwap(RewriterInfo* other) {
  id_.Swap(&other->id_);
  std::swap(status_, other->status_);
  std::swap(flush_early_resource_info_, other->flush_early_resource_info_);
  std::swap(rewrite_resource_info_, other->rewrite_resource_info_);
  std::swap(image_rewrite_resource_info_, other->image_rewrite_resource_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RewriterInfo::GetTypeName() const {
  return "net_instaweb.RewriterInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriterInfo

// optional string id = 1;
bool RewriterInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RewriterInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RewriterInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RewriterInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& RewriterInfo::id() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriterInfo.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RewriterInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.RewriterInfo.id)
}
 void RewriterInfo::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.RewriterInfo.id)
}
 void RewriterInfo::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.RewriterInfo.id)
}
 ::std::string* RewriterInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:net_instaweb.RewriterInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RewriterInfo::release_id() {
  // @@protoc_insertion_point(field_release:net_instaweb.RewriterInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RewriterInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.RewriterInfo.id)
}

// optional .net_instaweb.RewriterApplication.Status status = 2;
bool RewriterInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RewriterInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void RewriterInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void RewriterInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::net_instaweb::RewriterApplication_Status RewriterInfo::status() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriterInfo.status)
  return static_cast< ::net_instaweb::RewriterApplication_Status >(status_);
}
 void RewriterInfo::set_status(::net_instaweb::RewriterApplication_Status value) {
  assert(::net_instaweb::RewriterApplication_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriterInfo.status)
}

// optional .net_instaweb.FlushEarlyResourceInfo flush_early_resource_info = 3;
bool RewriterInfo::has_flush_early_resource_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RewriterInfo::set_has_flush_early_resource_info() {
  _has_bits_[0] |= 0x00000004u;
}
void RewriterInfo::clear_has_flush_early_resource_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void RewriterInfo::clear_flush_early_resource_info() {
  if (flush_early_resource_info_ != NULL) flush_early_resource_info_->::net_instaweb::FlushEarlyResourceInfo::Clear();
  clear_has_flush_early_resource_info();
}
const ::net_instaweb::FlushEarlyResourceInfo& RewriterInfo::flush_early_resource_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriterInfo.flush_early_resource_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return flush_early_resource_info_ != NULL ? *flush_early_resource_info_ : *default_instance().flush_early_resource_info_;
#else
  return flush_early_resource_info_ != NULL ? *flush_early_resource_info_ : *default_instance_->flush_early_resource_info_;
#endif
}
::net_instaweb::FlushEarlyResourceInfo* RewriterInfo::mutable_flush_early_resource_info() {
  set_has_flush_early_resource_info();
  if (flush_early_resource_info_ == NULL) {
    flush_early_resource_info_ = new ::net_instaweb::FlushEarlyResourceInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.RewriterInfo.flush_early_resource_info)
  return flush_early_resource_info_;
}
::net_instaweb::FlushEarlyResourceInfo* RewriterInfo::release_flush_early_resource_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.RewriterInfo.flush_early_resource_info)
  clear_has_flush_early_resource_info();
  ::net_instaweb::FlushEarlyResourceInfo* temp = flush_early_resource_info_;
  flush_early_resource_info_ = NULL;
  return temp;
}
void RewriterInfo::set_allocated_flush_early_resource_info(::net_instaweb::FlushEarlyResourceInfo* flush_early_resource_info) {
  delete flush_early_resource_info_;
  flush_early_resource_info_ = flush_early_resource_info;
  if (flush_early_resource_info) {
    set_has_flush_early_resource_info();
  } else {
    clear_has_flush_early_resource_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.RewriterInfo.flush_early_resource_info)
}

// optional .net_instaweb.RewriteResourceInfo rewrite_resource_info = 4;
bool RewriterInfo::has_rewrite_resource_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RewriterInfo::set_has_rewrite_resource_info() {
  _has_bits_[0] |= 0x00000008u;
}
void RewriterInfo::clear_has_rewrite_resource_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void RewriterInfo::clear_rewrite_resource_info() {
  if (rewrite_resource_info_ != NULL) rewrite_resource_info_->::net_instaweb::RewriteResourceInfo::Clear();
  clear_has_rewrite_resource_info();
}
const ::net_instaweb::RewriteResourceInfo& RewriterInfo::rewrite_resource_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriterInfo.rewrite_resource_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rewrite_resource_info_ != NULL ? *rewrite_resource_info_ : *default_instance().rewrite_resource_info_;
#else
  return rewrite_resource_info_ != NULL ? *rewrite_resource_info_ : *default_instance_->rewrite_resource_info_;
#endif
}
::net_instaweb::RewriteResourceInfo* RewriterInfo::mutable_rewrite_resource_info() {
  set_has_rewrite_resource_info();
  if (rewrite_resource_info_ == NULL) {
    rewrite_resource_info_ = new ::net_instaweb::RewriteResourceInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.RewriterInfo.rewrite_resource_info)
  return rewrite_resource_info_;
}
::net_instaweb::RewriteResourceInfo* RewriterInfo::release_rewrite_resource_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.RewriterInfo.rewrite_resource_info)
  clear_has_rewrite_resource_info();
  ::net_instaweb::RewriteResourceInfo* temp = rewrite_resource_info_;
  rewrite_resource_info_ = NULL;
  return temp;
}
void RewriterInfo::set_allocated_rewrite_resource_info(::net_instaweb::RewriteResourceInfo* rewrite_resource_info) {
  delete rewrite_resource_info_;
  rewrite_resource_info_ = rewrite_resource_info;
  if (rewrite_resource_info) {
    set_has_rewrite_resource_info();
  } else {
    clear_has_rewrite_resource_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.RewriterInfo.rewrite_resource_info)
}

// optional .net_instaweb.ImageRewriteResourceInfo image_rewrite_resource_info = 5;
bool RewriterInfo::has_image_rewrite_resource_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RewriterInfo::set_has_image_rewrite_resource_info() {
  _has_bits_[0] |= 0x00000010u;
}
void RewriterInfo::clear_has_image_rewrite_resource_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void RewriterInfo::clear_image_rewrite_resource_info() {
  if (image_rewrite_resource_info_ != NULL) image_rewrite_resource_info_->::net_instaweb::ImageRewriteResourceInfo::Clear();
  clear_has_image_rewrite_resource_info();
}
const ::net_instaweb::ImageRewriteResourceInfo& RewriterInfo::image_rewrite_resource_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriterInfo.image_rewrite_resource_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return image_rewrite_resource_info_ != NULL ? *image_rewrite_resource_info_ : *default_instance().image_rewrite_resource_info_;
#else
  return image_rewrite_resource_info_ != NULL ? *image_rewrite_resource_info_ : *default_instance_->image_rewrite_resource_info_;
#endif
}
::net_instaweb::ImageRewriteResourceInfo* RewriterInfo::mutable_image_rewrite_resource_info() {
  set_has_image_rewrite_resource_info();
  if (image_rewrite_resource_info_ == NULL) {
    image_rewrite_resource_info_ = new ::net_instaweb::ImageRewriteResourceInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.RewriterInfo.image_rewrite_resource_info)
  return image_rewrite_resource_info_;
}
::net_instaweb::ImageRewriteResourceInfo* RewriterInfo::release_image_rewrite_resource_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.RewriterInfo.image_rewrite_resource_info)
  clear_has_image_rewrite_resource_info();
  ::net_instaweb::ImageRewriteResourceInfo* temp = image_rewrite_resource_info_;
  image_rewrite_resource_info_ = NULL;
  return temp;
}
void RewriterInfo::set_allocated_image_rewrite_resource_info(::net_instaweb::ImageRewriteResourceInfo* image_rewrite_resource_info) {
  delete image_rewrite_resource_info_;
  image_rewrite_resource_info_ = image_rewrite_resource_info;
  if (image_rewrite_resource_info) {
    set_has_image_rewrite_resource_info();
  } else {
    clear_has_image_rewrite_resource_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.RewriterInfo.image_rewrite_resource_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForResourceUrlInfo(
    ResourceUrlInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceUrlInfo::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceUrlInfo::ResourceUrlInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.ResourceUrlInfo)
}

void ResourceUrlInfo::InitAsDefaultInstance() {
}

ResourceUrlInfo::ResourceUrlInfo(const ResourceUrlInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.ResourceUrlInfo)
}

void ResourceUrlInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceUrlInfo::~ResourceUrlInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.ResourceUrlInfo)
  SharedDtor();
}

void ResourceUrlInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResourceUrlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResourceUrlInfo& ResourceUrlInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

ResourceUrlInfo* ResourceUrlInfo::default_instance_ = NULL;

ResourceUrlInfo* ResourceUrlInfo::New(::google::protobuf::Arena* arena) const {
  ResourceUrlInfo* n = new ResourceUrlInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceUrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.ResourceUrlInfo)
  url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResourceUrlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForResourceUrlInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.ResourceUrlInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string url = 1;
      case 1: {
        if (tag == 10) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_url;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.ResourceUrlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.ResourceUrlInfo)
  return false;
#undef DO_
}

void ResourceUrlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.ResourceUrlInfo)
  // repeated string url = 1;
  for (int i = 0; i < this->url_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.ResourceUrlInfo)
}

int ResourceUrlInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.ResourceUrlInfo)
  int total_size = 0;

  // repeated string url = 1;
  total_size += 1 * this->url_size();
  for (int i = 0; i < this->url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceUrlInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResourceUrlInfo*>(&from));
}

void ResourceUrlInfo::MergeFrom(const ResourceUrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.ResourceUrlInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  url_.MergeFrom(from.url_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ResourceUrlInfo::CopyFrom(const ResourceUrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.ResourceUrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceUrlInfo::IsInitialized() const {

  return true;
}

void ResourceUrlInfo::Swap(ResourceUrlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceUrlInfo::InternalSwap(ResourceUrlInfo* other) {
  url_.UnsafeArenaSwap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ResourceUrlInfo::GetTypeName() const {
  return "net_instaweb.ResourceUrlInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceUrlInfo

// repeated string url = 1;
int ResourceUrlInfo::url_size() const {
  return url_.size();
}
void ResourceUrlInfo::clear_url() {
  url_.Clear();
}
 const ::std::string& ResourceUrlInfo::url(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.ResourceUrlInfo.url)
  return url_.Get(index);
}
 ::std::string* ResourceUrlInfo::mutable_url(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.ResourceUrlInfo.url)
  return url_.Mutable(index);
}
 void ResourceUrlInfo::set_url(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:net_instaweb.ResourceUrlInfo.url)
  url_.Mutable(index)->assign(value);
}
 void ResourceUrlInfo::set_url(int index, const char* value) {
  url_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:net_instaweb.ResourceUrlInfo.url)
}
 void ResourceUrlInfo::set_url(int index, const char* value, size_t size) {
  url_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.ResourceUrlInfo.url)
}
 ::std::string* ResourceUrlInfo::add_url() {
  // @@protoc_insertion_point(field_add_mutable:net_instaweb.ResourceUrlInfo.url)
  return url_.Add();
}
 void ResourceUrlInfo::add_url(const ::std::string& value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:net_instaweb.ResourceUrlInfo.url)
}
 void ResourceUrlInfo::add_url(const char* value) {
  url_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:net_instaweb.ResourceUrlInfo.url)
}
 void ResourceUrlInfo::add_url(const char* value, size_t size) {
  url_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:net_instaweb.ResourceUrlInfo.url)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResourceUrlInfo::url() const {
  // @@protoc_insertion_point(field_list:net_instaweb.ResourceUrlInfo.url)
  return url_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ResourceUrlInfo::mutable_url() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.ResourceUrlInfo.url)
  return &url_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForImageStats(
    ImageStats* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageStats::kNumImgTagsFieldNumber;
const int ImageStats::kNumInlinedImgTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageStats::ImageStats()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.ImageStats)
}

void ImageStats::InitAsDefaultInstance() {
}

ImageStats::ImageStats(const ImageStats& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.ImageStats)
}

void ImageStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_img_tags_ = 0;
  num_inlined_img_tags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageStats::~ImageStats() {
  // @@protoc_insertion_point(destructor:net_instaweb.ImageStats)
  SharedDtor();
}

void ImageStats::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ImageStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageStats& ImageStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

ImageStats* ImageStats::default_instance_ = NULL;

ImageStats* ImageStats::New(::google::protobuf::Arena* arena) const {
  ImageStats* n = new ImageStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageStats::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.ImageStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_img_tags_, num_inlined_img_tags_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImageStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForImageStats, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.ImageStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_img_tags = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_img_tags_)));
          set_has_num_img_tags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_inlined_img_tags;
        break;
      }

      // optional int32 num_inlined_img_tags = 2;
      case 2: {
        if (tag == 16) {
         parse_num_inlined_img_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_inlined_img_tags_)));
          set_has_num_inlined_img_tags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.ImageStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.ImageStats)
  return false;
#undef DO_
}

void ImageStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.ImageStats)
  // optional int32 num_img_tags = 1;
  if (has_num_img_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_img_tags(), output);
  }

  // optional int32 num_inlined_img_tags = 2;
  if (has_num_inlined_img_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_inlined_img_tags(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.ImageStats)
}

int ImageStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.ImageStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 num_img_tags = 1;
    if (has_num_img_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_img_tags());
    }

    // optional int32 num_inlined_img_tags = 2;
    if (has_num_inlined_img_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_inlined_img_tags());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageStats*>(&from));
}

void ImageStats::MergeFrom(const ImageStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.ImageStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_img_tags()) {
      set_num_img_tags(from.num_img_tags());
    }
    if (from.has_num_inlined_img_tags()) {
      set_num_inlined_img_tags(from.num_inlined_img_tags());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ImageStats::CopyFrom(const ImageStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.ImageStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageStats::IsInitialized() const {

  return true;
}

void ImageStats::Swap(ImageStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageStats::InternalSwap(ImageStats* other) {
  std::swap(num_img_tags_, other->num_img_tags_);
  std::swap(num_inlined_img_tags_, other->num_inlined_img_tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageStats::GetTypeName() const {
  return "net_instaweb.ImageStats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageStats

// optional int32 num_img_tags = 1;
bool ImageStats::has_num_img_tags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageStats::set_has_num_img_tags() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageStats::clear_has_num_img_tags() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageStats::clear_num_img_tags() {
  num_img_tags_ = 0;
  clear_has_num_img_tags();
}
 ::google::protobuf::int32 ImageStats::num_img_tags() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageStats.num_img_tags)
  return num_img_tags_;
}
 void ImageStats::set_num_img_tags(::google::protobuf::int32 value) {
  set_has_num_img_tags();
  num_img_tags_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageStats.num_img_tags)
}

// optional int32 num_inlined_img_tags = 2;
bool ImageStats::has_num_inlined_img_tags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageStats::set_has_num_inlined_img_tags() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageStats::clear_has_num_inlined_img_tags() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageStats::clear_num_inlined_img_tags() {
  num_inlined_img_tags_ = 0;
  clear_has_num_inlined_img_tags();
}
 ::google::protobuf::int32 ImageStats::num_inlined_img_tags() const {
  // @@protoc_insertion_point(field_get:net_instaweb.ImageStats.num_inlined_img_tags)
  return num_inlined_img_tags_;
}
 void ImageStats::set_num_inlined_img_tags(::google::protobuf::int32 value) {
  set_has_num_inlined_img_tags();
  num_inlined_img_tags_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.ImageStats.num_inlined_img_tags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRewriteStatusCount(
    RewriteStatusCount* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriteStatusCount::kApplicationStatusFieldNumber;
const int RewriteStatusCount::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriteStatusCount::RewriteStatusCount()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.RewriteStatusCount)
}

void RewriteStatusCount::InitAsDefaultInstance() {
}

RewriteStatusCount::RewriteStatusCount(const RewriteStatusCount& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.RewriteStatusCount)
}

void RewriteStatusCount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_status_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewriteStatusCount::~RewriteStatusCount() {
  // @@protoc_insertion_point(destructor:net_instaweb.RewriteStatusCount)
  SharedDtor();
}

void RewriteStatusCount::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RewriteStatusCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewriteStatusCount& RewriteStatusCount::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

RewriteStatusCount* RewriteStatusCount::default_instance_ = NULL;

RewriteStatusCount* RewriteStatusCount::New(::google::protobuf::Arena* arena) const {
  RewriteStatusCount* n = new RewriteStatusCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RewriteStatusCount::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.RewriteStatusCount)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RewriteStatusCount, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RewriteStatusCount*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(application_status_, count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RewriteStatusCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRewriteStatusCount, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.RewriteStatusCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net_instaweb.RewriterApplication.Status application_status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::RewriterApplication_Status_IsValid(value)) {
            set_application_status(static_cast< ::net_instaweb::RewriterApplication_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.RewriteStatusCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.RewriteStatusCount)
  return false;
#undef DO_
}

void RewriteStatusCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.RewriteStatusCount)
  // optional .net_instaweb.RewriterApplication.Status application_status = 1;
  if (has_application_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->application_status(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.RewriteStatusCount)
}

int RewriteStatusCount::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.RewriteStatusCount)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .net_instaweb.RewriterApplication.Status application_status = 1;
    if (has_application_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->application_status());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriteStatusCount::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewriteStatusCount*>(&from));
}

void RewriteStatusCount::MergeFrom(const RewriteStatusCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.RewriteStatusCount)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_application_status()) {
      set_application_status(from.application_status());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RewriteStatusCount::CopyFrom(const RewriteStatusCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.RewriteStatusCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteStatusCount::IsInitialized() const {

  return true;
}

void RewriteStatusCount::Swap(RewriteStatusCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RewriteStatusCount::InternalSwap(RewriteStatusCount* other) {
  std::swap(application_status_, other->application_status_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RewriteStatusCount::GetTypeName() const {
  return "net_instaweb.RewriteStatusCount";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriteStatusCount

// optional .net_instaweb.RewriterApplication.Status application_status = 1;
bool RewriteStatusCount::has_application_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RewriteStatusCount::set_has_application_status() {
  _has_bits_[0] |= 0x00000001u;
}
void RewriteStatusCount::clear_has_application_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void RewriteStatusCount::clear_application_status() {
  application_status_ = 0;
  clear_has_application_status();
}
 ::net_instaweb::RewriterApplication_Status RewriteStatusCount::application_status() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteStatusCount.application_status)
  return static_cast< ::net_instaweb::RewriterApplication_Status >(application_status_);
}
 void RewriteStatusCount::set_application_status(::net_instaweb::RewriterApplication_Status value) {
  assert(::net_instaweb::RewriterApplication_Status_IsValid(value));
  set_has_application_status();
  application_status_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteStatusCount.application_status)
}

// optional int32 count = 2;
bool RewriteStatusCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RewriteStatusCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void RewriteStatusCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void RewriteStatusCount::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 RewriteStatusCount::count() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriteStatusCount.count)
  return count_;
}
 void RewriteStatusCount::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriteStatusCount.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForRewriterStats(
    RewriterStats* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterStats::kIdFieldNumber;
const int RewriterStats::kHtmlStatusFieldNumber;
const int RewriterStats::kStatusCountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterStats::RewriterStats()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.RewriterStats)
}

void RewriterStats::InitAsDefaultInstance() {
}

RewriterStats::RewriterStats(const RewriterStats& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.RewriterStats)
}

void RewriterStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  html_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewriterStats::~RewriterStats() {
  // @@protoc_insertion_point(destructor:net_instaweb.RewriterStats)
  SharedDtor();
}

void RewriterStats::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RewriterStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RewriterStats& RewriterStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

RewriterStats* RewriterStats::default_instance_ = NULL;

RewriterStats* RewriterStats::New(::google::protobuf::Arena* arena) const {
  RewriterStats* n = new RewriterStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RewriterStats::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.RewriterStats)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    html_status_ = 0;
  }
  status_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RewriterStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForRewriterStats, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.RewriterStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_html_status;
        break;
      }

      // optional .net_instaweb.RewriterHtmlApplication.Status html_status = 2;
      case 2: {
        if (tag == 16) {
         parse_html_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::net_instaweb::RewriterHtmlApplication_Status_IsValid(value)) {
            set_html_status(static_cast< ::net_instaweb::RewriterHtmlApplication_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status_counts;
        break;
      }

      // repeated .net_instaweb.RewriteStatusCount status_counts = 3;
      case 3: {
        if (tag == 26) {
         parse_status_counts:
          DO_(input->IncrementRecursionDepth());
         parse_loop_status_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_status_counts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_status_counts;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.RewriterStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.RewriterStats)
  return false;
#undef DO_
}

void RewriterStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.RewriterStats)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .net_instaweb.RewriterHtmlApplication.Status html_status = 2;
  if (has_html_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->html_status(), output);
  }

  // repeated .net_instaweb.RewriteStatusCount status_counts = 3;
  for (unsigned int i = 0, n = this->status_counts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->status_counts(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.RewriterStats)
}

int RewriterStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.RewriterStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .net_instaweb.RewriterHtmlApplication.Status html_status = 2;
    if (has_html_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->html_status());
    }

  }
  // repeated .net_instaweb.RewriteStatusCount status_counts = 3;
  total_size += 1 * this->status_counts_size();
  for (int i = 0; i < this->status_counts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status_counts(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriterStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RewriterStats*>(&from));
}

void RewriterStats::MergeFrom(const RewriterStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.RewriterStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  status_counts_.MergeFrom(from.status_counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_html_status()) {
      set_html_status(from.html_status());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void RewriterStats::CopyFrom(const RewriterStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.RewriterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterStats::IsInitialized() const {

  return true;
}

void RewriterStats::Swap(RewriterStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RewriterStats::InternalSwap(RewriterStats* other) {
  id_.Swap(&other->id_);
  std::swap(html_status_, other->html_status_);
  status_counts_.UnsafeArenaSwap(&other->status_counts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RewriterStats::GetTypeName() const {
  return "net_instaweb.RewriterStats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriterStats

// optional string id = 1;
bool RewriterStats::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RewriterStats::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RewriterStats::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RewriterStats::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& RewriterStats::id() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriterStats.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RewriterStats::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.RewriterStats.id)
}
 void RewriterStats::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.RewriterStats.id)
}
 void RewriterStats::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.RewriterStats.id)
}
 ::std::string* RewriterStats::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:net_instaweb.RewriterStats.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RewriterStats::release_id() {
  // @@protoc_insertion_point(field_release:net_instaweb.RewriterStats.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RewriterStats::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.RewriterStats.id)
}

// optional .net_instaweb.RewriterHtmlApplication.Status html_status = 2;
bool RewriterStats::has_html_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RewriterStats::set_has_html_status() {
  _has_bits_[0] |= 0x00000002u;
}
void RewriterStats::clear_has_html_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void RewriterStats::clear_html_status() {
  html_status_ = 0;
  clear_has_html_status();
}
 ::net_instaweb::RewriterHtmlApplication_Status RewriterStats::html_status() const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriterStats.html_status)
  return static_cast< ::net_instaweb::RewriterHtmlApplication_Status >(html_status_);
}
 void RewriterStats::set_html_status(::net_instaweb::RewriterHtmlApplication_Status value) {
  assert(::net_instaweb::RewriterHtmlApplication_Status_IsValid(value));
  set_has_html_status();
  html_status_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.RewriterStats.html_status)
}

// repeated .net_instaweb.RewriteStatusCount status_counts = 3;
int RewriterStats::status_counts_size() const {
  return status_counts_.size();
}
void RewriterStats::clear_status_counts() {
  status_counts_.Clear();
}
const ::net_instaweb::RewriteStatusCount& RewriterStats::status_counts(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.RewriterStats.status_counts)
  return status_counts_.Get(index);
}
::net_instaweb::RewriteStatusCount* RewriterStats::mutable_status_counts(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.RewriterStats.status_counts)
  return status_counts_.Mutable(index);
}
::net_instaweb::RewriteStatusCount* RewriterStats::add_status_counts() {
  // @@protoc_insertion_point(field_add:net_instaweb.RewriterStats.status_counts)
  return status_counts_.Add();
}
::google::protobuf::RepeatedPtrField< ::net_instaweb::RewriteStatusCount >*
RewriterStats::mutable_status_counts() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.RewriterStats.status_counts)
  return &status_counts_;
}
const ::google::protobuf::RepeatedPtrField< ::net_instaweb::RewriteStatusCount >&
RewriterStats::status_counts() const {
  // @@protoc_insertion_point(field_list:net_instaweb.RewriterStats.status_counts)
  return status_counts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForDeviceInfo(
    DeviceInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kDeviceTypeFieldNumber;
const int DeviceInfo::kSupportsImageInliningFieldNumber;
const int DeviceInfo::kSupportsLazyloadImagesFieldNumber;
const int DeviceInfo::kSupportsCriticalImagesBeaconFieldNumber;
const int DeviceInfo::kSupportsDeferjsFieldNumber;
const int DeviceInfo::kSupportsWebpFieldNumber;
const int DeviceInfo::kSupportsWebplosslessAlphaFieldNumber;
const int DeviceInfo::kIsBotFieldNumber;
const int DeviceInfo::kDeprecatedSupportsSplitHtmlFieldNumber;
const int DeviceInfo::kCanPreloadResourcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.DeviceInfo)
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
  supports_image_inlining_ = false;
  supports_lazyload_images_ = false;
  supports_critical_images_beacon_ = false;
  supports_deferjs_ = false;
  supports_webp_ = false;
  supports_webplossless_alpha_ = false;
  is_bot_ = false;
  deprecated_supports_split_html_ = false;
  can_preload_resources_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeviceInfo& DeviceInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New(::google::protobuf::Arena* arena) const {
  DeviceInfo* n = new DeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.DeviceInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(device_type_, is_bot_);
  }
  ZR_(deprecated_supports_split_html_, can_preload_resources_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForDeviceInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.DeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_type_)));
          set_has_device_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_supports_image_inlining;
        break;
      }

      // optional bool supports_image_inlining = 2;
      case 2: {
        if (tag == 16) {
         parse_supports_image_inlining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_image_inlining_)));
          set_has_supports_image_inlining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_supports_lazyload_images;
        break;
      }

      // optional bool supports_lazyload_images = 3;
      case 3: {
        if (tag == 24) {
         parse_supports_lazyload_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_lazyload_images_)));
          set_has_supports_lazyload_images();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_supports_critical_images_beacon;
        break;
      }

      // optional bool supports_critical_images_beacon = 4;
      case 4: {
        if (tag == 32) {
         parse_supports_critical_images_beacon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_critical_images_beacon_)));
          set_has_supports_critical_images_beacon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_supports_deferjs;
        break;
      }

      // optional bool supports_deferjs = 5;
      case 5: {
        if (tag == 40) {
         parse_supports_deferjs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_deferjs_)));
          set_has_supports_deferjs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_supports_webp;
        break;
      }

      // optional bool supports_webp = 6;
      case 6: {
        if (tag == 48) {
         parse_supports_webp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_webp_)));
          set_has_supports_webp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_supports_webplossless_alpha;
        break;
      }

      // optional bool supports_webplossless_alpha = 7;
      case 7: {
        if (tag == 56) {
         parse_supports_webplossless_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supports_webplossless_alpha_)));
          set_has_supports_webplossless_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_bot;
        break;
      }

      // optional bool is_bot = 8;
      case 8: {
        if (tag == 64) {
         parse_is_bot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bot_)));
          set_has_is_bot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_deprecated_supports_split_html;
        break;
      }

      // optional bool deprecated_supports_split_html = 9 [deprecated = true];
      case 9: {
        if (tag == 72) {
         parse_deprecated_supports_split_html:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deprecated_supports_split_html_)));
          set_has_deprecated_supports_split_html();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_can_preload_resources;
        break;
      }

      // optional bool can_preload_resources = 10;
      case 10: {
        if (tag == 80) {
         parse_can_preload_resources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_preload_resources_)));
          set_has_can_preload_resources();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.DeviceInfo)
  return false;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.DeviceInfo)
  // optional int32 device_type = 1;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_type(), output);
  }

  // optional bool supports_image_inlining = 2;
  if (has_supports_image_inlining()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->supports_image_inlining(), output);
  }

  // optional bool supports_lazyload_images = 3;
  if (has_supports_lazyload_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->supports_lazyload_images(), output);
  }

  // optional bool supports_critical_images_beacon = 4;
  if (has_supports_critical_images_beacon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->supports_critical_images_beacon(), output);
  }

  // optional bool supports_deferjs = 5;
  if (has_supports_deferjs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->supports_deferjs(), output);
  }

  // optional bool supports_webp = 6;
  if (has_supports_webp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->supports_webp(), output);
  }

  // optional bool supports_webplossless_alpha = 7;
  if (has_supports_webplossless_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->supports_webplossless_alpha(), output);
  }

  // optional bool is_bot = 8;
  if (has_is_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_bot(), output);
  }

  // optional bool deprecated_supports_split_html = 9 [deprecated = true];
  if (has_deprecated_supports_split_html()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->deprecated_supports_split_html(), output);
  }

  // optional bool can_preload_resources = 10;
  if (has_can_preload_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->can_preload_resources(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.DeviceInfo)
}

int DeviceInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.DeviceInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 device_type = 1;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_type());
    }

    // optional bool supports_image_inlining = 2;
    if (has_supports_image_inlining()) {
      total_size += 1 + 1;
    }

    // optional bool supports_lazyload_images = 3;
    if (has_supports_lazyload_images()) {
      total_size += 1 + 1;
    }

    // optional bool supports_critical_images_beacon = 4;
    if (has_supports_critical_images_beacon()) {
      total_size += 1 + 1;
    }

    // optional bool supports_deferjs = 5;
    if (has_supports_deferjs()) {
      total_size += 1 + 1;
    }

    // optional bool supports_webp = 6;
    if (has_supports_webp()) {
      total_size += 1 + 1;
    }

    // optional bool supports_webplossless_alpha = 7;
    if (has_supports_webplossless_alpha()) {
      total_size += 1 + 1;
    }

    // optional bool is_bot = 8;
    if (has_is_bot()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool deprecated_supports_split_html = 9 [deprecated = true];
    if (has_deprecated_supports_split_html()) {
      total_size += 1 + 1;
    }

    // optional bool can_preload_resources = 10;
    if (has_can_preload_resources()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceInfo*>(&from));
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.DeviceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_supports_image_inlining()) {
      set_supports_image_inlining(from.supports_image_inlining());
    }
    if (from.has_supports_lazyload_images()) {
      set_supports_lazyload_images(from.supports_lazyload_images());
    }
    if (from.has_supports_critical_images_beacon()) {
      set_supports_critical_images_beacon(from.supports_critical_images_beacon());
    }
    if (from.has_supports_deferjs()) {
      set_supports_deferjs(from.supports_deferjs());
    }
    if (from.has_supports_webp()) {
      set_supports_webp(from.supports_webp());
    }
    if (from.has_supports_webplossless_alpha()) {
      set_supports_webplossless_alpha(from.supports_webplossless_alpha());
    }
    if (from.has_is_bot()) {
      set_is_bot(from.is_bot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deprecated_supports_split_html()) {
      set_deprecated_supports_split_html(from.deprecated_supports_split_html());
    }
    if (from.has_can_preload_resources()) {
      set_can_preload_resources(from.can_preload_resources());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  std::swap(device_type_, other->device_type_);
  std::swap(supports_image_inlining_, other->supports_image_inlining_);
  std::swap(supports_lazyload_images_, other->supports_lazyload_images_);
  std::swap(supports_critical_images_beacon_, other->supports_critical_images_beacon_);
  std::swap(supports_deferjs_, other->supports_deferjs_);
  std::swap(supports_webp_, other->supports_webp_);
  std::swap(supports_webplossless_alpha_, other->supports_webplossless_alpha_);
  std::swap(is_bot_, other->is_bot_);
  std::swap(deprecated_supports_split_html_, other->deprecated_supports_split_html_);
  std::swap(can_preload_resources_, other->can_preload_resources_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DeviceInfo::GetTypeName() const {
  return "net_instaweb.DeviceInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceInfo

// optional int32 device_type = 1;
bool DeviceInfo::has_device_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeviceInfo::set_has_device_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DeviceInfo::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeviceInfo::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
 ::google::protobuf::int32 DeviceInfo::device_type() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.device_type)
  return device_type_;
}
 void DeviceInfo::set_device_type(::google::protobuf::int32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.device_type)
}

// optional bool supports_image_inlining = 2;
bool DeviceInfo::has_supports_image_inlining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeviceInfo::set_has_supports_image_inlining() {
  _has_bits_[0] |= 0x00000002u;
}
void DeviceInfo::clear_has_supports_image_inlining() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeviceInfo::clear_supports_image_inlining() {
  supports_image_inlining_ = false;
  clear_has_supports_image_inlining();
}
 bool DeviceInfo::supports_image_inlining() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.supports_image_inlining)
  return supports_image_inlining_;
}
 void DeviceInfo::set_supports_image_inlining(bool value) {
  set_has_supports_image_inlining();
  supports_image_inlining_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.supports_image_inlining)
}

// optional bool supports_lazyload_images = 3;
bool DeviceInfo::has_supports_lazyload_images() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeviceInfo::set_has_supports_lazyload_images() {
  _has_bits_[0] |= 0x00000004u;
}
void DeviceInfo::clear_has_supports_lazyload_images() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeviceInfo::clear_supports_lazyload_images() {
  supports_lazyload_images_ = false;
  clear_has_supports_lazyload_images();
}
 bool DeviceInfo::supports_lazyload_images() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.supports_lazyload_images)
  return supports_lazyload_images_;
}
 void DeviceInfo::set_supports_lazyload_images(bool value) {
  set_has_supports_lazyload_images();
  supports_lazyload_images_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.supports_lazyload_images)
}

// optional bool supports_critical_images_beacon = 4;
bool DeviceInfo::has_supports_critical_images_beacon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeviceInfo::set_has_supports_critical_images_beacon() {
  _has_bits_[0] |= 0x00000008u;
}
void DeviceInfo::clear_has_supports_critical_images_beacon() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeviceInfo::clear_supports_critical_images_beacon() {
  supports_critical_images_beacon_ = false;
  clear_has_supports_critical_images_beacon();
}
 bool DeviceInfo::supports_critical_images_beacon() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.supports_critical_images_beacon)
  return supports_critical_images_beacon_;
}
 void DeviceInfo::set_supports_critical_images_beacon(bool value) {
  set_has_supports_critical_images_beacon();
  supports_critical_images_beacon_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.supports_critical_images_beacon)
}

// optional bool supports_deferjs = 5;
bool DeviceInfo::has_supports_deferjs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeviceInfo::set_has_supports_deferjs() {
  _has_bits_[0] |= 0x00000010u;
}
void DeviceInfo::clear_has_supports_deferjs() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeviceInfo::clear_supports_deferjs() {
  supports_deferjs_ = false;
  clear_has_supports_deferjs();
}
 bool DeviceInfo::supports_deferjs() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.supports_deferjs)
  return supports_deferjs_;
}
 void DeviceInfo::set_supports_deferjs(bool value) {
  set_has_supports_deferjs();
  supports_deferjs_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.supports_deferjs)
}

// optional bool supports_webp = 6;
bool DeviceInfo::has_supports_webp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeviceInfo::set_has_supports_webp() {
  _has_bits_[0] |= 0x00000020u;
}
void DeviceInfo::clear_has_supports_webp() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeviceInfo::clear_supports_webp() {
  supports_webp_ = false;
  clear_has_supports_webp();
}
 bool DeviceInfo::supports_webp() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.supports_webp)
  return supports_webp_;
}
 void DeviceInfo::set_supports_webp(bool value) {
  set_has_supports_webp();
  supports_webp_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.supports_webp)
}

// optional bool supports_webplossless_alpha = 7;
bool DeviceInfo::has_supports_webplossless_alpha() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeviceInfo::set_has_supports_webplossless_alpha() {
  _has_bits_[0] |= 0x00000040u;
}
void DeviceInfo::clear_has_supports_webplossless_alpha() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeviceInfo::clear_supports_webplossless_alpha() {
  supports_webplossless_alpha_ = false;
  clear_has_supports_webplossless_alpha();
}
 bool DeviceInfo::supports_webplossless_alpha() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.supports_webplossless_alpha)
  return supports_webplossless_alpha_;
}
 void DeviceInfo::set_supports_webplossless_alpha(bool value) {
  set_has_supports_webplossless_alpha();
  supports_webplossless_alpha_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.supports_webplossless_alpha)
}

// optional bool is_bot = 8;
bool DeviceInfo::has_is_bot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeviceInfo::set_has_is_bot() {
  _has_bits_[0] |= 0x00000080u;
}
void DeviceInfo::clear_has_is_bot() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeviceInfo::clear_is_bot() {
  is_bot_ = false;
  clear_has_is_bot();
}
 bool DeviceInfo::is_bot() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.is_bot)
  return is_bot_;
}
 void DeviceInfo::set_is_bot(bool value) {
  set_has_is_bot();
  is_bot_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.is_bot)
}

// optional bool deprecated_supports_split_html = 9 [deprecated = true];
bool DeviceInfo::has_deprecated_supports_split_html() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeviceInfo::set_has_deprecated_supports_split_html() {
  _has_bits_[0] |= 0x00000100u;
}
void DeviceInfo::clear_has_deprecated_supports_split_html() {
  _has_bits_[0] &= ~0x00000100u;
}
void DeviceInfo::clear_deprecated_supports_split_html() {
  deprecated_supports_split_html_ = false;
  clear_has_deprecated_supports_split_html();
}
 bool DeviceInfo::deprecated_supports_split_html() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.deprecated_supports_split_html)
  return deprecated_supports_split_html_;
}
 void DeviceInfo::set_deprecated_supports_split_html(bool value) {
  set_has_deprecated_supports_split_html();
  deprecated_supports_split_html_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.deprecated_supports_split_html)
}

// optional bool can_preload_resources = 10;
bool DeviceInfo::has_can_preload_resources() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeviceInfo::set_has_can_preload_resources() {
  _has_bits_[0] |= 0x00000200u;
}
void DeviceInfo::clear_has_can_preload_resources() {
  _has_bits_[0] &= ~0x00000200u;
}
void DeviceInfo::clear_can_preload_resources() {
  can_preload_resources_ = false;
  clear_has_can_preload_resources();
}
 bool DeviceInfo::can_preload_resources() const {
  // @@protoc_insertion_point(field_get:net_instaweb.DeviceInfo.can_preload_resources)
  return can_preload_resources_;
}
 void DeviceInfo::set_can_preload_resources(bool value) {
  set_has_can_preload_resources();
  can_preload_resources_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.DeviceInfo.can_preload_resources)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLoggingInfo(
    LoggingInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoggingInfo::kBlinkInfoFieldNumber;
const int LoggingInfo::kAppliedRewritersFieldNumber;
const int LoggingInfo::kMetadataCacheInfoFieldNumber;
const int LoggingInfo::kIsOriginalResourceCacheableFieldNumber;
const int LoggingInfo::kExperimentIdFieldNumber;
const int LoggingInfo::kPropertyPageInfoFieldNumber;
const int LoggingInfo::kRewriterInfoFieldNumber;
const int LoggingInfo::kRewriterStatsFieldNumber;
const int LoggingInfo::kIsHtmlResponseFieldNumber;
const int LoggingInfo::kIsUrlDisallowedFieldNumber;
const int LoggingInfo::kOptionsSignatureHashFieldNumber;
const int LoggingInfo::kIsRequestDisabledFieldNumber;
const int LoggingInfo::kFlushEarlyFlowInfoFieldNumber;
const int LoggingInfo::kRewriterInfoSizeLimitExceededFieldNumber;
const int LoggingInfo::kIsPagespeedResourceFieldNumber;
const int LoggingInfo::kResourceUrlInfoFieldNumber;
const int LoggingInfo::kCacheHtmlLoggingInfoFieldNumber;
const int LoggingInfo::kNumHtmlCriticalImagesFieldNumber;
const int LoggingInfo::kNumCssCriticalImagesFieldNumber;
const int LoggingInfo::kImageStatsFieldNumber;
const int LoggingInfo::kCriticalCssInfoFieldNumber;
const int LoggingInfo::kDeviceInfoFieldNumber;
const int LoggingInfo::kIsXhrFieldNumber;
const int LoggingInfo::kPriorExperimentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoggingInfo::LoggingInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.LoggingInfo)
}

void LoggingInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  blink_info_ = const_cast< ::net_instaweb::BlinkInfo*>(
      ::net_instaweb::BlinkInfo::internal_default_instance());
#else
  blink_info_ = const_cast< ::net_instaweb::BlinkInfo*>(&::net_instaweb::BlinkInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  metadata_cache_info_ = const_cast< ::net_instaweb::MetadataCacheInfo*>(
      ::net_instaweb::MetadataCacheInfo::internal_default_instance());
#else
  metadata_cache_info_ = const_cast< ::net_instaweb::MetadataCacheInfo*>(&::net_instaweb::MetadataCacheInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  property_page_info_ = const_cast< ::net_instaweb::PropertyPageInfo*>(
      ::net_instaweb::PropertyPageInfo::internal_default_instance());
#else
  property_page_info_ = const_cast< ::net_instaweb::PropertyPageInfo*>(&::net_instaweb::PropertyPageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  flush_early_flow_info_ = const_cast< ::net_instaweb::FlushEarlyFlowInfo*>(
      ::net_instaweb::FlushEarlyFlowInfo::internal_default_instance());
#else
  flush_early_flow_info_ = const_cast< ::net_instaweb::FlushEarlyFlowInfo*>(&::net_instaweb::FlushEarlyFlowInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  resource_url_info_ = const_cast< ::net_instaweb::ResourceUrlInfo*>(
      ::net_instaweb::ResourceUrlInfo::internal_default_instance());
#else
  resource_url_info_ = const_cast< ::net_instaweb::ResourceUrlInfo*>(&::net_instaweb::ResourceUrlInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cache_html_logging_info_ = const_cast< ::net_instaweb::CacheHtmlLoggingInfo*>(
      ::net_instaweb::CacheHtmlLoggingInfo::internal_default_instance());
#else
  cache_html_logging_info_ = const_cast< ::net_instaweb::CacheHtmlLoggingInfo*>(&::net_instaweb::CacheHtmlLoggingInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  image_stats_ = const_cast< ::net_instaweb::ImageStats*>(
      ::net_instaweb::ImageStats::internal_default_instance());
#else
  image_stats_ = const_cast< ::net_instaweb::ImageStats*>(&::net_instaweb::ImageStats::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  critical_css_info_ = const_cast< ::net_instaweb::CriticalCssInfo*>(
      ::net_instaweb::CriticalCssInfo::internal_default_instance());
#else
  critical_css_info_ = const_cast< ::net_instaweb::CriticalCssInfo*>(&::net_instaweb::CriticalCssInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  device_info_ = const_cast< ::net_instaweb::DeviceInfo*>(
      ::net_instaweb::DeviceInfo::internal_default_instance());
#else
  device_info_ = const_cast< ::net_instaweb::DeviceInfo*>(&::net_instaweb::DeviceInfo::default_instance());
#endif
}

LoggingInfo::LoggingInfo(const LoggingInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.LoggingInfo)
}

void LoggingInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blink_info_ = NULL;
  applied_rewriters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_cache_info_ = NULL;
  is_original_resource_cacheable_ = true;
  experiment_id_ = 0;
  property_page_info_ = NULL;
  is_html_response_ = false;
  is_url_disallowed_ = false;
  options_signature_hash_ = GOOGLE_LONGLONG(0);
  is_request_disabled_ = false;
  flush_early_flow_info_ = NULL;
  rewriter_info_size_limit_exceeded_ = false;
  is_pagespeed_resource_ = false;
  resource_url_info_ = NULL;
  cache_html_logging_info_ = NULL;
  num_html_critical_images_ = -1;
  num_css_critical_images_ = -1;
  image_stats_ = NULL;
  critical_css_info_ = NULL;
  device_info_ = NULL;
  is_xhr_ = false;
  prior_experiment_id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoggingInfo::~LoggingInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.LoggingInfo)
  SharedDtor();
}

void LoggingInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applied_rewriters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete blink_info_;
    delete metadata_cache_info_;
    delete property_page_info_;
    delete flush_early_flow_info_;
    delete resource_url_info_;
    delete cache_html_logging_info_;
    delete image_stats_;
    delete critical_css_info_;
    delete device_info_;
  }
}

void LoggingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoggingInfo& LoggingInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fopt_2flogging_2flogging_2eproto();
#endif
  return *default_instance_;
}

LoggingInfo* LoggingInfo::default_instance_ = NULL;

LoggingInfo* LoggingInfo::New(::google::protobuf::Arena* arena) const {
  LoggingInfo* n = new LoggingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoggingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.LoggingInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoggingInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoggingInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    if (has_blink_info()) {
      if (blink_info_ != NULL) blink_info_->::net_instaweb::BlinkInfo::Clear();
    }
    if (has_applied_rewriters()) {
      applied_rewriters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_metadata_cache_info()) {
      if (metadata_cache_info_ != NULL) metadata_cache_info_->::net_instaweb::MetadataCacheInfo::Clear();
    }
    is_original_resource_cacheable_ = true;
    experiment_id_ = 0;
    if (has_property_page_info()) {
      if (property_page_info_ != NULL) property_page_info_->::net_instaweb::PropertyPageInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(is_html_response_, options_signature_hash_);
    ZR_(rewriter_info_size_limit_exceeded_, is_pagespeed_resource_);
    if (has_flush_early_flow_info()) {
      if (flush_early_flow_info_ != NULL) flush_early_flow_info_->::net_instaweb::FlushEarlyFlowInfo::Clear();
    }
    if (has_resource_url_info()) {
      if (resource_url_info_ != NULL) resource_url_info_->::net_instaweb::ResourceUrlInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_cache_html_logging_info()) {
      if (cache_html_logging_info_ != NULL) cache_html_logging_info_->::net_instaweb::CacheHtmlLoggingInfo::Clear();
    }
    num_html_critical_images_ = -1;
    num_css_critical_images_ = -1;
    if (has_image_stats()) {
      if (image_stats_ != NULL) image_stats_->::net_instaweb::ImageStats::Clear();
    }
    if (has_critical_css_info()) {
      if (critical_css_info_ != NULL) critical_css_info_->::net_instaweb::CriticalCssInfo::Clear();
    }
    if (has_device_info()) {
      if (device_info_ != NULL) device_info_->::net_instaweb::DeviceInfo::Clear();
    }
    is_xhr_ = false;
    prior_experiment_id_ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  rewriter_info_.Clear();
  rewriter_stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoggingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLoggingInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.LoggingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .net_instaweb.BlinkInfo blink_info = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blink_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_applied_rewriters;
        break;
      }

      // optional string applied_rewriters = 3;
      case 3: {
        if (tag == 26) {
         parse_applied_rewriters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applied_rewriters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_metadata_cache_info;
        break;
      }

      // optional .net_instaweb.MetadataCacheInfo metadata_cache_info = 4;
      case 4: {
        if (tag == 34) {
         parse_metadata_cache_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata_cache_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_original_resource_cacheable;
        break;
      }

      // optional bool is_original_resource_cacheable = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_is_original_resource_cacheable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_original_resource_cacheable_)));
          set_has_is_original_resource_cacheable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_experiment_id;
        break;
      }

      // optional int32 experiment_id = 6;
      case 6: {
        if (tag == 48) {
         parse_experiment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &experiment_id_)));
          set_has_experiment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_property_page_info;
        break;
      }

      // optional .net_instaweb.PropertyPageInfo property_page_info = 8;
      case 8: {
        if (tag == 66) {
         parse_property_page_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_page_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rewriter_info;
        break;
      }

      // repeated .net_instaweb.RewriterInfo rewriter_info = 9;
      case 9: {
        if (tag == 74) {
         parse_rewriter_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rewriter_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rewriter_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_rewriter_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_is_html_response;
        break;
      }

      // optional bool is_html_response = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_is_html_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_html_response_)));
          set_has_is_html_response();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_url_disallowed;
        break;
      }

      // optional bool is_url_disallowed = 11 [default = false];
      case 11: {
        if (tag == 88) {
         parse_is_url_disallowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_url_disallowed_)));
          set_has_is_url_disallowed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_options_signature_hash;
        break;
      }

      // optional int64 options_signature_hash = 12;
      case 12: {
        if (tag == 96) {
         parse_options_signature_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &options_signature_hash_)));
          set_has_options_signature_hash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_request_disabled;
        break;
      }

      // optional bool is_request_disabled = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_is_request_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_request_disabled_)));
          set_has_is_request_disabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_flush_early_flow_info;
        break;
      }

      // optional .net_instaweb.FlushEarlyFlowInfo flush_early_flow_info = 14;
      case 14: {
        if (tag == 114) {
         parse_flush_early_flow_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flush_early_flow_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_rewriter_info_size_limit_exceeded;
        break;
      }

      // optional bool rewriter_info_size_limit_exceeded = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_rewriter_info_size_limit_exceeded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewriter_info_size_limit_exceeded_)));
          set_has_rewriter_info_size_limit_exceeded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_is_pagespeed_resource;
        break;
      }

      // optional bool is_pagespeed_resource = 16 [default = false];
      case 16: {
        if (tag == 128) {
         parse_is_pagespeed_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pagespeed_resource_)));
          set_has_is_pagespeed_resource();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_resource_url_info;
        break;
      }

      // optional .net_instaweb.ResourceUrlInfo resource_url_info = 17;
      case 17: {
        if (tag == 138) {
         parse_resource_url_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_url_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_cache_html_logging_info;
        break;
      }

      // optional .net_instaweb.CacheHtmlLoggingInfo cache_html_logging_info = 18;
      case 18: {
        if (tag == 146) {
         parse_cache_html_logging_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cache_html_logging_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_num_html_critical_images;
        break;
      }

      // optional int32 num_html_critical_images = 19 [default = -1];
      case 19: {
        if (tag == 152) {
         parse_num_html_critical_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_html_critical_images_)));
          set_has_num_html_critical_images();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_num_css_critical_images;
        break;
      }

      // optional int32 num_css_critical_images = 20 [default = -1];
      case 20: {
        if (tag == 160) {
         parse_num_css_critical_images:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_css_critical_images_)));
          set_has_num_css_critical_images();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_image_stats;
        break;
      }

      // optional .net_instaweb.ImageStats image_stats = 21;
      case 21: {
        if (tag == 170) {
         parse_image_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_rewriter_stats;
        break;
      }

      // repeated .net_instaweb.RewriterStats rewriter_stats = 22;
      case 22: {
        if (tag == 178) {
         parse_rewriter_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rewriter_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rewriter_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_rewriter_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(186)) goto parse_critical_css_info;
        break;
      }

      // optional .net_instaweb.CriticalCssInfo critical_css_info = 23;
      case 23: {
        if (tag == 186) {
         parse_critical_css_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_critical_css_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_device_info;
        break;
      }

      // optional .net_instaweb.DeviceInfo device_info = 24;
      case 24: {
        if (tag == 194) {
         parse_device_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_is_xhr;
        break;
      }

      // optional bool is_xhr = 25;
      case 25: {
        if (tag == 200) {
         parse_is_xhr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_xhr_)));
          set_has_is_xhr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_prior_experiment_id;
        break;
      }

      // optional int32 prior_experiment_id = 26 [default = -1];
      case 26: {
        if (tag == 208) {
         parse_prior_experiment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prior_experiment_id_)));
          set_has_prior_experiment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.LoggingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.LoggingInfo)
  return false;
#undef DO_
}

void LoggingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.LoggingInfo)
  // optional .net_instaweb.BlinkInfo blink_info = 2;
  if (has_blink_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->blink_info_, output);
  }

  // optional string applied_rewriters = 3;
  if (has_applied_rewriters()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->applied_rewriters(), output);
  }

  // optional .net_instaweb.MetadataCacheInfo metadata_cache_info = 4;
  if (has_metadata_cache_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->metadata_cache_info_, output);
  }

  // optional bool is_original_resource_cacheable = 5 [default = true];
  if (has_is_original_resource_cacheable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_original_resource_cacheable(), output);
  }

  // optional int32 experiment_id = 6;
  if (has_experiment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->experiment_id(), output);
  }

  // optional .net_instaweb.PropertyPageInfo property_page_info = 8;
  if (has_property_page_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->property_page_info_, output);
  }

  // repeated .net_instaweb.RewriterInfo rewriter_info = 9;
  for (unsigned int i = 0, n = this->rewriter_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->rewriter_info(i), output);
  }

  // optional bool is_html_response = 10 [default = false];
  if (has_is_html_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_html_response(), output);
  }

  // optional bool is_url_disallowed = 11 [default = false];
  if (has_is_url_disallowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_url_disallowed(), output);
  }

  // optional int64 options_signature_hash = 12;
  if (has_options_signature_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->options_signature_hash(), output);
  }

  // optional bool is_request_disabled = 13 [default = false];
  if (has_is_request_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_request_disabled(), output);
  }

  // optional .net_instaweb.FlushEarlyFlowInfo flush_early_flow_info = 14;
  if (has_flush_early_flow_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->flush_early_flow_info_, output);
  }

  // optional bool rewriter_info_size_limit_exceeded = 15 [default = false];
  if (has_rewriter_info_size_limit_exceeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->rewriter_info_size_limit_exceeded(), output);
  }

  // optional bool is_pagespeed_resource = 16 [default = false];
  if (has_is_pagespeed_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_pagespeed_resource(), output);
  }

  // optional .net_instaweb.ResourceUrlInfo resource_url_info = 17;
  if (has_resource_url_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->resource_url_info_, output);
  }

  // optional .net_instaweb.CacheHtmlLoggingInfo cache_html_logging_info = 18;
  if (has_cache_html_logging_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, *this->cache_html_logging_info_, output);
  }

  // optional int32 num_html_critical_images = 19 [default = -1];
  if (has_num_html_critical_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_html_critical_images(), output);
  }

  // optional int32 num_css_critical_images = 20 [default = -1];
  if (has_num_css_critical_images()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->num_css_critical_images(), output);
  }

  // optional .net_instaweb.ImageStats image_stats = 21;
  if (has_image_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->image_stats_, output);
  }

  // repeated .net_instaweb.RewriterStats rewriter_stats = 22;
  for (unsigned int i = 0, n = this->rewriter_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->rewriter_stats(i), output);
  }

  // optional .net_instaweb.CriticalCssInfo critical_css_info = 23;
  if (has_critical_css_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, *this->critical_css_info_, output);
  }

  // optional .net_instaweb.DeviceInfo device_info = 24;
  if (has_device_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, *this->device_info_, output);
  }

  // optional bool is_xhr = 25;
  if (has_is_xhr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->is_xhr(), output);
  }

  // optional int32 prior_experiment_id = 26 [default = -1];
  if (has_prior_experiment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->prior_experiment_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.LoggingInfo)
}

int LoggingInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.LoggingInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .net_instaweb.BlinkInfo blink_info = 2;
    if (has_blink_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->blink_info_);
    }

    // optional string applied_rewriters = 3;
    if (has_applied_rewriters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applied_rewriters());
    }

    // optional .net_instaweb.MetadataCacheInfo metadata_cache_info = 4;
    if (has_metadata_cache_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metadata_cache_info_);
    }

    // optional bool is_original_resource_cacheable = 5 [default = true];
    if (has_is_original_resource_cacheable()) {
      total_size += 1 + 1;
    }

    // optional int32 experiment_id = 6;
    if (has_experiment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->experiment_id());
    }

    // optional .net_instaweb.PropertyPageInfo property_page_info = 8;
    if (has_property_page_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->property_page_info_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_html_response = 10 [default = false];
    if (has_is_html_response()) {
      total_size += 1 + 1;
    }

    // optional bool is_url_disallowed = 11 [default = false];
    if (has_is_url_disallowed()) {
      total_size += 1 + 1;
    }

    // optional int64 options_signature_hash = 12;
    if (has_options_signature_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->options_signature_hash());
    }

    // optional bool is_request_disabled = 13 [default = false];
    if (has_is_request_disabled()) {
      total_size += 1 + 1;
    }

    // optional .net_instaweb.FlushEarlyFlowInfo flush_early_flow_info = 14;
    if (has_flush_early_flow_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->flush_early_flow_info_);
    }

    // optional bool rewriter_info_size_limit_exceeded = 15 [default = false];
    if (has_rewriter_info_size_limit_exceeded()) {
      total_size += 1 + 1;
    }

    // optional bool is_pagespeed_resource = 16 [default = false];
    if (has_is_pagespeed_resource()) {
      total_size += 2 + 1;
    }

    // optional .net_instaweb.ResourceUrlInfo resource_url_info = 17;
    if (has_resource_url_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resource_url_info_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .net_instaweb.CacheHtmlLoggingInfo cache_html_logging_info = 18;
    if (has_cache_html_logging_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cache_html_logging_info_);
    }

    // optional int32 num_html_critical_images = 19 [default = -1];
    if (has_num_html_critical_images()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_html_critical_images());
    }

    // optional int32 num_css_critical_images = 20 [default = -1];
    if (has_num_css_critical_images()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_css_critical_images());
    }

    // optional .net_instaweb.ImageStats image_stats = 21;
    if (has_image_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->image_stats_);
    }

    // optional .net_instaweb.CriticalCssInfo critical_css_info = 23;
    if (has_critical_css_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->critical_css_info_);
    }

    // optional .net_instaweb.DeviceInfo device_info = 24;
    if (has_device_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->device_info_);
    }

    // optional bool is_xhr = 25;
    if (has_is_xhr()) {
      total_size += 2 + 1;
    }

    // optional int32 prior_experiment_id = 26 [default = -1];
    if (has_prior_experiment_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prior_experiment_id());
    }

  }
  // repeated .net_instaweb.RewriterInfo rewriter_info = 9;
  total_size += 1 * this->rewriter_info_size();
  for (int i = 0; i < this->rewriter_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewriter_info(i));
  }

  // repeated .net_instaweb.RewriterStats rewriter_stats = 22;
  total_size += 2 * this->rewriter_stats_size();
  for (int i = 0; i < this->rewriter_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewriter_stats(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggingInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoggingInfo*>(&from));
}

void LoggingInfo::MergeFrom(const LoggingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.LoggingInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rewriter_info_.MergeFrom(from.rewriter_info_);
  rewriter_stats_.MergeFrom(from.rewriter_stats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blink_info()) {
      mutable_blink_info()->::net_instaweb::BlinkInfo::MergeFrom(from.blink_info());
    }
    if (from.has_applied_rewriters()) {
      set_has_applied_rewriters();
      applied_rewriters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applied_rewriters_);
    }
    if (from.has_metadata_cache_info()) {
      mutable_metadata_cache_info()->::net_instaweb::MetadataCacheInfo::MergeFrom(from.metadata_cache_info());
    }
    if (from.has_is_original_resource_cacheable()) {
      set_is_original_resource_cacheable(from.is_original_resource_cacheable());
    }
    if (from.has_experiment_id()) {
      set_experiment_id(from.experiment_id());
    }
    if (from.has_property_page_info()) {
      mutable_property_page_info()->::net_instaweb::PropertyPageInfo::MergeFrom(from.property_page_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_html_response()) {
      set_is_html_response(from.is_html_response());
    }
    if (from.has_is_url_disallowed()) {
      set_is_url_disallowed(from.is_url_disallowed());
    }
    if (from.has_options_signature_hash()) {
      set_options_signature_hash(from.options_signature_hash());
    }
    if (from.has_is_request_disabled()) {
      set_is_request_disabled(from.is_request_disabled());
    }
    if (from.has_flush_early_flow_info()) {
      mutable_flush_early_flow_info()->::net_instaweb::FlushEarlyFlowInfo::MergeFrom(from.flush_early_flow_info());
    }
    if (from.has_rewriter_info_size_limit_exceeded()) {
      set_rewriter_info_size_limit_exceeded(from.rewriter_info_size_limit_exceeded());
    }
    if (from.has_is_pagespeed_resource()) {
      set_is_pagespeed_resource(from.is_pagespeed_resource());
    }
    if (from.has_resource_url_info()) {
      mutable_resource_url_info()->::net_instaweb::ResourceUrlInfo::MergeFrom(from.resource_url_info());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cache_html_logging_info()) {
      mutable_cache_html_logging_info()->::net_instaweb::CacheHtmlLoggingInfo::MergeFrom(from.cache_html_logging_info());
    }
    if (from.has_num_html_critical_images()) {
      set_num_html_critical_images(from.num_html_critical_images());
    }
    if (from.has_num_css_critical_images()) {
      set_num_css_critical_images(from.num_css_critical_images());
    }
    if (from.has_image_stats()) {
      mutable_image_stats()->::net_instaweb::ImageStats::MergeFrom(from.image_stats());
    }
    if (from.has_critical_css_info()) {
      mutable_critical_css_info()->::net_instaweb::CriticalCssInfo::MergeFrom(from.critical_css_info());
    }
    if (from.has_device_info()) {
      mutable_device_info()->::net_instaweb::DeviceInfo::MergeFrom(from.device_info());
    }
    if (from.has_is_xhr()) {
      set_is_xhr(from.is_xhr());
    }
    if (from.has_prior_experiment_id()) {
      set_prior_experiment_id(from.prior_experiment_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void LoggingInfo::CopyFrom(const LoggingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.LoggingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingInfo::IsInitialized() const {

  return true;
}

void LoggingInfo::Swap(LoggingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoggingInfo::InternalSwap(LoggingInfo* other) {
  std::swap(blink_info_, other->blink_info_);
  applied_rewriters_.Swap(&other->applied_rewriters_);
  std::swap(metadata_cache_info_, other->metadata_cache_info_);
  std::swap(is_original_resource_cacheable_, other->is_original_resource_cacheable_);
  std::swap(experiment_id_, other->experiment_id_);
  std::swap(property_page_info_, other->property_page_info_);
  rewriter_info_.UnsafeArenaSwap(&other->rewriter_info_);
  rewriter_stats_.UnsafeArenaSwap(&other->rewriter_stats_);
  std::swap(is_html_response_, other->is_html_response_);
  std::swap(is_url_disallowed_, other->is_url_disallowed_);
  std::swap(options_signature_hash_, other->options_signature_hash_);
  std::swap(is_request_disabled_, other->is_request_disabled_);
  std::swap(flush_early_flow_info_, other->flush_early_flow_info_);
  std::swap(rewriter_info_size_limit_exceeded_, other->rewriter_info_size_limit_exceeded_);
  std::swap(is_pagespeed_resource_, other->is_pagespeed_resource_);
  std::swap(resource_url_info_, other->resource_url_info_);
  std::swap(cache_html_logging_info_, other->cache_html_logging_info_);
  std::swap(num_html_critical_images_, other->num_html_critical_images_);
  std::swap(num_css_critical_images_, other->num_css_critical_images_);
  std::swap(image_stats_, other->image_stats_);
  std::swap(critical_css_info_, other->critical_css_info_);
  std::swap(device_info_, other->device_info_);
  std::swap(is_xhr_, other->is_xhr_);
  std::swap(prior_experiment_id_, other->prior_experiment_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LoggingInfo::GetTypeName() const {
  return "net_instaweb.LoggingInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoggingInfo

// optional .net_instaweb.BlinkInfo blink_info = 2;
bool LoggingInfo::has_blink_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoggingInfo::set_has_blink_info() {
  _has_bits_[0] |= 0x00000001u;
}
void LoggingInfo::clear_has_blink_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoggingInfo::clear_blink_info() {
  if (blink_info_ != NULL) blink_info_->::net_instaweb::BlinkInfo::Clear();
  clear_has_blink_info();
}
const ::net_instaweb::BlinkInfo& LoggingInfo::blink_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.blink_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return blink_info_ != NULL ? *blink_info_ : *default_instance().blink_info_;
#else
  return blink_info_ != NULL ? *blink_info_ : *default_instance_->blink_info_;
#endif
}
::net_instaweb::BlinkInfo* LoggingInfo::mutable_blink_info() {
  set_has_blink_info();
  if (blink_info_ == NULL) {
    blink_info_ = new ::net_instaweb::BlinkInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.blink_info)
  return blink_info_;
}
::net_instaweb::BlinkInfo* LoggingInfo::release_blink_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.blink_info)
  clear_has_blink_info();
  ::net_instaweb::BlinkInfo* temp = blink_info_;
  blink_info_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_blink_info(::net_instaweb::BlinkInfo* blink_info) {
  delete blink_info_;
  blink_info_ = blink_info;
  if (blink_info) {
    set_has_blink_info();
  } else {
    clear_has_blink_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.blink_info)
}

// optional string applied_rewriters = 3;
bool LoggingInfo::has_applied_rewriters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoggingInfo::set_has_applied_rewriters() {
  _has_bits_[0] |= 0x00000002u;
}
void LoggingInfo::clear_has_applied_rewriters() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoggingInfo::clear_applied_rewriters() {
  applied_rewriters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applied_rewriters();
}
 const ::std::string& LoggingInfo::applied_rewriters() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.applied_rewriters)
  return applied_rewriters_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoggingInfo::set_applied_rewriters(const ::std::string& value) {
  set_has_applied_rewriters();
  applied_rewriters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.applied_rewriters)
}
 void LoggingInfo::set_applied_rewriters(const char* value) {
  set_has_applied_rewriters();
  applied_rewriters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net_instaweb.LoggingInfo.applied_rewriters)
}
 void LoggingInfo::set_applied_rewriters(const char* value, size_t size) {
  set_has_applied_rewriters();
  applied_rewriters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.LoggingInfo.applied_rewriters)
}
 ::std::string* LoggingInfo::mutable_applied_rewriters() {
  set_has_applied_rewriters();
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.applied_rewriters)
  return applied_rewriters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoggingInfo::release_applied_rewriters() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.applied_rewriters)
  clear_has_applied_rewriters();
  return applied_rewriters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoggingInfo::set_allocated_applied_rewriters(::std::string* applied_rewriters) {
  if (applied_rewriters != NULL) {
    set_has_applied_rewriters();
  } else {
    clear_has_applied_rewriters();
  }
  applied_rewriters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applied_rewriters);
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.applied_rewriters)
}

// optional .net_instaweb.MetadataCacheInfo metadata_cache_info = 4;
bool LoggingInfo::has_metadata_cache_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoggingInfo::set_has_metadata_cache_info() {
  _has_bits_[0] |= 0x00000004u;
}
void LoggingInfo::clear_has_metadata_cache_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoggingInfo::clear_metadata_cache_info() {
  if (metadata_cache_info_ != NULL) metadata_cache_info_->::net_instaweb::MetadataCacheInfo::Clear();
  clear_has_metadata_cache_info();
}
const ::net_instaweb::MetadataCacheInfo& LoggingInfo::metadata_cache_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.metadata_cache_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return metadata_cache_info_ != NULL ? *metadata_cache_info_ : *default_instance().metadata_cache_info_;
#else
  return metadata_cache_info_ != NULL ? *metadata_cache_info_ : *default_instance_->metadata_cache_info_;
#endif
}
::net_instaweb::MetadataCacheInfo* LoggingInfo::mutable_metadata_cache_info() {
  set_has_metadata_cache_info();
  if (metadata_cache_info_ == NULL) {
    metadata_cache_info_ = new ::net_instaweb::MetadataCacheInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.metadata_cache_info)
  return metadata_cache_info_;
}
::net_instaweb::MetadataCacheInfo* LoggingInfo::release_metadata_cache_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.metadata_cache_info)
  clear_has_metadata_cache_info();
  ::net_instaweb::MetadataCacheInfo* temp = metadata_cache_info_;
  metadata_cache_info_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_metadata_cache_info(::net_instaweb::MetadataCacheInfo* metadata_cache_info) {
  delete metadata_cache_info_;
  metadata_cache_info_ = metadata_cache_info;
  if (metadata_cache_info) {
    set_has_metadata_cache_info();
  } else {
    clear_has_metadata_cache_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.metadata_cache_info)
}

// optional bool is_original_resource_cacheable = 5 [default = true];
bool LoggingInfo::has_is_original_resource_cacheable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoggingInfo::set_has_is_original_resource_cacheable() {
  _has_bits_[0] |= 0x00000008u;
}
void LoggingInfo::clear_has_is_original_resource_cacheable() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoggingInfo::clear_is_original_resource_cacheable() {
  is_original_resource_cacheable_ = true;
  clear_has_is_original_resource_cacheable();
}
 bool LoggingInfo::is_original_resource_cacheable() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.is_original_resource_cacheable)
  return is_original_resource_cacheable_;
}
 void LoggingInfo::set_is_original_resource_cacheable(bool value) {
  set_has_is_original_resource_cacheable();
  is_original_resource_cacheable_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.is_original_resource_cacheable)
}

// optional int32 experiment_id = 6;
bool LoggingInfo::has_experiment_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoggingInfo::set_has_experiment_id() {
  _has_bits_[0] |= 0x00000010u;
}
void LoggingInfo::clear_has_experiment_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoggingInfo::clear_experiment_id() {
  experiment_id_ = 0;
  clear_has_experiment_id();
}
 ::google::protobuf::int32 LoggingInfo::experiment_id() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.experiment_id)
  return experiment_id_;
}
 void LoggingInfo::set_experiment_id(::google::protobuf::int32 value) {
  set_has_experiment_id();
  experiment_id_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.experiment_id)
}

// optional .net_instaweb.PropertyPageInfo property_page_info = 8;
bool LoggingInfo::has_property_page_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoggingInfo::set_has_property_page_info() {
  _has_bits_[0] |= 0x00000020u;
}
void LoggingInfo::clear_has_property_page_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoggingInfo::clear_property_page_info() {
  if (property_page_info_ != NULL) property_page_info_->::net_instaweb::PropertyPageInfo::Clear();
  clear_has_property_page_info();
}
const ::net_instaweb::PropertyPageInfo& LoggingInfo::property_page_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.property_page_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return property_page_info_ != NULL ? *property_page_info_ : *default_instance().property_page_info_;
#else
  return property_page_info_ != NULL ? *property_page_info_ : *default_instance_->property_page_info_;
#endif
}
::net_instaweb::PropertyPageInfo* LoggingInfo::mutable_property_page_info() {
  set_has_property_page_info();
  if (property_page_info_ == NULL) {
    property_page_info_ = new ::net_instaweb::PropertyPageInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.property_page_info)
  return property_page_info_;
}
::net_instaweb::PropertyPageInfo* LoggingInfo::release_property_page_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.property_page_info)
  clear_has_property_page_info();
  ::net_instaweb::PropertyPageInfo* temp = property_page_info_;
  property_page_info_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_property_page_info(::net_instaweb::PropertyPageInfo* property_page_info) {
  delete property_page_info_;
  property_page_info_ = property_page_info;
  if (property_page_info) {
    set_has_property_page_info();
  } else {
    clear_has_property_page_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.property_page_info)
}

// repeated .net_instaweb.RewriterInfo rewriter_info = 9;
int LoggingInfo::rewriter_info_size() const {
  return rewriter_info_.size();
}
void LoggingInfo::clear_rewriter_info() {
  rewriter_info_.Clear();
}
const ::net_instaweb::RewriterInfo& LoggingInfo::rewriter_info(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.rewriter_info)
  return rewriter_info_.Get(index);
}
::net_instaweb::RewriterInfo* LoggingInfo::mutable_rewriter_info(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.rewriter_info)
  return rewriter_info_.Mutable(index);
}
::net_instaweb::RewriterInfo* LoggingInfo::add_rewriter_info() {
  // @@protoc_insertion_point(field_add:net_instaweb.LoggingInfo.rewriter_info)
  return rewriter_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::net_instaweb::RewriterInfo >*
LoggingInfo::mutable_rewriter_info() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.LoggingInfo.rewriter_info)
  return &rewriter_info_;
}
const ::google::protobuf::RepeatedPtrField< ::net_instaweb::RewriterInfo >&
LoggingInfo::rewriter_info() const {
  // @@protoc_insertion_point(field_list:net_instaweb.LoggingInfo.rewriter_info)
  return rewriter_info_;
}

// repeated .net_instaweb.RewriterStats rewriter_stats = 22;
int LoggingInfo::rewriter_stats_size() const {
  return rewriter_stats_.size();
}
void LoggingInfo::clear_rewriter_stats() {
  rewriter_stats_.Clear();
}
const ::net_instaweb::RewriterStats& LoggingInfo::rewriter_stats(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.rewriter_stats)
  return rewriter_stats_.Get(index);
}
::net_instaweb::RewriterStats* LoggingInfo::mutable_rewriter_stats(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.rewriter_stats)
  return rewriter_stats_.Mutable(index);
}
::net_instaweb::RewriterStats* LoggingInfo::add_rewriter_stats() {
  // @@protoc_insertion_point(field_add:net_instaweb.LoggingInfo.rewriter_stats)
  return rewriter_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::net_instaweb::RewriterStats >*
LoggingInfo::mutable_rewriter_stats() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.LoggingInfo.rewriter_stats)
  return &rewriter_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::net_instaweb::RewriterStats >&
LoggingInfo::rewriter_stats() const {
  // @@protoc_insertion_point(field_list:net_instaweb.LoggingInfo.rewriter_stats)
  return rewriter_stats_;
}

// optional bool is_html_response = 10 [default = false];
bool LoggingInfo::has_is_html_response() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LoggingInfo::set_has_is_html_response() {
  _has_bits_[0] |= 0x00000100u;
}
void LoggingInfo::clear_has_is_html_response() {
  _has_bits_[0] &= ~0x00000100u;
}
void LoggingInfo::clear_is_html_response() {
  is_html_response_ = false;
  clear_has_is_html_response();
}
 bool LoggingInfo::is_html_response() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.is_html_response)
  return is_html_response_;
}
 void LoggingInfo::set_is_html_response(bool value) {
  set_has_is_html_response();
  is_html_response_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.is_html_response)
}

// optional bool is_url_disallowed = 11 [default = false];
bool LoggingInfo::has_is_url_disallowed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LoggingInfo::set_has_is_url_disallowed() {
  _has_bits_[0] |= 0x00000200u;
}
void LoggingInfo::clear_has_is_url_disallowed() {
  _has_bits_[0] &= ~0x00000200u;
}
void LoggingInfo::clear_is_url_disallowed() {
  is_url_disallowed_ = false;
  clear_has_is_url_disallowed();
}
 bool LoggingInfo::is_url_disallowed() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.is_url_disallowed)
  return is_url_disallowed_;
}
 void LoggingInfo::set_is_url_disallowed(bool value) {
  set_has_is_url_disallowed();
  is_url_disallowed_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.is_url_disallowed)
}

// optional int64 options_signature_hash = 12;
bool LoggingInfo::has_options_signature_hash() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LoggingInfo::set_has_options_signature_hash() {
  _has_bits_[0] |= 0x00000400u;
}
void LoggingInfo::clear_has_options_signature_hash() {
  _has_bits_[0] &= ~0x00000400u;
}
void LoggingInfo::clear_options_signature_hash() {
  options_signature_hash_ = GOOGLE_LONGLONG(0);
  clear_has_options_signature_hash();
}
 ::google::protobuf::int64 LoggingInfo::options_signature_hash() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.options_signature_hash)
  return options_signature_hash_;
}
 void LoggingInfo::set_options_signature_hash(::google::protobuf::int64 value) {
  set_has_options_signature_hash();
  options_signature_hash_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.options_signature_hash)
}

// optional bool is_request_disabled = 13 [default = false];
bool LoggingInfo::has_is_request_disabled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LoggingInfo::set_has_is_request_disabled() {
  _has_bits_[0] |= 0x00000800u;
}
void LoggingInfo::clear_has_is_request_disabled() {
  _has_bits_[0] &= ~0x00000800u;
}
void LoggingInfo::clear_is_request_disabled() {
  is_request_disabled_ = false;
  clear_has_is_request_disabled();
}
 bool LoggingInfo::is_request_disabled() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.is_request_disabled)
  return is_request_disabled_;
}
 void LoggingInfo::set_is_request_disabled(bool value) {
  set_has_is_request_disabled();
  is_request_disabled_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.is_request_disabled)
}

// optional .net_instaweb.FlushEarlyFlowInfo flush_early_flow_info = 14;
bool LoggingInfo::has_flush_early_flow_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LoggingInfo::set_has_flush_early_flow_info() {
  _has_bits_[0] |= 0x00001000u;
}
void LoggingInfo::clear_has_flush_early_flow_info() {
  _has_bits_[0] &= ~0x00001000u;
}
void LoggingInfo::clear_flush_early_flow_info() {
  if (flush_early_flow_info_ != NULL) flush_early_flow_info_->::net_instaweb::FlushEarlyFlowInfo::Clear();
  clear_has_flush_early_flow_info();
}
const ::net_instaweb::FlushEarlyFlowInfo& LoggingInfo::flush_early_flow_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.flush_early_flow_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return flush_early_flow_info_ != NULL ? *flush_early_flow_info_ : *default_instance().flush_early_flow_info_;
#else
  return flush_early_flow_info_ != NULL ? *flush_early_flow_info_ : *default_instance_->flush_early_flow_info_;
#endif
}
::net_instaweb::FlushEarlyFlowInfo* LoggingInfo::mutable_flush_early_flow_info() {
  set_has_flush_early_flow_info();
  if (flush_early_flow_info_ == NULL) {
    flush_early_flow_info_ = new ::net_instaweb::FlushEarlyFlowInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.flush_early_flow_info)
  return flush_early_flow_info_;
}
::net_instaweb::FlushEarlyFlowInfo* LoggingInfo::release_flush_early_flow_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.flush_early_flow_info)
  clear_has_flush_early_flow_info();
  ::net_instaweb::FlushEarlyFlowInfo* temp = flush_early_flow_info_;
  flush_early_flow_info_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_flush_early_flow_info(::net_instaweb::FlushEarlyFlowInfo* flush_early_flow_info) {
  delete flush_early_flow_info_;
  flush_early_flow_info_ = flush_early_flow_info;
  if (flush_early_flow_info) {
    set_has_flush_early_flow_info();
  } else {
    clear_has_flush_early_flow_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.flush_early_flow_info)
}

// optional bool rewriter_info_size_limit_exceeded = 15 [default = false];
bool LoggingInfo::has_rewriter_info_size_limit_exceeded() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LoggingInfo::set_has_rewriter_info_size_limit_exceeded() {
  _has_bits_[0] |= 0x00002000u;
}
void LoggingInfo::clear_has_rewriter_info_size_limit_exceeded() {
  _has_bits_[0] &= ~0x00002000u;
}
void LoggingInfo::clear_rewriter_info_size_limit_exceeded() {
  rewriter_info_size_limit_exceeded_ = false;
  clear_has_rewriter_info_size_limit_exceeded();
}
 bool LoggingInfo::rewriter_info_size_limit_exceeded() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.rewriter_info_size_limit_exceeded)
  return rewriter_info_size_limit_exceeded_;
}
 void LoggingInfo::set_rewriter_info_size_limit_exceeded(bool value) {
  set_has_rewriter_info_size_limit_exceeded();
  rewriter_info_size_limit_exceeded_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.rewriter_info_size_limit_exceeded)
}

// optional bool is_pagespeed_resource = 16 [default = false];
bool LoggingInfo::has_is_pagespeed_resource() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LoggingInfo::set_has_is_pagespeed_resource() {
  _has_bits_[0] |= 0x00004000u;
}
void LoggingInfo::clear_has_is_pagespeed_resource() {
  _has_bits_[0] &= ~0x00004000u;
}
void LoggingInfo::clear_is_pagespeed_resource() {
  is_pagespeed_resource_ = false;
  clear_has_is_pagespeed_resource();
}
 bool LoggingInfo::is_pagespeed_resource() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.is_pagespeed_resource)
  return is_pagespeed_resource_;
}
 void LoggingInfo::set_is_pagespeed_resource(bool value) {
  set_has_is_pagespeed_resource();
  is_pagespeed_resource_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.is_pagespeed_resource)
}

// optional .net_instaweb.ResourceUrlInfo resource_url_info = 17;
bool LoggingInfo::has_resource_url_info() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LoggingInfo::set_has_resource_url_info() {
  _has_bits_[0] |= 0x00008000u;
}
void LoggingInfo::clear_has_resource_url_info() {
  _has_bits_[0] &= ~0x00008000u;
}
void LoggingInfo::clear_resource_url_info() {
  if (resource_url_info_ != NULL) resource_url_info_->::net_instaweb::ResourceUrlInfo::Clear();
  clear_has_resource_url_info();
}
const ::net_instaweb::ResourceUrlInfo& LoggingInfo::resource_url_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.resource_url_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return resource_url_info_ != NULL ? *resource_url_info_ : *default_instance().resource_url_info_;
#else
  return resource_url_info_ != NULL ? *resource_url_info_ : *default_instance_->resource_url_info_;
#endif
}
::net_instaweb::ResourceUrlInfo* LoggingInfo::mutable_resource_url_info() {
  set_has_resource_url_info();
  if (resource_url_info_ == NULL) {
    resource_url_info_ = new ::net_instaweb::ResourceUrlInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.resource_url_info)
  return resource_url_info_;
}
::net_instaweb::ResourceUrlInfo* LoggingInfo::release_resource_url_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.resource_url_info)
  clear_has_resource_url_info();
  ::net_instaweb::ResourceUrlInfo* temp = resource_url_info_;
  resource_url_info_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_resource_url_info(::net_instaweb::ResourceUrlInfo* resource_url_info) {
  delete resource_url_info_;
  resource_url_info_ = resource_url_info;
  if (resource_url_info) {
    set_has_resource_url_info();
  } else {
    clear_has_resource_url_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.resource_url_info)
}

// optional .net_instaweb.CacheHtmlLoggingInfo cache_html_logging_info = 18;
bool LoggingInfo::has_cache_html_logging_info() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LoggingInfo::set_has_cache_html_logging_info() {
  _has_bits_[0] |= 0x00010000u;
}
void LoggingInfo::clear_has_cache_html_logging_info() {
  _has_bits_[0] &= ~0x00010000u;
}
void LoggingInfo::clear_cache_html_logging_info() {
  if (cache_html_logging_info_ != NULL) cache_html_logging_info_->::net_instaweb::CacheHtmlLoggingInfo::Clear();
  clear_has_cache_html_logging_info();
}
const ::net_instaweb::CacheHtmlLoggingInfo& LoggingInfo::cache_html_logging_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.cache_html_logging_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return cache_html_logging_info_ != NULL ? *cache_html_logging_info_ : *default_instance().cache_html_logging_info_;
#else
  return cache_html_logging_info_ != NULL ? *cache_html_logging_info_ : *default_instance_->cache_html_logging_info_;
#endif
}
::net_instaweb::CacheHtmlLoggingInfo* LoggingInfo::mutable_cache_html_logging_info() {
  set_has_cache_html_logging_info();
  if (cache_html_logging_info_ == NULL) {
    cache_html_logging_info_ = new ::net_instaweb::CacheHtmlLoggingInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.cache_html_logging_info)
  return cache_html_logging_info_;
}
::net_instaweb::CacheHtmlLoggingInfo* LoggingInfo::release_cache_html_logging_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.cache_html_logging_info)
  clear_has_cache_html_logging_info();
  ::net_instaweb::CacheHtmlLoggingInfo* temp = cache_html_logging_info_;
  cache_html_logging_info_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_cache_html_logging_info(::net_instaweb::CacheHtmlLoggingInfo* cache_html_logging_info) {
  delete cache_html_logging_info_;
  cache_html_logging_info_ = cache_html_logging_info;
  if (cache_html_logging_info) {
    set_has_cache_html_logging_info();
  } else {
    clear_has_cache_html_logging_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.cache_html_logging_info)
}

// optional int32 num_html_critical_images = 19 [default = -1];
bool LoggingInfo::has_num_html_critical_images() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LoggingInfo::set_has_num_html_critical_images() {
  _has_bits_[0] |= 0x00020000u;
}
void LoggingInfo::clear_has_num_html_critical_images() {
  _has_bits_[0] &= ~0x00020000u;
}
void LoggingInfo::clear_num_html_critical_images() {
  num_html_critical_images_ = -1;
  clear_has_num_html_critical_images();
}
 ::google::protobuf::int32 LoggingInfo::num_html_critical_images() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.num_html_critical_images)
  return num_html_critical_images_;
}
 void LoggingInfo::set_num_html_critical_images(::google::protobuf::int32 value) {
  set_has_num_html_critical_images();
  num_html_critical_images_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.num_html_critical_images)
}

// optional int32 num_css_critical_images = 20 [default = -1];
bool LoggingInfo::has_num_css_critical_images() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LoggingInfo::set_has_num_css_critical_images() {
  _has_bits_[0] |= 0x00040000u;
}
void LoggingInfo::clear_has_num_css_critical_images() {
  _has_bits_[0] &= ~0x00040000u;
}
void LoggingInfo::clear_num_css_critical_images() {
  num_css_critical_images_ = -1;
  clear_has_num_css_critical_images();
}
 ::google::protobuf::int32 LoggingInfo::num_css_critical_images() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.num_css_critical_images)
  return num_css_critical_images_;
}
 void LoggingInfo::set_num_css_critical_images(::google::protobuf::int32 value) {
  set_has_num_css_critical_images();
  num_css_critical_images_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.num_css_critical_images)
}

// optional .net_instaweb.ImageStats image_stats = 21;
bool LoggingInfo::has_image_stats() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LoggingInfo::set_has_image_stats() {
  _has_bits_[0] |= 0x00080000u;
}
void LoggingInfo::clear_has_image_stats() {
  _has_bits_[0] &= ~0x00080000u;
}
void LoggingInfo::clear_image_stats() {
  if (image_stats_ != NULL) image_stats_->::net_instaweb::ImageStats::Clear();
  clear_has_image_stats();
}
const ::net_instaweb::ImageStats& LoggingInfo::image_stats() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.image_stats)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return image_stats_ != NULL ? *image_stats_ : *default_instance().image_stats_;
#else
  return image_stats_ != NULL ? *image_stats_ : *default_instance_->image_stats_;
#endif
}
::net_instaweb::ImageStats* LoggingInfo::mutable_image_stats() {
  set_has_image_stats();
  if (image_stats_ == NULL) {
    image_stats_ = new ::net_instaweb::ImageStats;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.image_stats)
  return image_stats_;
}
::net_instaweb::ImageStats* LoggingInfo::release_image_stats() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.image_stats)
  clear_has_image_stats();
  ::net_instaweb::ImageStats* temp = image_stats_;
  image_stats_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_image_stats(::net_instaweb::ImageStats* image_stats) {
  delete image_stats_;
  image_stats_ = image_stats;
  if (image_stats) {
    set_has_image_stats();
  } else {
    clear_has_image_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.image_stats)
}

// optional .net_instaweb.CriticalCssInfo critical_css_info = 23;
bool LoggingInfo::has_critical_css_info() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LoggingInfo::set_has_critical_css_info() {
  _has_bits_[0] |= 0x00100000u;
}
void LoggingInfo::clear_has_critical_css_info() {
  _has_bits_[0] &= ~0x00100000u;
}
void LoggingInfo::clear_critical_css_info() {
  if (critical_css_info_ != NULL) critical_css_info_->::net_instaweb::CriticalCssInfo::Clear();
  clear_has_critical_css_info();
}
const ::net_instaweb::CriticalCssInfo& LoggingInfo::critical_css_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.critical_css_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return critical_css_info_ != NULL ? *critical_css_info_ : *default_instance().critical_css_info_;
#else
  return critical_css_info_ != NULL ? *critical_css_info_ : *default_instance_->critical_css_info_;
#endif
}
::net_instaweb::CriticalCssInfo* LoggingInfo::mutable_critical_css_info() {
  set_has_critical_css_info();
  if (critical_css_info_ == NULL) {
    critical_css_info_ = new ::net_instaweb::CriticalCssInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.critical_css_info)
  return critical_css_info_;
}
::net_instaweb::CriticalCssInfo* LoggingInfo::release_critical_css_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.critical_css_info)
  clear_has_critical_css_info();
  ::net_instaweb::CriticalCssInfo* temp = critical_css_info_;
  critical_css_info_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_critical_css_info(::net_instaweb::CriticalCssInfo* critical_css_info) {
  delete critical_css_info_;
  critical_css_info_ = critical_css_info;
  if (critical_css_info) {
    set_has_critical_css_info();
  } else {
    clear_has_critical_css_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.critical_css_info)
}

// optional .net_instaweb.DeviceInfo device_info = 24;
bool LoggingInfo::has_device_info() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LoggingInfo::set_has_device_info() {
  _has_bits_[0] |= 0x00200000u;
}
void LoggingInfo::clear_has_device_info() {
  _has_bits_[0] &= ~0x00200000u;
}
void LoggingInfo::clear_device_info() {
  if (device_info_ != NULL) device_info_->::net_instaweb::DeviceInfo::Clear();
  clear_has_device_info();
}
const ::net_instaweb::DeviceInfo& LoggingInfo::device_info() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.device_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return device_info_ != NULL ? *device_info_ : *default_instance().device_info_;
#else
  return device_info_ != NULL ? *device_info_ : *default_instance_->device_info_;
#endif
}
::net_instaweb::DeviceInfo* LoggingInfo::mutable_device_info() {
  set_has_device_info();
  if (device_info_ == NULL) {
    device_info_ = new ::net_instaweb::DeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:net_instaweb.LoggingInfo.device_info)
  return device_info_;
}
::net_instaweb::DeviceInfo* LoggingInfo::release_device_info() {
  // @@protoc_insertion_point(field_release:net_instaweb.LoggingInfo.device_info)
  clear_has_device_info();
  ::net_instaweb::DeviceInfo* temp = device_info_;
  device_info_ = NULL;
  return temp;
}
void LoggingInfo::set_allocated_device_info(::net_instaweb::DeviceInfo* device_info) {
  delete device_info_;
  device_info_ = device_info;
  if (device_info) {
    set_has_device_info();
  } else {
    clear_has_device_info();
  }
  // @@protoc_insertion_point(field_set_allocated:net_instaweb.LoggingInfo.device_info)
}

// optional bool is_xhr = 25;
bool LoggingInfo::has_is_xhr() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LoggingInfo::set_has_is_xhr() {
  _has_bits_[0] |= 0x00400000u;
}
void LoggingInfo::clear_has_is_xhr() {
  _has_bits_[0] &= ~0x00400000u;
}
void LoggingInfo::clear_is_xhr() {
  is_xhr_ = false;
  clear_has_is_xhr();
}
 bool LoggingInfo::is_xhr() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.is_xhr)
  return is_xhr_;
}
 void LoggingInfo::set_is_xhr(bool value) {
  set_has_is_xhr();
  is_xhr_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.is_xhr)
}

// optional int32 prior_experiment_id = 26 [default = -1];
bool LoggingInfo::has_prior_experiment_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LoggingInfo::set_has_prior_experiment_id() {
  _has_bits_[0] |= 0x00800000u;
}
void LoggingInfo::clear_has_prior_experiment_id() {
  _has_bits_[0] &= ~0x00800000u;
}
void LoggingInfo::clear_prior_experiment_id() {
  prior_experiment_id_ = -1;
  clear_has_prior_experiment_id();
}
 ::google::protobuf::int32 LoggingInfo::prior_experiment_id() const {
  // @@protoc_insertion_point(field_get:net_instaweb.LoggingInfo.prior_experiment_id)
  return prior_experiment_id_;
}
 void LoggingInfo::set_prior_experiment_id(::google::protobuf::int32 value) {
  set_has_prior_experiment_id();
  prior_experiment_id_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.LoggingInfo.prior_experiment_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)
