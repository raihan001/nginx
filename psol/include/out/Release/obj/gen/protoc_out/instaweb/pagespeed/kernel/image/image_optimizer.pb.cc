// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pagespeed/kernel/image/image_optimizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pagespeed/kernel/image/image_optimizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace pagespeed {
namespace image_compression {

void protobuf_ShutdownFile_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto() {
  delete ImageOptions::default_instance_;
  delete ImageDimensions::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ImageOptions::default_instance_ = new ImageOptions();
  ImageDimensions::default_instance_ = new ImageDimensions();
  ImageOptions::default_instance_->InitAsDefaultInstance();
  ImageDimensions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto_once_);
void protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto_once_,
                 &protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto {
  StaticDescriptorInitializer_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto() {
    protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto();
  }
} static_descriptor_initializer_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForImageOptions(
    ImageOptions* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageOptions::kAllowPngFieldNumber;
const int ImageOptions::kAllowJpegFieldNumber;
const int ImageOptions::kAllowWebpLossyFieldNumber;
const int ImageOptions::kAllowWebpLosslessOrAlphaFieldNumber;
const int ImageOptions::kAllowWebpAnimatedFieldNumber;
const int ImageOptions::kAllowConvertLosslessToLossyFieldNumber;
const int ImageOptions::kMustReduceBytesFieldNumber;
const int ImageOptions::kMaxJpegQualityFieldNumber;
const int ImageOptions::kMaxWebpQualityFieldNumber;
const int ImageOptions::kMaxWebpAnimatedQualityFieldNumber;
const int ImageOptions::kMaxTimeoutMsFieldNumber;
const int ImageOptions::kTryBestCompressionForPngFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageOptions::ImageOptions()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pagespeed.image_compression.ImageOptions)
}

void ImageOptions::InitAsDefaultInstance() {
}

ImageOptions::ImageOptions(const ImageOptions& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pagespeed.image_compression.ImageOptions)
}

void ImageOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  allow_png_ = true;
  allow_jpeg_ = true;
  allow_webp_lossy_ = true;
  allow_webp_lossless_or_alpha_ = false;
  allow_webp_animated_ = false;
  allow_convert_lossless_to_lossy_ = false;
  must_reduce_bytes_ = true;
  max_jpeg_quality_ = 85;
  max_webp_quality_ = 85;
  max_webp_animated_quality_ = 85;
  max_timeout_ms_ = -1;
  try_best_compression_for_png_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageOptions::~ImageOptions() {
  // @@protoc_insertion_point(destructor:pagespeed.image_compression.ImageOptions)
  SharedDtor();
}

void ImageOptions::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ImageOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageOptions& ImageOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto();
#endif
  return *default_instance_;
}

ImageOptions* ImageOptions::default_instance_ = NULL;

ImageOptions* ImageOptions::New(::google::protobuf::Arena* arena) const {
  ImageOptions* n = new ImageOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:pagespeed.image_compression.ImageOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(allow_webp_lossless_or_alpha_, allow_convert_lossless_to_lossy_);
    allow_png_ = true;
    allow_jpeg_ = true;
    allow_webp_lossy_ = true;
    must_reduce_bytes_ = true;
    max_jpeg_quality_ = 85;
  }
  if (_has_bits_[8 / 32] & 3840u) {
    max_webp_quality_ = 85;
    max_webp_animated_quality_ = 85;
    max_timeout_ms_ = -1;
    try_best_compression_for_png_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImageOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForImageOptions, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:pagespeed.image_compression.ImageOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool allow_png = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_png_)));
          set_has_allow_png();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allow_jpeg;
        break;
      }

      // optional bool allow_jpeg = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_allow_jpeg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_jpeg_)));
          set_has_allow_jpeg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_allow_webp_lossy;
        break;
      }

      // optional bool allow_webp_lossy = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_allow_webp_lossy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_webp_lossy_)));
          set_has_allow_webp_lossy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_allow_webp_lossless_or_alpha;
        break;
      }

      // optional bool allow_webp_lossless_or_alpha = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_allow_webp_lossless_or_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_webp_lossless_or_alpha_)));
          set_has_allow_webp_lossless_or_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_allow_webp_animated;
        break;
      }

      // optional bool allow_webp_animated = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_allow_webp_animated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_webp_animated_)));
          set_has_allow_webp_animated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_allow_convert_lossless_to_lossy;
        break;
      }

      // optional bool allow_convert_lossless_to_lossy = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_allow_convert_lossless_to_lossy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_convert_lossless_to_lossy_)));
          set_has_allow_convert_lossless_to_lossy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_must_reduce_bytes;
        break;
      }

      // optional bool must_reduce_bytes = 7 [default = true];
      case 7: {
        if (tag == 56) {
         parse_must_reduce_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &must_reduce_bytes_)));
          set_has_must_reduce_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_jpeg_quality;
        break;
      }

      // optional int32 max_jpeg_quality = 8 [default = 85];
      case 8: {
        if (tag == 64) {
         parse_max_jpeg_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_jpeg_quality_)));
          set_has_max_jpeg_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_webp_quality;
        break;
      }

      // optional int32 max_webp_quality = 9 [default = 85];
      case 9: {
        if (tag == 72) {
         parse_max_webp_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_webp_quality_)));
          set_has_max_webp_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_max_webp_animated_quality;
        break;
      }

      // optional int32 max_webp_animated_quality = 10 [default = 85];
      case 10: {
        if (tag == 80) {
         parse_max_webp_animated_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_webp_animated_quality_)));
          set_has_max_webp_animated_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_timeout_ms;
        break;
      }

      // optional int32 max_timeout_ms = 11 [default = -1];
      case 11: {
        if (tag == 88) {
         parse_max_timeout_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_timeout_ms_)));
          set_has_max_timeout_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_try_best_compression_for_png;
        break;
      }

      // optional bool try_best_compression_for_png = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_try_best_compression_for_png:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &try_best_compression_for_png_)));
          set_has_try_best_compression_for_png();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pagespeed.image_compression.ImageOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pagespeed.image_compression.ImageOptions)
  return false;
#undef DO_
}

void ImageOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pagespeed.image_compression.ImageOptions)
  // optional bool allow_png = 1 [default = true];
  if (has_allow_png()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->allow_png(), output);
  }

  // optional bool allow_jpeg = 2 [default = true];
  if (has_allow_jpeg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_jpeg(), output);
  }

  // optional bool allow_webp_lossy = 3 [default = true];
  if (has_allow_webp_lossy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allow_webp_lossy(), output);
  }

  // optional bool allow_webp_lossless_or_alpha = 4 [default = false];
  if (has_allow_webp_lossless_or_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->allow_webp_lossless_or_alpha(), output);
  }

  // optional bool allow_webp_animated = 5 [default = false];
  if (has_allow_webp_animated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_webp_animated(), output);
  }

  // optional bool allow_convert_lossless_to_lossy = 6 [default = false];
  if (has_allow_convert_lossless_to_lossy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allow_convert_lossless_to_lossy(), output);
  }

  // optional bool must_reduce_bytes = 7 [default = true];
  if (has_must_reduce_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->must_reduce_bytes(), output);
  }

  // optional int32 max_jpeg_quality = 8 [default = 85];
  if (has_max_jpeg_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_jpeg_quality(), output);
  }

  // optional int32 max_webp_quality = 9 [default = 85];
  if (has_max_webp_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_webp_quality(), output);
  }

  // optional int32 max_webp_animated_quality = 10 [default = 85];
  if (has_max_webp_animated_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->max_webp_animated_quality(), output);
  }

  // optional int32 max_timeout_ms = 11 [default = -1];
  if (has_max_timeout_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_timeout_ms(), output);
  }

  // optional bool try_best_compression_for_png = 12 [default = true];
  if (has_try_best_compression_for_png()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->try_best_compression_for_png(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:pagespeed.image_compression.ImageOptions)
}

int ImageOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pagespeed.image_compression.ImageOptions)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool allow_png = 1 [default = true];
    if (has_allow_png()) {
      total_size += 1 + 1;
    }

    // optional bool allow_jpeg = 2 [default = true];
    if (has_allow_jpeg()) {
      total_size += 1 + 1;
    }

    // optional bool allow_webp_lossy = 3 [default = true];
    if (has_allow_webp_lossy()) {
      total_size += 1 + 1;
    }

    // optional bool allow_webp_lossless_or_alpha = 4 [default = false];
    if (has_allow_webp_lossless_or_alpha()) {
      total_size += 1 + 1;
    }

    // optional bool allow_webp_animated = 5 [default = false];
    if (has_allow_webp_animated()) {
      total_size += 1 + 1;
    }

    // optional bool allow_convert_lossless_to_lossy = 6 [default = false];
    if (has_allow_convert_lossless_to_lossy()) {
      total_size += 1 + 1;
    }

    // optional bool must_reduce_bytes = 7 [default = true];
    if (has_must_reduce_bytes()) {
      total_size += 1 + 1;
    }

    // optional int32 max_jpeg_quality = 8 [default = 85];
    if (has_max_jpeg_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_jpeg_quality());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 max_webp_quality = 9 [default = 85];
    if (has_max_webp_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_webp_quality());
    }

    // optional int32 max_webp_animated_quality = 10 [default = 85];
    if (has_max_webp_animated_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_webp_animated_quality());
    }

    // optional int32 max_timeout_ms = 11 [default = -1];
    if (has_max_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_timeout_ms());
    }

    // optional bool try_best_compression_for_png = 12 [default = true];
    if (has_try_best_compression_for_png()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageOptions*>(&from));
}

void ImageOptions::MergeFrom(const ImageOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pagespeed.image_compression.ImageOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allow_png()) {
      set_allow_png(from.allow_png());
    }
    if (from.has_allow_jpeg()) {
      set_allow_jpeg(from.allow_jpeg());
    }
    if (from.has_allow_webp_lossy()) {
      set_allow_webp_lossy(from.allow_webp_lossy());
    }
    if (from.has_allow_webp_lossless_or_alpha()) {
      set_allow_webp_lossless_or_alpha(from.allow_webp_lossless_or_alpha());
    }
    if (from.has_allow_webp_animated()) {
      set_allow_webp_animated(from.allow_webp_animated());
    }
    if (from.has_allow_convert_lossless_to_lossy()) {
      set_allow_convert_lossless_to_lossy(from.allow_convert_lossless_to_lossy());
    }
    if (from.has_must_reduce_bytes()) {
      set_must_reduce_bytes(from.must_reduce_bytes());
    }
    if (from.has_max_jpeg_quality()) {
      set_max_jpeg_quality(from.max_jpeg_quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_webp_quality()) {
      set_max_webp_quality(from.max_webp_quality());
    }
    if (from.has_max_webp_animated_quality()) {
      set_max_webp_animated_quality(from.max_webp_animated_quality());
    }
    if (from.has_max_timeout_ms()) {
      set_max_timeout_ms(from.max_timeout_ms());
    }
    if (from.has_try_best_compression_for_png()) {
      set_try_best_compression_for_png(from.try_best_compression_for_png());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ImageOptions::CopyFrom(const ImageOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pagespeed.image_compression.ImageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageOptions::IsInitialized() const {

  return true;
}

void ImageOptions::Swap(ImageOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageOptions::InternalSwap(ImageOptions* other) {
  std::swap(allow_png_, other->allow_png_);
  std::swap(allow_jpeg_, other->allow_jpeg_);
  std::swap(allow_webp_lossy_, other->allow_webp_lossy_);
  std::swap(allow_webp_lossless_or_alpha_, other->allow_webp_lossless_or_alpha_);
  std::swap(allow_webp_animated_, other->allow_webp_animated_);
  std::swap(allow_convert_lossless_to_lossy_, other->allow_convert_lossless_to_lossy_);
  std::swap(must_reduce_bytes_, other->must_reduce_bytes_);
  std::swap(max_jpeg_quality_, other->max_jpeg_quality_);
  std::swap(max_webp_quality_, other->max_webp_quality_);
  std::swap(max_webp_animated_quality_, other->max_webp_animated_quality_);
  std::swap(max_timeout_ms_, other->max_timeout_ms_);
  std::swap(try_best_compression_for_png_, other->try_best_compression_for_png_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageOptions::GetTypeName() const {
  return "pagespeed.image_compression.ImageOptions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageOptions

// optional bool allow_png = 1 [default = true];
bool ImageOptions::has_allow_png() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageOptions::set_has_allow_png() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageOptions::clear_has_allow_png() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageOptions::clear_allow_png() {
  allow_png_ = true;
  clear_has_allow_png();
}
 bool ImageOptions::allow_png() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.allow_png)
  return allow_png_;
}
 void ImageOptions::set_allow_png(bool value) {
  set_has_allow_png();
  allow_png_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.allow_png)
}

// optional bool allow_jpeg = 2 [default = true];
bool ImageOptions::has_allow_jpeg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageOptions::set_has_allow_jpeg() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageOptions::clear_has_allow_jpeg() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageOptions::clear_allow_jpeg() {
  allow_jpeg_ = true;
  clear_has_allow_jpeg();
}
 bool ImageOptions::allow_jpeg() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.allow_jpeg)
  return allow_jpeg_;
}
 void ImageOptions::set_allow_jpeg(bool value) {
  set_has_allow_jpeg();
  allow_jpeg_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.allow_jpeg)
}

// optional bool allow_webp_lossy = 3 [default = true];
bool ImageOptions::has_allow_webp_lossy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageOptions::set_has_allow_webp_lossy() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageOptions::clear_has_allow_webp_lossy() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageOptions::clear_allow_webp_lossy() {
  allow_webp_lossy_ = true;
  clear_has_allow_webp_lossy();
}
 bool ImageOptions::allow_webp_lossy() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.allow_webp_lossy)
  return allow_webp_lossy_;
}
 void ImageOptions::set_allow_webp_lossy(bool value) {
  set_has_allow_webp_lossy();
  allow_webp_lossy_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.allow_webp_lossy)
}

// optional bool allow_webp_lossless_or_alpha = 4 [default = false];
bool ImageOptions::has_allow_webp_lossless_or_alpha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageOptions::set_has_allow_webp_lossless_or_alpha() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageOptions::clear_has_allow_webp_lossless_or_alpha() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageOptions::clear_allow_webp_lossless_or_alpha() {
  allow_webp_lossless_or_alpha_ = false;
  clear_has_allow_webp_lossless_or_alpha();
}
 bool ImageOptions::allow_webp_lossless_or_alpha() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.allow_webp_lossless_or_alpha)
  return allow_webp_lossless_or_alpha_;
}
 void ImageOptions::set_allow_webp_lossless_or_alpha(bool value) {
  set_has_allow_webp_lossless_or_alpha();
  allow_webp_lossless_or_alpha_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.allow_webp_lossless_or_alpha)
}

// optional bool allow_webp_animated = 5 [default = false];
bool ImageOptions::has_allow_webp_animated() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageOptions::set_has_allow_webp_animated() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageOptions::clear_has_allow_webp_animated() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageOptions::clear_allow_webp_animated() {
  allow_webp_animated_ = false;
  clear_has_allow_webp_animated();
}
 bool ImageOptions::allow_webp_animated() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.allow_webp_animated)
  return allow_webp_animated_;
}
 void ImageOptions::set_allow_webp_animated(bool value) {
  set_has_allow_webp_animated();
  allow_webp_animated_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.allow_webp_animated)
}

// optional bool allow_convert_lossless_to_lossy = 6 [default = false];
bool ImageOptions::has_allow_convert_lossless_to_lossy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageOptions::set_has_allow_convert_lossless_to_lossy() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageOptions::clear_has_allow_convert_lossless_to_lossy() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageOptions::clear_allow_convert_lossless_to_lossy() {
  allow_convert_lossless_to_lossy_ = false;
  clear_has_allow_convert_lossless_to_lossy();
}
 bool ImageOptions::allow_convert_lossless_to_lossy() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.allow_convert_lossless_to_lossy)
  return allow_convert_lossless_to_lossy_;
}
 void ImageOptions::set_allow_convert_lossless_to_lossy(bool value) {
  set_has_allow_convert_lossless_to_lossy();
  allow_convert_lossless_to_lossy_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.allow_convert_lossless_to_lossy)
}

// optional bool must_reduce_bytes = 7 [default = true];
bool ImageOptions::has_must_reduce_bytes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImageOptions::set_has_must_reduce_bytes() {
  _has_bits_[0] |= 0x00000040u;
}
void ImageOptions::clear_has_must_reduce_bytes() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImageOptions::clear_must_reduce_bytes() {
  must_reduce_bytes_ = true;
  clear_has_must_reduce_bytes();
}
 bool ImageOptions::must_reduce_bytes() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.must_reduce_bytes)
  return must_reduce_bytes_;
}
 void ImageOptions::set_must_reduce_bytes(bool value) {
  set_has_must_reduce_bytes();
  must_reduce_bytes_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.must_reduce_bytes)
}

// optional int32 max_jpeg_quality = 8 [default = 85];
bool ImageOptions::has_max_jpeg_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImageOptions::set_has_max_jpeg_quality() {
  _has_bits_[0] |= 0x00000080u;
}
void ImageOptions::clear_has_max_jpeg_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImageOptions::clear_max_jpeg_quality() {
  max_jpeg_quality_ = 85;
  clear_has_max_jpeg_quality();
}
 ::google::protobuf::int32 ImageOptions::max_jpeg_quality() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.max_jpeg_quality)
  return max_jpeg_quality_;
}
 void ImageOptions::set_max_jpeg_quality(::google::protobuf::int32 value) {
  set_has_max_jpeg_quality();
  max_jpeg_quality_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.max_jpeg_quality)
}

// optional int32 max_webp_quality = 9 [default = 85];
bool ImageOptions::has_max_webp_quality() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImageOptions::set_has_max_webp_quality() {
  _has_bits_[0] |= 0x00000100u;
}
void ImageOptions::clear_has_max_webp_quality() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImageOptions::clear_max_webp_quality() {
  max_webp_quality_ = 85;
  clear_has_max_webp_quality();
}
 ::google::protobuf::int32 ImageOptions::max_webp_quality() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.max_webp_quality)
  return max_webp_quality_;
}
 void ImageOptions::set_max_webp_quality(::google::protobuf::int32 value) {
  set_has_max_webp_quality();
  max_webp_quality_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.max_webp_quality)
}

// optional int32 max_webp_animated_quality = 10 [default = 85];
bool ImageOptions::has_max_webp_animated_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImageOptions::set_has_max_webp_animated_quality() {
  _has_bits_[0] |= 0x00000200u;
}
void ImageOptions::clear_has_max_webp_animated_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImageOptions::clear_max_webp_animated_quality() {
  max_webp_animated_quality_ = 85;
  clear_has_max_webp_animated_quality();
}
 ::google::protobuf::int32 ImageOptions::max_webp_animated_quality() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.max_webp_animated_quality)
  return max_webp_animated_quality_;
}
 void ImageOptions::set_max_webp_animated_quality(::google::protobuf::int32 value) {
  set_has_max_webp_animated_quality();
  max_webp_animated_quality_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.max_webp_animated_quality)
}

// optional int32 max_timeout_ms = 11 [default = -1];
bool ImageOptions::has_max_timeout_ms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImageOptions::set_has_max_timeout_ms() {
  _has_bits_[0] |= 0x00000400u;
}
void ImageOptions::clear_has_max_timeout_ms() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImageOptions::clear_max_timeout_ms() {
  max_timeout_ms_ = -1;
  clear_has_max_timeout_ms();
}
 ::google::protobuf::int32 ImageOptions::max_timeout_ms() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.max_timeout_ms)
  return max_timeout_ms_;
}
 void ImageOptions::set_max_timeout_ms(::google::protobuf::int32 value) {
  set_has_max_timeout_ms();
  max_timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.max_timeout_ms)
}

// optional bool try_best_compression_for_png = 12 [default = true];
bool ImageOptions::has_try_best_compression_for_png() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImageOptions::set_has_try_best_compression_for_png() {
  _has_bits_[0] |= 0x00000800u;
}
void ImageOptions::clear_has_try_best_compression_for_png() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImageOptions::clear_try_best_compression_for_png() {
  try_best_compression_for_png_ = true;
  clear_has_try_best_compression_for_png();
}
 bool ImageOptions::try_best_compression_for_png() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageOptions.try_best_compression_for_png)
  return try_best_compression_for_png_;
}
 void ImageOptions::set_try_best_compression_for_png(bool value) {
  set_has_try_best_compression_for_png();
  try_best_compression_for_png_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageOptions.try_best_compression_for_png)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForImageDimensions(
    ImageDimensions* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDimensions::kWidthFieldNumber;
const int ImageDimensions::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDimensions::ImageDimensions()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pagespeed.image_compression.ImageDimensions)
}

void ImageDimensions::InitAsDefaultInstance() {
}

ImageDimensions::ImageDimensions(const ImageDimensions& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pagespeed.image_compression.ImageDimensions)
}

void ImageDimensions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageDimensions::~ImageDimensions() {
  // @@protoc_insertion_point(destructor:pagespeed.image_compression.ImageDimensions)
  SharedDtor();
}

void ImageDimensions::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ImageDimensions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageDimensions& ImageDimensions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_2fkernel_2fimage_2fimage_5foptimizer_2eproto();
#endif
  return *default_instance_;
}

ImageDimensions* ImageDimensions::default_instance_ = NULL;

ImageDimensions* ImageDimensions::New(::google::protobuf::Arena* arena) const {
  ImageDimensions* n = new ImageDimensions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageDimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:pagespeed.image_compression.ImageDimensions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImageDimensions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImageDimensions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImageDimensions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForImageDimensions, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:pagespeed.image_compression.ImageDimensions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pagespeed.image_compression.ImageDimensions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pagespeed.image_compression.ImageDimensions)
  return false;
#undef DO_
}

void ImageDimensions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pagespeed.image_compression.ImageDimensions)
  // optional int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:pagespeed.image_compression.ImageDimensions)
}

int ImageDimensions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pagespeed.image_compression.ImageDimensions)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDimensions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageDimensions*>(&from));
}

void ImageDimensions::MergeFrom(const ImageDimensions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pagespeed.image_compression.ImageDimensions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ImageDimensions::CopyFrom(const ImageDimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pagespeed.image_compression.ImageDimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDimensions::IsInitialized() const {

  return true;
}

void ImageDimensions::Swap(ImageDimensions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDimensions::InternalSwap(ImageDimensions* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ImageDimensions::GetTypeName() const {
  return "pagespeed.image_compression.ImageDimensions";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageDimensions

// optional int32 width = 1;
bool ImageDimensions::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageDimensions::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageDimensions::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageDimensions::clear_width() {
  width_ = 0;
  clear_has_width();
}
 ::google::protobuf::int32 ImageDimensions::width() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageDimensions.width)
  return width_;
}
 void ImageDimensions::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageDimensions.width)
}

// optional int32 height = 2;
bool ImageDimensions::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageDimensions::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageDimensions::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageDimensions::clear_height() {
  height_ = 0;
  clear_has_height();
}
 ::google::protobuf::int32 ImageDimensions::height() const {
  // @@protoc_insertion_point(field_get:pagespeed.image_compression.ImageDimensions.height)
  return height_;
}
 void ImageDimensions::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:pagespeed.image_compression.ImageDimensions.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace image_compression
}  // namespace pagespeed

// @@protoc_insertion_point(global_scope)
