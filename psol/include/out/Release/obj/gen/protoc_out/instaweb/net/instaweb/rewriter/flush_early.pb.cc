// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/instaweb/rewriter/flush_early.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/instaweb/rewriter/flush_early.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace net_instaweb {

void protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto() {
  delete FlushEarlyInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::net_instaweb::protobuf_AddDesc_pagespeed_2fkernel_2fhttp_2fhttp_2eproto();
  FlushEarlyInfo::default_instance_ = new FlushEarlyInfo();
  FlushEarlyInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_once_);
void protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_once_,
                 &protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto {
  StaticDescriptorInitializer_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto() {
    protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
  }
} static_descriptor_initializer_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForFlushEarlyInfo(
    FlushEarlyInfo* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlushEarlyInfo::kDnsPrefetchDomainsFieldNumber;
const int FlushEarlyInfo::kTotalDnsPrefetchDomainsFieldNumber;
const int FlushEarlyInfo::kTotalDnsPrefetchDomainsPreviousFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlushEarlyInfo::FlushEarlyInfo()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:net_instaweb.FlushEarlyInfo)
}

void FlushEarlyInfo::InitAsDefaultInstance() {
}

FlushEarlyInfo::FlushEarlyInfo(const FlushEarlyInfo& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:net_instaweb.FlushEarlyInfo)
}

void FlushEarlyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_dns_prefetch_domains_ = 0;
  total_dns_prefetch_domains_previous_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushEarlyInfo::~FlushEarlyInfo() {
  // @@protoc_insertion_point(destructor:net_instaweb.FlushEarlyInfo)
  SharedDtor();
}

void FlushEarlyInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FlushEarlyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FlushEarlyInfo& FlushEarlyInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_net_2finstaweb_2frewriter_2fflush_5fearly_2eproto();
#endif
  return *default_instance_;
}

FlushEarlyInfo* FlushEarlyInfo::default_instance_ = NULL;

FlushEarlyInfo* FlushEarlyInfo::New(::google::protobuf::Arena* arena) const {
  FlushEarlyInfo* n = new FlushEarlyInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlushEarlyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:net_instaweb.FlushEarlyInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FlushEarlyInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FlushEarlyInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_dns_prefetch_domains_, total_dns_prefetch_domains_previous_);

#undef ZR_HELPER_
#undef ZR_

  dns_prefetch_domains_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FlushEarlyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForFlushEarlyInfo, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net_instaweb.FlushEarlyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dns_prefetch_domains = 5;
      case 5: {
        if (tag == 42) {
         parse_dns_prefetch_domains:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dns_prefetch_domains()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_dns_prefetch_domains;
        if (input->ExpectTag(48)) goto parse_total_dns_prefetch_domains;
        break;
      }

      // optional int32 total_dns_prefetch_domains = 6;
      case 6: {
        if (tag == 48) {
         parse_total_dns_prefetch_domains:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_dns_prefetch_domains_)));
          set_has_total_dns_prefetch_domains();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_dns_prefetch_domains_previous;
        break;
      }

      // optional int32 total_dns_prefetch_domains_previous = 7;
      case 7: {
        if (tag == 56) {
         parse_total_dns_prefetch_domains_previous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_dns_prefetch_domains_previous_)));
          set_has_total_dns_prefetch_domains_previous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net_instaweb.FlushEarlyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net_instaweb.FlushEarlyInfo)
  return false;
#undef DO_
}

void FlushEarlyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net_instaweb.FlushEarlyInfo)
  // repeated string dns_prefetch_domains = 5;
  for (int i = 0; i < this->dns_prefetch_domains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dns_prefetch_domains(i), output);
  }

  // optional int32 total_dns_prefetch_domains = 6;
  if (has_total_dns_prefetch_domains()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total_dns_prefetch_domains(), output);
  }

  // optional int32 total_dns_prefetch_domains_previous = 7;
  if (has_total_dns_prefetch_domains_previous()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_dns_prefetch_domains_previous(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net_instaweb.FlushEarlyInfo)
}

int FlushEarlyInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:net_instaweb.FlushEarlyInfo)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 total_dns_prefetch_domains = 6;
    if (has_total_dns_prefetch_domains()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_dns_prefetch_domains());
    }

    // optional int32 total_dns_prefetch_domains_previous = 7;
    if (has_total_dns_prefetch_domains_previous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_dns_prefetch_domains_previous());
    }

  }
  // repeated string dns_prefetch_domains = 5;
  total_size += 1 * this->dns_prefetch_domains_size();
  for (int i = 0; i < this->dns_prefetch_domains_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dns_prefetch_domains(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushEarlyInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FlushEarlyInfo*>(&from));
}

void FlushEarlyInfo::MergeFrom(const FlushEarlyInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net_instaweb.FlushEarlyInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dns_prefetch_domains_.MergeFrom(from.dns_prefetch_domains_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_dns_prefetch_domains()) {
      set_total_dns_prefetch_domains(from.total_dns_prefetch_domains());
    }
    if (from.has_total_dns_prefetch_domains_previous()) {
      set_total_dns_prefetch_domains_previous(from.total_dns_prefetch_domains_previous());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void FlushEarlyInfo::CopyFrom(const FlushEarlyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net_instaweb.FlushEarlyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushEarlyInfo::IsInitialized() const {

  return true;
}

void FlushEarlyInfo::Swap(FlushEarlyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlushEarlyInfo::InternalSwap(FlushEarlyInfo* other) {
  dns_prefetch_domains_.UnsafeArenaSwap(&other->dns_prefetch_domains_);
  std::swap(total_dns_prefetch_domains_, other->total_dns_prefetch_domains_);
  std::swap(total_dns_prefetch_domains_previous_, other->total_dns_prefetch_domains_previous_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FlushEarlyInfo::GetTypeName() const {
  return "net_instaweb.FlushEarlyInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlushEarlyInfo

// repeated string dns_prefetch_domains = 5;
int FlushEarlyInfo::dns_prefetch_domains_size() const {
  return dns_prefetch_domains_.size();
}
void FlushEarlyInfo::clear_dns_prefetch_domains() {
  dns_prefetch_domains_.Clear();
}
 const ::std::string& FlushEarlyInfo::dns_prefetch_domains(int index) const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return dns_prefetch_domains_.Get(index);
}
 ::std::string* FlushEarlyInfo::mutable_dns_prefetch_domains(int index) {
  // @@protoc_insertion_point(field_mutable:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return dns_prefetch_domains_.Mutable(index);
}
 void FlushEarlyInfo::set_dns_prefetch_domains(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  dns_prefetch_domains_.Mutable(index)->assign(value);
}
 void FlushEarlyInfo::set_dns_prefetch_domains(int index, const char* value) {
  dns_prefetch_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
 void FlushEarlyInfo::set_dns_prefetch_domains(int index, const char* value, size_t size) {
  dns_prefetch_domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
 ::std::string* FlushEarlyInfo::add_dns_prefetch_domains() {
  // @@protoc_insertion_point(field_add_mutable:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return dns_prefetch_domains_.Add();
}
 void FlushEarlyInfo::add_dns_prefetch_domains(const ::std::string& value) {
  dns_prefetch_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
 void FlushEarlyInfo::add_dns_prefetch_domains(const char* value) {
  dns_prefetch_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
 void FlushEarlyInfo::add_dns_prefetch_domains(const char* value, size_t size) {
  dns_prefetch_domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FlushEarlyInfo::dns_prefetch_domains() const {
  // @@protoc_insertion_point(field_list:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return dns_prefetch_domains_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FlushEarlyInfo::mutable_dns_prefetch_domains() {
  // @@protoc_insertion_point(field_mutable_list:net_instaweb.FlushEarlyInfo.dns_prefetch_domains)
  return &dns_prefetch_domains_;
}

// optional int32 total_dns_prefetch_domains = 6;
bool FlushEarlyInfo::has_total_dns_prefetch_domains() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FlushEarlyInfo::set_has_total_dns_prefetch_domains() {
  _has_bits_[0] |= 0x00000002u;
}
void FlushEarlyInfo::clear_has_total_dns_prefetch_domains() {
  _has_bits_[0] &= ~0x00000002u;
}
void FlushEarlyInfo::clear_total_dns_prefetch_domains() {
  total_dns_prefetch_domains_ = 0;
  clear_has_total_dns_prefetch_domains();
}
 ::google::protobuf::int32 FlushEarlyInfo::total_dns_prefetch_domains() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyInfo.total_dns_prefetch_domains)
  return total_dns_prefetch_domains_;
}
 void FlushEarlyInfo::set_total_dns_prefetch_domains(::google::protobuf::int32 value) {
  set_has_total_dns_prefetch_domains();
  total_dns_prefetch_domains_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyInfo.total_dns_prefetch_domains)
}

// optional int32 total_dns_prefetch_domains_previous = 7;
bool FlushEarlyInfo::has_total_dns_prefetch_domains_previous() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FlushEarlyInfo::set_has_total_dns_prefetch_domains_previous() {
  _has_bits_[0] |= 0x00000004u;
}
void FlushEarlyInfo::clear_has_total_dns_prefetch_domains_previous() {
  _has_bits_[0] &= ~0x00000004u;
}
void FlushEarlyInfo::clear_total_dns_prefetch_domains_previous() {
  total_dns_prefetch_domains_previous_ = 0;
  clear_has_total_dns_prefetch_domains_previous();
}
 ::google::protobuf::int32 FlushEarlyInfo::total_dns_prefetch_domains_previous() const {
  // @@protoc_insertion_point(field_get:net_instaweb.FlushEarlyInfo.total_dns_prefetch_domains_previous)
  return total_dns_prefetch_domains_previous_;
}
 void FlushEarlyInfo::set_total_dns_prefetch_domains_previous(::google::protobuf::int32 value) {
  set_has_total_dns_prefetch_domains_previous();
  total_dns_prefetch_domains_previous_ = value;
  // @@protoc_insertion_point(field_set:net_instaweb.FlushEarlyInfo.total_dns_prefetch_domains_previous)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace net_instaweb

// @@protoc_insertion_point(global_scope)
